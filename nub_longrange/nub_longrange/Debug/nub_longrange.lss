
nub_longrange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  00800100  00800100  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000934  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ab  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a1  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	23 e0       	ldi	r18, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  88:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_setup>:
	return ret;
}


// Look at tag, have buffer pointer jump through data and get parts we care about
void getData(){
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  98:	82 e2       	ldi	r24, 0x22	; 34
  9a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  9e:	88 e9       	ldi	r24, 0x98	; 152
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a4:	8e e0       	ldi	r24, 0x0E	; 14
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  aa:	08 95       	ret

000000ac <TX0Write>:
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	46 2f       	mov	r20, r22
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	14 16       	cp	r1, r20
  b6:	15 06       	cpc	r1, r21
  b8:	9c f4       	brge	.+38     	; 0xe0 <TX0Write+0x34>
  ba:	70 91 00 01 	lds	r23, 0x0100	; 0x800100 <_edata>
  be:	97 2f       	mov	r25, r23
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	e9 2f       	mov	r30, r25
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	ec 5f       	subi	r30, 0xFC	; 252
  ca:	fd 4f       	sbci	r31, 0xFD	; 253
  cc:	80 83       	st	Z, r24
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	24 17       	cp	r18, r20
  d6:	35 07       	cpc	r19, r21
  d8:	a9 f7       	brne	.-22     	; 0xc4 <TX0Write+0x18>
  da:	67 0f       	add	r22, r23
  dc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
  e0:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <tx0ReadPos>
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	a8 17       	cp	r26, r24
  ea:	a9 f0       	breq	.+42     	; 0x116 <TX0Write+0x6a>
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	c6 ec       	ldi	r28, 0xC6	; 198
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	85 ff       	sbrs	r24, 5
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <TX0Write+0x48>
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	ac 5f       	subi	r26, 0xFC	; 252
  fe:	bd 4f       	sbci	r27, 0xFD	; 253
 100:	8c 91       	ld	r24, X
 102:	88 83       	st	Y, r24
 104:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <tx0ReadPos>
 108:	af 5f       	subi	r26, 0xFF	; 255
 10a:	a0 93 01 01 	sts	0x0101, r26	; 0x800101 <tx0ReadPos>
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	8a 13       	cpse	r24, r26
 114:	ef cf       	rjmp	.-34     	; 0xf4 <TX0Write+0x48>
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <getChar>:
 11c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rx0ReadPos>
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rx0WritePos>
 124:	98 17       	cp	r25, r24
 126:	49 f0       	breq	.+18     	; 0x13a <getChar+0x1e>
 128:	e9 2f       	mov	r30, r25
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ec 5f       	subi	r30, 0xFC	; 252
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 81       	ld	r24, Z
 132:	9f 5f       	subi	r25, 0xFF	; 255
 134:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rx0ReadPos>
 138:	08 95       	ret
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret

0000013e <main>:
 13e:	78 94       	sei
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 48 00 	call	0x90	; 0x90 <USART_setup>
 148:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rx0ReadPos>
 14c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rx0WritePos>
 150:	98 17       	cp	r25, r24
 152:	31 f0       	breq	.+12     	; 0x160 <main+0x22>
 154:	0e 94 8e 00 	call	0x11c	; 0x11c <getChar>
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 56 00 	call	0xac	; 0xac <TX0Write>
 160:	8f ec       	ldi	r24, 0xCF	; 207
 162:	97 e0       	ldi	r25, 0x07	; 7
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x26>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x2c>
 16a:	00 00       	nop
 16c:	ed cf       	rjmp	.-38     	; 0x148 <main+0xa>

0000016e <__vector_18>:
	}
}


// Interrupt for receiving UART data from RX 0 
ISR(USART_RX_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	
	rx0Buffer[rx0WritePos] = UDR0;
 180:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rx0WritePos>
 184:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 188:	e8 2f       	mov	r30, r24
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 5f       	subi	r30, 0xFC	; 252
 18e:	fe 4f       	sbci	r31, 0xFE	; 254
 190:	90 83       	st	Z, r25
	rx0WritePos++;
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rx0WritePos>
	{
		rx0WritePos = 0;
	}
	
	
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
