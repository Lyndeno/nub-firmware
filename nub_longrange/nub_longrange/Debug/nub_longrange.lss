
nub_longrange.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  00800100  00800100  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e8  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bf  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041c  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000463  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000304  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000021bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	23 e0       	ldi	r18, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_setup>:
	return ret;
}


// Look at tag, have buffer pointer jump through data and get parts we care about
void getData(){
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  98:	82 e2       	ldi	r24, 0x22	; 34
  9a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  9e:	88 e9       	ldi	r24, 0x98	; 152
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a4:	8e e0       	ldi	r24, 0x0E	; 14
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  aa:	08 95       	ret

000000ac <appendTX0>:
  ac:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  b0:	e9 2f       	mov	r30, r25
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	ec 5f       	subi	r30, 0xFC	; 252
  b6:	fd 4f       	sbci	r31, 0xFD	; 253
  b8:	80 83       	st	Z, r24
  ba:	9f 5f       	subi	r25, 0xFF	; 255
  bc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
  c0:	08 95       	ret

000000c2 <TX0Write>:
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	66 23       	and	r22, r22
  cc:	51 f0       	breq	.+20     	; 0xe2 <TX0Write+0x20>
  ce:	8c 01       	movw	r16, r24
  d0:	ec 01       	movw	r28, r24
  d2:	06 0f       	add	r16, r22
  d4:	11 1d       	adc	r17, r1
  d6:	89 91       	ld	r24, Y+
  d8:	0e 94 56 00 	call	0xac	; 0xac <appendTX0>
  dc:	c0 17       	cp	r28, r16
  de:	d1 07       	cpc	r29, r17
  e0:	d1 f7       	brne	.-12     	; 0xd6 <TX0Write+0x14>
  e2:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <tx0ReadPos>
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ea:	a8 17       	cp	r26, r24
  ec:	a9 f0       	breq	.+42     	; 0x118 <TX0Write+0x56>
  ee:	e0 ec       	ldi	r30, 0xC0	; 192
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	c6 ec       	ldi	r28, 0xC6	; 198
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	85 ff       	sbrs	r24, 5
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <TX0Write+0x34>
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	ac 5f       	subi	r26, 0xFC	; 252
 100:	bd 4f       	sbci	r27, 0xFD	; 253
 102:	8c 91       	ld	r24, X
 104:	88 83       	st	Y, r24
 106:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <tx0ReadPos>
 10a:	af 5f       	subi	r26, 0xFF	; 255
 10c:	a0 93 01 01 	sts	0x0101, r26	; 0x800101 <tx0ReadPos>
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 114:	8a 13       	cpse	r24, r26
 116:	ef cf       	rjmp	.-34     	; 0xf6 <TX0Write+0x34>
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <getChar>:
 122:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rx0ReadPos>
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rx0WritePos>
 12a:	98 17       	cp	r25, r24
 12c:	49 f0       	breq	.+18     	; 0x140 <getChar+0x1e>
 12e:	e9 2f       	mov	r30, r25
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ec 5f       	subi	r30, 0xFC	; 252
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	80 81       	ld	r24, Z
 138:	9f 5f       	subi	r25, 0xFF	; 255
 13a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rx0ReadPos>
 13e:	08 95       	ret
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <main>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	c4 56       	subi	r28, 0x64	; 100
 14e:	d1 09       	sbc	r29, r1
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	78 94       	sei
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 48 00 	call	0x90	; 0x90 <USART_setup>
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rx0ReadPos>
 16c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rx0WritePos>
 170:	98 17       	cp	r25, r24
 172:	a9 f0       	breq	.+42     	; 0x19e <main+0x5a>
 174:	0e 94 91 00 	call	0x122	; 0x122 <getChar>
 178:	e1 e0       	ldi	r30, 0x01	; 1
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	e0 0f       	add	r30, r16
 182:	f1 1f       	adc	r31, r17
 184:	80 83       	st	Z, r24
 186:	0f 5f       	subi	r16, 0xFF	; 255
 188:	1f 4f       	sbci	r17, 0xFF	; 255
 18a:	04 36       	cpi	r16, 0x64	; 100
 18c:	11 05       	cpc	r17, r1
 18e:	39 f4       	brne	.+14     	; 0x19e <main+0x5a>
 190:	64 e6       	ldi	r22, 0x64	; 100
 192:	ce 01       	movw	r24, r28
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	0e 94 61 00 	call	0xc2	; 0xc2 <TX0Write>
 19a:	00 e0       	ldi	r16, 0x00	; 0
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	83 ec       	ldi	r24, 0xC3	; 195
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x5e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x64>
 1a8:	00 00       	nop
 1aa:	de cf       	rjmp	.-68     	; 0x168 <main+0x24>

000001ac <__vector_20>:
		//... Add code 
	}
}

// Interrupt for transmitting UART data to TX 0 (to HUMPRO)
ISR(USART_TX_vect){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	UDR0 = ']';
 1bc:	8d e5       	ldi	r24, 0x5D	; 93
 1be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	if (tx0ReadPos != tx0WritePos){
 1c2:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <tx0ReadPos>
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ca:	e8 17       	cp	r30, r24
 1cc:	59 f0       	breq	.+22     	; 0x1e4 <__vector_20+0x38>
		UDR0 = tx0Buffer[tx0ReadPos];
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ec 5f       	subi	r30, 0xFC	; 252
 1d2:	fd 4f       	sbci	r31, 0xFD	; 253
 1d4:	80 81       	ld	r24, Z
 1d6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		tx0ReadPos ++;
 1da:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tx0ReadPos>
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tx0ReadPos>
		if (tx0ReadPos >= TX_BUFFER_SIZE){
			
			tx0ReadPos++;
		}
	}
}
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_18>:

// Interrupt for receiving UART data from RX 0 
ISR(USART_RX_vect){
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	
	rx0Buffer[rx0WritePos] = UDR0;
 206:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rx0WritePos>
 20a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 20e:	e8 2f       	mov	r30, r24
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ec 5f       	subi	r30, 0xFC	; 252
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	90 83       	st	Z, r25
	rx0WritePos++;
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rx0WritePos>
	{
		rx0WritePos = 0;
	}
	
	
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
