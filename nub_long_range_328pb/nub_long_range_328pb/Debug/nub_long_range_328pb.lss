
nub_long_range_328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  00800106  00800106  00000472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002540  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcd  00000000  00000000  00002b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebd  00000000  00000000  00003b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  000049c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000931  00000000  00000000  00004d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000154b  00000000  00000000  000056c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00006c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_28>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ed       	ldi	r30, 0xD8	; 216
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 30       	cpi	r26, 0x06	; 6
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	23 e0       	ldi	r18, 0x03	; 3
  d8:	a6 e0       	ldi	r26, 0x06	; 6
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 34 01 	call	0x268	; 0x268 <main>
  ea:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TXWrite>:
	else{
		return &rx0Buffer[rx0ReadPos + movePtr];
	}
	
	
}
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	66 23       	and	r22, r22
 100:	31 f1       	breq	.+76     	; 0x14e <TXWrite+0x5c>
 102:	61 50       	subi	r22, 0x01	; 1
 104:	e8 2e       	mov	r14, r24
 106:	f9 2e       	mov	r15, r25
 108:	a8 ec       	ldi	r26, 0xC8	; 200
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	0e ec       	ldi	r16, 0xCE	; 206
 10e:	10 e0       	ldi	r17, 0x00	; 0
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	26 ec       	ldi	r18, 0xC6	; 198
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	01 c0       	rjmp	.+2      	; 0x11c <TXWrite+0x2a>
 11a:	68 2f       	mov	r22, r24
 11c:	41 15       	cp	r20, r1
 11e:	51 05       	cpc	r21, r1
 120:	41 f4       	brne	.+16     	; 0x132 <TXWrite+0x40>
 122:	80 81       	ld	r24, Z
 124:	85 ff       	sbrs	r24, 5
 126:	fd cf       	rjmp	.-6      	; 0x122 <TXWrite+0x30>
 128:	e7 01       	movw	r28, r14
 12a:	88 81       	ld	r24, Y
 12c:	e9 01       	movw	r28, r18
 12e:	88 83       	st	Y, r24
 130:	07 c0       	rjmp	.+14     	; 0x140 <TXWrite+0x4e>
 132:	8c 91       	ld	r24, X
 134:	85 ff       	sbrs	r24, 5
 136:	fd cf       	rjmp	.-6      	; 0x132 <TXWrite+0x40>
 138:	e7 01       	movw	r28, r14
 13a:	88 81       	ld	r24, Y
 13c:	e8 01       	movw	r28, r16
 13e:	88 83       	st	Y, r24
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	86 0f       	add	r24, r22
 144:	df ef       	ldi	r29, 0xFF	; 255
 146:	ed 1a       	sub	r14, r29
 148:	fd 0a       	sbc	r15, r29
 14a:	61 11       	cpse	r22, r1
 14c:	e6 cf       	rjmp	.-52     	; 0x11a <TXWrite+0x28>
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	08 95       	ret

0000015c <getChar>:
 15c:	81 11       	cpse	r24, r1
 15e:	19 c0       	rjmp	.+50     	; 0x192 <getChar+0x36>
 160:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rx0ReadPos>
 164:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rx0WritePos>
 168:	98 17       	cp	r25, r24
 16a:	61 f1       	breq	.+88     	; 0x1c4 <getChar+0x68>
 16c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <unread0Bytes>
 170:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <unread0Bytes+0x1>
 174:	21 50       	subi	r18, 0x01	; 1
 176:	31 09       	sbc	r19, r1
 178:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <unread0Bytes+0x1>
 17c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <unread0Bytes>
 180:	e9 2f       	mov	r30, r25
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e2 5f       	subi	r30, 0xF2	; 242
 186:	fd 4f       	sbci	r31, 0xFD	; 253
 188:	80 81       	ld	r24, Z
 18a:	9f 5f       	subi	r25, 0xFF	; 255
 18c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <rx0ReadPos>
 190:	08 95       	ret
 192:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <rx1ReadPos>
 196:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx1WritePos>
 19a:	98 17       	cp	r25, r24
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <getChar+0x6c>
 19e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 1a2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	31 09       	sbc	r19, r1
 1aa:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 1ae:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 1b2:	e9 2f       	mov	r30, r25
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	e2 5f       	subi	r30, 0xF2	; 242
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	80 81       	ld	r24, Z
 1bc:	9f 5f       	subi	r25, 0xFF	; 255
 1be:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <rx1ReadPos>
 1c2:	08 95       	ret
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret

000001cc <__vector_18>:

// Interrupt for receiving UART data from RX 0
ISR(USART0_RX_vect){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	unread0Bytes++;
 1de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <unread0Bytes>
 1e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <unread0Bytes+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <unread0Bytes+0x1>
 1ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <unread0Bytes>
	rx0Buffer[rx0WritePos] = UDR0;
 1f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rx0WritePos>
 1f4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1f8:	e8 2f       	mov	r30, r24
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e2 5f       	subi	r30, 0xF2	; 242
 1fe:	fd 4f       	sbci	r31, 0xFD	; 253
 200:	90 83       	st	Z, r25
	rx0WritePos++;
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx0WritePos>
	{
		rx0WritePos = 0;
	}
	
	
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_28>:

ISR(USART1_RX_vect){
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	unread1Bytes++;
 22c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 230:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 23a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	rx1Buffer[rx1WritePos] = UDR1;
 23e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx1WritePos>
 242:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
 246:	e8 2f       	mov	r30, r24
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	e2 5f       	subi	r30, 0xF2	; 242
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	90 83       	st	Z, r25
	rx1WritePos++;
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rx1WritePos>
	{
		rx1WritePos = 0;
	}
	
	
}
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <main>:
};



int main(void)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	c5 5b       	subi	r28, 0xB5	; 181
 272:	d1 09       	sbc	r29, r1
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
	unsigned char var[] = "hello\n";
	DDRE |= (1 << DDE1);
 27e:	69 9a       	sbi	0x0d, 1	; 13
	PORTE |= (1 << LED);
 280:	71 9a       	sbi	0x0e, 1	; 14
	USART_setup(MYUBRR);
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USART_setup>
	sei();		// Enabling interrupts 
 28a:	78 94       	sei
	PORTE |= (1 << LED);
 28c:	71 9a       	sbi	0x0e, 1	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	87 ea       	ldi	r24, 0xA7	; 167
 290:	91 e6       	ldi	r25, 0x61	; 97
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <main+0x2a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x30>
 298:	00 00       	nop
    while (1) 
		
    {	
		//TXWrite(var,6,0);
		//TXWrite(networkptr,sizeof(network),0);
		broadcastCon(0x01,myDSN,networkptr,sizeof(network));
 29a:	60 91 0e 03 	lds	r22, 0x030E	; 0x80030e <myDSN>
 29e:	70 91 0f 03 	lds	r23, 0x030F	; 0x80030f <myDSN+0x1>
 2a2:	25 eb       	ldi	r18, 0xB5	; 181
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	ae 01       	movw	r20, r28
 2a8:	4f 5f       	subi	r20, 0xFF	; 255
 2aa:	5f 4f       	sbci	r21, 0xFF	; 255
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 63 01 	call	0x2c6	; 0x2c6 <broadcastCon>
 2b2:	9f e3       	ldi	r25, 0x3F	; 63
 2b4:	22 e4       	ldi	r18, 0x42	; 66
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	91 50       	subi	r25, 0x01	; 1
 2ba:	20 40       	sbci	r18, 0x00	; 0
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x50>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x5a>
 2c2:	00 00       	nop
 2c4:	ea cf       	rjmp	.-44     	; 0x29a <main+0x32>

000002c6 <broadcastCon>:
	
}


// Initial broadcast to connect to other devices
void broadcastCon(uint8_t txPWR,uint8_t srcDSN[], uint8_t *networkPtr, uint16_t networkPtrSize){
 2c6:	df 92       	push	r13
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	2e 97       	sbiw	r28, 0x0e	; 14
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	8b 01       	movw	r16, r22
 2e6:	7a 01       	movw	r14, r20
 2e8:	d2 2e       	mov	r13, r18
	PORTD &= ~(1 << CMD);	// cmd mode
 2ea:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t TXPower[4]	= {0xFF,0x02,0x02,txPWR};
 2ec:	9f ef       	ldi	r25, 0xFF	; 255
 2ee:	99 83       	std	Y+1, r25	; 0x01
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	9b 83       	std	Y+3, r25	; 0x03
 2f6:	8c 83       	std	Y+4, r24	; 0x04
	TXWrite(TXPower,4,0);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	ce 01       	movw	r24, r28
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	getChar(0);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	
	uint8_t destDSNCMD[] = {0xFF,0x03,0x68,0xFE,0x7F};		// Putting broadcast address
 30c:	85 e0       	ldi	r24, 0x05	; 5
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	de 01       	movw	r26, r28
 314:	15 96       	adiw	r26, 0x05	; 5
 316:	01 90       	ld	r0, Z+
 318:	0d 92       	st	X+, r0
 31a:	8a 95       	dec	r24
 31c:	e1 f7       	brne	.-8      	; 0x316 <broadcastCon+0x50>
	
	uint8_t msgType = 0x03;			// Connection broadcast
	uint8_t msgHeader[] = {msgType,srcDSN[0],srcDSN[1],srcDSN[2],srcDSN[3]};
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	8a 87       	std	Y+10, r24	; 0x0a
 322:	f8 01       	movw	r30, r16
 324:	80 81       	ld	r24, Z
 326:	8b 87       	std	Y+11, r24	; 0x0b
 328:	81 81       	ldd	r24, Z+1	; 0x01
 32a:	8c 87       	std	Y+12, r24	; 0x0c
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	8d 87       	std	Y+13, r24	; 0x0d
 330:	83 81       	ldd	r24, Z+3	; 0x03
 332:	8e 87       	std	Y+14, r24	; 0x0e
 334:	14 e0       	ldi	r17, 0x04	; 4
	
	
	for (uint8_t i = 0; i < 4; i++){
		TXWrite(destDSNCMD,5,0);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	65 e0       	ldi	r22, 0x05	; 5
 33c:	ce 01       	movw	r24, r28
 33e:	05 96       	adiw	r24, 0x05	; 5
 340:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
		getChar(0);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		destDSNCMD[2] = destDSNCMD[2] + 0x01;
 34a:	8f 81       	ldd	r24, Y+7	; 0x07
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	8f 83       	std	Y+7, r24	; 0x07
 350:	11 50       	subi	r17, 0x01	; 1
	
	uint8_t msgType = 0x03;			// Connection broadcast
	uint8_t msgHeader[] = {msgType,srcDSN[0],srcDSN[1],srcDSN[2],srcDSN[3]};
	
	
	for (uint8_t i = 0; i < 4; i++){
 352:	89 f7       	brne	.-30     	; 0x336 <broadcastCon+0x70>
 354:	83 ec       	ldi	r24, 0xC3	; 195
 356:	99 e0       	ldi	r25, 0x09	; 9
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <broadcastCon+0x92>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <broadcastCon+0x98>
 35e:	00 00       	nop
		getChar(0);
		destDSNCMD[2] = destDSNCMD[2] + 0x01;
	}
	
	_delay_ms(10);
	PORTD |= (1 << CMD);		// Transmission mode
 360:	5d 9a       	sbi	0x0b, 5	; 11
 362:	e3 ec       	ldi	r30, 0xC3	; 195
 364:	f9 e0       	ldi	r31, 0x09	; 9
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <broadcastCon+0xa0>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <broadcastCon+0xa6>
 36c:	00 00       	nop
	_delay_ms(10);
	
	TXWrite(msgHeader,5,0);
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	65 e0       	ldi	r22, 0x05	; 5
 374:	ce 01       	movw	r24, r28
 376:	0a 96       	adiw	r24, 0x0a	; 10
 378:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	TXWrite(networkPtr,networkPtrSize,0);	 // Sending connected devices structure
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	6d 2d       	mov	r22, r13
 382:	c7 01       	movw	r24, r14
 384:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	
	
}
 388:	2e 96       	adiw	r28, 0x0e	; 14
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	08 95       	ret

000003a4 <USART_setup>:

// Setting up USART for communication between HUMPRO900 module and the MCU
void USART_setup(unsigned int ubrr){
	
	// UART 0
	UBRR0H = (unsigned char)(ubrr>>8);			// Setting baud rate
 3a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
 3a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A = (1<<UDRE0)|(1<<U2X0);
 3ac:	42 e2       	ldi	r20, 0x22	; 34
 3ae:	40 93 c0 00 	sts	0x00C0, r20	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0)|(1<<TXEN0);				// Enabling Tx & Rx
 3b2:	38 e9       	ldi	r19, 0x98	; 152
 3b4:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
 3b8:	2e e0       	ldi	r18, 0x0E	; 14
 3ba:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// UART 1
	UBRR1H = (unsigned char)(ubrr>>8);			// Setting baud rate
 3be:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = (unsigned char)ubrr;
 3c2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1A = (1<<UDRE1)|(1<<U2X0);
 3c6:	40 93 c8 00 	sts	0x00C8, r20	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
	UCSR1B = (1<<RXEN1)|(1<<RXCIE1)|(1<<TXEN1);				// Enabling Tx & Rx
 3ca:	30 93 c9 00 	sts	0x00C9, r19	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	UCSR1C = (1<<USBS1)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
 3ce:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
