
nub_long_range_328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001f58  00001fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  0080010c  0080010c  00001ff8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000372b  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cc  00000000  00000000  000058db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001773  00000000  00000000  000069a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  0000811c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aaf  00000000  00000000  00008640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003187  00000000  00000000  000090ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  0000c276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_28>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e8 e5       	ldi	r30, 0x58	; 88
      c8:	ff e1       	ldi	r31, 0x1F	; 31
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 30       	cpi	r26, 0x0C	; 12
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	ac e0       	ldi	r26, 0x0C	; 12
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a6 31       	cpi	r26, 0x16	; 22
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 38 01 	call	0x270	; 0x270 <main>
      ea:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TXWrite>:
		return 1;
	}
	else{
		return 0;
	}
}
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	66 23       	and	r22, r22
     100:	31 f1       	breq	.+76     	; 0x14e <TXWrite+0x5c>
     102:	61 50       	subi	r22, 0x01	; 1
     104:	e8 2e       	mov	r14, r24
     106:	f9 2e       	mov	r15, r25
     108:	a8 ec       	ldi	r26, 0xC8	; 200
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	0e ec       	ldi	r16, 0xCE	; 206
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	e0 ec       	ldi	r30, 0xC0	; 192
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	26 ec       	ldi	r18, 0xC6	; 198
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	01 c0       	rjmp	.+2      	; 0x11c <TXWrite+0x2a>
     11a:	68 2f       	mov	r22, r24
     11c:	41 15       	cp	r20, r1
     11e:	51 05       	cpc	r21, r1
     120:	41 f4       	brne	.+16     	; 0x132 <TXWrite+0x40>
     122:	80 81       	ld	r24, Z
     124:	85 ff       	sbrs	r24, 5
     126:	fd cf       	rjmp	.-6      	; 0x122 <TXWrite+0x30>
     128:	e7 01       	movw	r28, r14
     12a:	88 81       	ld	r24, Y
     12c:	e9 01       	movw	r28, r18
     12e:	88 83       	st	Y, r24
     130:	07 c0       	rjmp	.+14     	; 0x140 <TXWrite+0x4e>
     132:	8c 91       	ld	r24, X
     134:	85 ff       	sbrs	r24, 5
     136:	fd cf       	rjmp	.-6      	; 0x132 <TXWrite+0x40>
     138:	e7 01       	movw	r28, r14
     13a:	88 81       	ld	r24, Y
     13c:	e8 01       	movw	r28, r16
     13e:	88 83       	st	Y, r24
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	86 0f       	add	r24, r22
     144:	df ef       	ldi	r29, 0xFF	; 255
     146:	ed 1a       	sub	r14, r29
     148:	fd 0a       	sbc	r15, r29
     14a:	61 11       	cpse	r22, r1
     14c:	e6 cf       	rjmp	.-52     	; 0x11a <TXWrite+0x28>
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <getChar>:
     15c:	81 11       	cpse	r24, r1
     15e:	14 c0       	rjmp	.+40     	; 0x188 <getChar+0x2c>
     160:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx0ReadPos>
     164:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
     168:	98 17       	cp	r25, r24
     16a:	11 f1       	breq	.+68     	; 0x1b0 <getChar+0x54>
     16c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <unread0Bytes>
     170:	81 50       	subi	r24, 0x01	; 1
     172:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <unread0Bytes>
     176:	e9 2f       	mov	r30, r25
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	ee 5e       	subi	r30, 0xEE	; 238
     17c:	fd 4f       	sbci	r31, 0xFD	; 253
     17e:	80 81       	ld	r24, Z
     180:	9f 5f       	subi	r25, 0xFF	; 255
     182:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rx0ReadPos>
     186:	08 95       	ret
     188:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <rx1ReadPos>
     18c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx1WritePos>
     190:	98 17       	cp	r25, r24
     192:	81 f0       	breq	.+32     	; 0x1b4 <getChar+0x58>
     194:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     19e:	e9 2f       	mov	r30, r25
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	ee 5e       	subi	r30, 0xEE	; 238
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 81       	ld	r24, Z
     1a8:	9f 5f       	subi	r25, 0xFF	; 255
     1aa:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <rx1ReadPos>
     1ae:	08 95       	ret
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	08 95       	ret
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	08 95       	ret

000001b8 <skipBuffer>:
     1b8:	81 11       	cpse	r24, r1
     1ba:	07 c0       	rjmp	.+14     	; 0x1ca <skipBuffer+0x12>
     1bc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <unread0Bytes>
     1c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
     1c4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx0ReadPos>
     1c8:	08 95       	ret
     1ca:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     1ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx1WritePos>
     1d2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rx1ReadPos>
     1d6:	08 95       	ret

000001d8 <Bytes0UnRead>:
     1d8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <unread0Bytes>
     1dc:	08 95       	ret

000001de <Bytes1UnRead>:
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     1e2:	08 95       	ret

000001e4 <__vector_18>:




// Interrupt for receiving UART data from RX 0
ISR(USART0_RX_vect){
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	8f 93       	push	r24
     1f0:	9f 93       	push	r25
     1f2:	ef 93       	push	r30
     1f4:	ff 93       	push	r31
	unread0Bytes++;
     1f6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <unread0Bytes>
     1fa:	8f 5f       	subi	r24, 0xFF	; 255
     1fc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <unread0Bytes>
	rx0Buffer[rx0WritePos] = UDR0;
     200:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
     204:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     208:	e8 2f       	mov	r30, r24
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ee 5e       	subi	r30, 0xEE	; 238
     20e:	fd 4f       	sbci	r31, 0xFD	; 253
     210:	90 83       	st	Z, r25
	rx0WritePos++;
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx0WritePos>
	{
		rx0WritePos = 0;
	}
	
	
}
     218:	ff 91       	pop	r31
     21a:	ef 91       	pop	r30
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_28>:

ISR(USART1_RX_vect){
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	ef 93       	push	r30
     23a:	ff 93       	push	r31
	unread1Bytes++;
     23c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     240:	8f 5f       	subi	r24, 0xFF	; 255
     242:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	rx1Buffer[rx1WritePos] = UDR1;
     246:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx1WritePos>
     24a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 5e       	subi	r30, 0xEE	; 238
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	90 83       	st	Z, r25
	rx1WritePos++;
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rx1WritePos>
	
	if(rx1WritePos >= RX1_BUFFER_SIZE)
	{
		rx1WritePos = 0;
	}
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	9f 91       	pop	r25
     264:	8f 91       	pop	r24
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <main>:
};



int main(void)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	c9 5d       	subi	r28, 0xD9	; 217
     27a:	d1 09       	sbc	r29, r1
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
	
	DDRE |= (1 << DDE1);
     286:	69 9a       	sbi	0x0d, 1	; 13
	PORTE |= (1 << LED);
     288:	71 9a       	sbi	0x0e, 1	; 14
	USART_setup(MYUBRR);
     28a:	8c e0       	ldi	r24, 0x0C	; 12
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <USART_setup>
	sei();		// Enabling interrupts 
     292:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	87 ea       	ldi	r24, 0xA7	; 167
     296:	91 e6       	ldi	r25, 0x61	; 97
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x28>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x2e>
     29e:	00 00       	nop
	uint8_t *networkPtr2 = &network;
	struct myConData *myConsptr, myCons;
	myConsptr = &myCons;
	uint16_t networkSize = sizeof(network);
	
	myDSN = setupTransceiver();
     2a0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <setupTransceiver>
     2a4:	fe 01       	movw	r30, r28
     2a6:	31 96       	adiw	r30, 0x01	; 1
     2a8:	9e 01       	movw	r18, r28
     2aa:	2a 54       	subi	r18, 0x4A	; 74
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
	
	
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
     2ae:	11 92       	st	Z+, r1
	myDSN = setupTransceiver();
	
	
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
     2b0:	e2 17       	cp	r30, r18
     2b2:	f3 07       	cpc	r31, r19
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x3e>
     2b6:	9e 01       	movw	r18, r28
     2b8:	2a 54       	subi	r18, 0x4A	; 74
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	68 2f       	mov	r22, r24
     2be:	79 2f       	mov	r23, r25
     2c0:	de 01       	movw	r26, r28
     2c2:	12 96       	adiw	r26, 0x02	; 2
     2c4:	ce 01       	movw	r24, r28
     2c6:	06 96       	adiw	r24, 0x06	; 6
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	// Mostly test stuff ////////////////////////////////////////////////
	for(int i = 0; i < 4; i++){
		myCons.myDSN[i] = myDSN[i];
     2c8:	fb 01       	movw	r30, r22
     2ca:	40 81       	ld	r20, Z
     2cc:	f9 01       	movw	r30, r18
     2ce:	41 93       	st	Z+, r20
     2d0:	9f 01       	movw	r18, r30
		network.device[0].deviceDSN[i] = myDSN[i];
     2d2:	fb 01       	movw	r30, r22
     2d4:	41 91       	ld	r20, Z+
     2d6:	bf 01       	movw	r22, r30
     2d8:	4d 93       	st	X+, r20
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	// Mostly test stuff ////////////////////////////////////////////////
	for(int i = 0; i < 4; i++){
     2da:	a8 17       	cp	r26, r24
     2dc:	b9 07       	cpc	r27, r25
     2de:	a1 f7       	brne	.-24     	; 0x2c8 <main+0x58>
     2e0:	e6 eb       	ldi	r30, 0xB6	; 182
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	72 96       	adiw	r30, 0x12	; 18
     2ea:	de 01       	movw	r26, r28
     2ec:	54 96       	adiw	r26, 0x14	; 20
     2ee:	86 eb       	ldi	r24, 0xB6	; 182
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	8c 0f       	add	r24, r28
     2f4:	9d 1f       	adc	r25, r29
     2f6:	48 96       	adiw	r24, 0x18	; 24
		//network.device[2].nubConnections[0][i] = network.device[1].deviceDSN[i];
		
	}
	
	for(int i = 0; i <6; i++){
		myCons.myPhoneConnections[0][i] = 0x11;
     2f8:	21 e1       	ldi	r18, 0x11	; 17
     2fa:	21 93       	st	Z+, r18
		network.device[0].phoneConnections[0][i] = myCons.myPhoneConnections[0][i];
     2fc:	2d 93       	st	X+, r18
		
		//network.device[2].nubConnections[0][i] = network.device[1].deviceDSN[i];
		
	}
	
	for(int i = 0; i <6; i++){
     2fe:	e8 17       	cp	r30, r24
     300:	f9 07       	cpc	r31, r25
     302:	d9 f7       	brne	.-10     	; 0x2fa <main+0x8a>
		//network.device[1].phoneConnections[0][i] = 0x33;
		//network.device[2].phoneConnections[0][i] = 0x44;
	}
	
	
	myConsptr->myNumOfNubCon = 0;
     304:	c6 54       	subi	r28, 0x46	; 70
     306:	df 4f       	sbci	r29, 0xFF	; 255
     308:	18 82       	st	Y, r1
     30a:	ca 5b       	subi	r28, 0xBA	; 186
     30c:	d0 40       	sbci	r29, 0x00	; 0
	myCons.myNumOfPhoneCon = 1;
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	c5 54       	subi	r28, 0x45	; 69
     312:	df 4f       	sbci	r29, 0xFF	; 255
     314:	88 83       	st	Y, r24
     316:	cb 5b       	subi	r28, 0xBB	; 187
     318:	d0 40       	sbci	r29, 0x00	; 0
	network.numOfDevices = 1;
     31a:	89 83       	std	Y+1, r24	; 0x01
	network.device[0].numOfNubCon = myCons.myNumOfNubCon;	
     31c:	1e 82       	std	Y+6, r1	; 0x06
	network.device[0].numOfPhoneCon = myCons.myNumOfPhoneCon;	
     31e:	8f 83       	std	Y+7, r24	; 0x07
	//network.device[2].numOfPhoneCon = 1;
	uint8_t output = 0;
	//////////////////////////////////////////////////////////////////
	
	uint8_t firstCon = 1;
	skipBuffer(0);
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
	
	uint8_t i = 0;
     326:	f1 2c       	mov	r15, r1
	//network.device[1].numOfPhoneCon = 1;
	//network.device[2].numOfPhoneCon = 1;
	uint8_t output = 0;
	//////////////////////////////////////////////////////////////////
	
	uint8_t firstCon = 1;
     328:	ee 24       	eor	r14, r14
     32a:	e3 94       	inc	r14
				
		
		//TXWrite(var,6,0);
		//TXWrite(networkPtr,sizeof(network),0);
		
		if (firstCon == 1){
     32c:	f1 e0       	ldi	r31, 0x01	; 1
     32e:	ef 12       	cpse	r14, r31
     330:	0f c0       	rjmp	.+30     	; 0x350 <main+0xe0>
			
			broadcastCon(0x00,myConsptr);
     332:	be 01       	movw	r22, r28
     334:	6a 54       	subi	r22, 0x4A	; 74
     336:	7f 4f       	sbci	r23, 0xFF	; 255
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 34 04 	call	0x868	; 0x868 <broadcastCon>
     33e:	2f e5       	ldi	r18, 0x5F	; 95
     340:	83 ee       	ldi	r24, 0xE3	; 227
     342:	96 e1       	ldi	r25, 0x16	; 22
     344:	21 50       	subi	r18, 0x01	; 1
     346:	80 40       	sbci	r24, 0x00	; 0
     348:	90 40       	sbci	r25, 0x00	; 0
     34a:	e1 f7       	brne	.-8      	; 0x344 <main+0xd4>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0xde>
     34e:	00 00       	nop
		}
		
		//broadcastCon(0x01,networkPtr);
		//sendMessageSimple(myDSN,connectedDevices,var,6);
		uint8_t UARTPort = 1;
		if(Bytes0UnRead() > 0){
     350:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Bytes0UnRead>
     354:	88 23       	and	r24, r24
     356:	b1 f0       	breq	.+44     	; 0x384 <main+0x114>
			UARTPort = 0;
			
			output = handleMessages(UARTPort,networkPtr,networkSize,networkPtr2,myConsptr);
     358:	8e 01       	movw	r16, r28
     35a:	0a 54       	subi	r16, 0x4A	; 74
     35c:	1f 4f       	sbci	r17, 0xFF	; 255
     35e:	9e 01       	movw	r18, r28
     360:	2f 5f       	subi	r18, 0xFF	; 255
     362:	3f 4f       	sbci	r19, 0xFF	; 255
     364:	45 eb       	ldi	r20, 0xB5	; 181
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	b9 01       	movw	r22, r18
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 3a 08 	call	0x1074	; 0x1074 <handleMessages>
			if (output == 3 || output == 5){
     370:	83 30       	cpi	r24, 0x03	; 3
     372:	21 f0       	breq	.+8      	; 0x37c <main+0x10c>
     374:	85 30       	cpi	r24, 0x05	; 5
     376:	19 f4       	brne	.+6      	; 0x37e <main+0x10e>
				firstCon = 0;
     378:	e1 2c       	mov	r14, r1
     37a:	01 c0       	rjmp	.+2      	; 0x37e <main+0x10e>
     37c:	e1 2c       	mov	r14, r1
			}
			
			skipBuffer(0);
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
		}
		if(Bytes1UnRead() > 0){
     384:	0e 94 ef 00 	call	0x1de	; 0x1de <Bytes1UnRead>
     388:	88 23       	and	r24, r24
     38a:	b1 f0       	breq	.+44     	; 0x3b8 <main+0x148>
			UARTPort = 1;
			handleMessages(UARTPort,networkPtr,networkSize,networkPtr2,myConsptr);
     38c:	8e 01       	movw	r16, r28
     38e:	0a 54       	subi	r16, 0x4A	; 74
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	9e 01       	movw	r18, r28
     394:	2f 5f       	subi	r18, 0xFF	; 255
     396:	3f 4f       	sbci	r19, 0xFF	; 255
     398:	45 eb       	ldi	r20, 0xB5	; 181
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	b9 01       	movw	r22, r18
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 3a 08 	call	0x1074	; 0x1074 <handleMessages>
			skipBuffer(1);
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
			TXWrite(networkPtr,networkSize,1);
     3aa:	41 e0       	ldi	r20, 0x01	; 1
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	65 eb       	ldi	r22, 0xB5	; 181
     3b0:	ce 01       	movw	r24, r28
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
		
		
		//checkReg();
		//test();
		//TXWrite("Hello",5,1);
		i++;
     3b8:	f3 94       	inc	r15
		if (i > 100){
     3ba:	e4 e6       	ldi	r30, 0x64	; 100
     3bc:	ef 15       	cp	r30, r15
     3be:	40 f4       	brcc	.+16     	; 0x3d0 <main+0x160>
			
			TXWrite(networkPtr,sizeof(network),1);
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	65 eb       	ldi	r22, 0xB5	; 181
     3c6:	ce 01       	movw	r24, r28
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			i = 0;
     3ce:	f1 2c       	mov	r15, r1
     3d0:	87 ea       	ldi	r24, 0xA7	; 167
     3d2:	91 e6       	ldi	r25, 0x61	; 97
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x164>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x16a>
     3da:	00 00       	nop
     3dc:	a7 cf       	rjmp	.-178    	; 0x32c <main+0xbc>

000003de <getDestPhoneAdd>:
		}
	}
	// Device not found 
	return -1;
	
}
     3de:	6f 92       	push	r6
     3e0:	7f 92       	push	r7
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	8c 01       	movw	r16, r24
     3fc:	ea 01       	movw	r28, r20
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <malloc>
     406:	68 80       	ld	r6, Y
     408:	66 20       	and	r6, r6
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	46 c0       	rjmp	.+140    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     40e:	6e 01       	movw	r12, r28
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	b8 01       	movw	r22, r16
     416:	6a 5f       	subi	r22, 0xFA	; 250
     418:	7f 4f       	sbci	r23, 0xFF	; 255
     41a:	32 c0       	rjmp	.+100    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     41c:	a1 90       	ld	r10, Z+
     41e:	bd 90       	ld	r11, X+
     420:	ab 10       	cpse	r10, r11
     422:	16 c0       	rjmp	.+44     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     424:	e6 17       	cp	r30, r22
     426:	f7 07       	cpc	r31, r23
     428:	c9 f7       	brne	.-14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     42a:	24 e2       	ldi	r18, 0x24	; 36
     42c:	2e 9d       	mul	r18, r14
     42e:	d0 01       	movw	r26, r0
     430:	2f 9d       	mul	r18, r15
     432:	b0 0d       	add	r27, r0
     434:	11 24       	eor	r1, r1
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	ac 0f       	add	r26, r28
     43a:	bd 1f       	adc	r27, r29
     43c:	fc 01       	movw	r30, r24
     43e:	ac 01       	movw	r20, r24
     440:	4c 5f       	subi	r20, 0xFC	; 252
     442:	5f 4f       	sbci	r21, 0xFF	; 255
     444:	2d 91       	ld	r18, X+
     446:	21 93       	st	Z+, r18
     448:	4e 17       	cp	r20, r30
     44a:	5f 07       	cpc	r21, r31
     44c:	d9 f7       	brne	.-10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     44e:	29 c0       	rjmp	.+82     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     450:	93 94       	inc	r9
     452:	2a 5f       	subi	r18, 0xFA	; 250
     454:	3f 4f       	sbci	r19, 0xFF	; 255
     456:	4a 5f       	subi	r20, 0xFA	; 250
     458:	5f 4f       	sbci	r21, 0xFF	; 255
     45a:	98 14       	cp	r9, r8
     45c:	49 f0       	breq	.+18     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     45e:	d9 01       	movw	r26, r18
     460:	53 96       	adiw	r26, 0x13	; 19
     462:	ec 91       	ld	r30, X
     464:	7e 12       	cpse	r7, r30
     466:	f4 cf       	rjmp	.-24     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     468:	f8 01       	movw	r30, r16
     46a:	31 96       	adiw	r30, 0x01	; 1
     46c:	da 01       	movw	r26, r20
     46e:	d6 cf       	rjmp	.-84     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     470:	bf ef       	ldi	r27, 0xFF	; 255
     472:	eb 1a       	sub	r14, r27
     474:	fb 0a       	sbc	r15, r27
     476:	e4 e2       	ldi	r30, 0x24	; 36
     478:	ce 0e       	add	r12, r30
     47a:	d1 1c       	adc	r13, r1
     47c:	e6 14       	cp	r14, r6
     47e:	68 f4       	brcc	.+26     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     480:	d6 01       	movw	r26, r12
     482:	16 96       	adiw	r26, 0x06	; 6
     484:	8c 90       	ld	r8, X
     486:	88 20       	and	r8, r8
     488:	99 f3       	breq	.-26     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     48a:	f8 01       	movw	r30, r16
     48c:	70 80       	ld	r7, Z
     48e:	a6 01       	movw	r20, r12
     490:	4c 5e       	subi	r20, 0xEC	; 236
     492:	5f 4f       	sbci	r21, 0xFF	; 255
     494:	96 01       	movw	r18, r12
     496:	91 2c       	mov	r9, r1
     498:	e2 cf       	rjmp	.-60     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	dc 01       	movw	r26, r24
     49e:	16 96       	adiw	r26, 0x06	; 6
     4a0:	2c 93       	st	X, r18
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	bf 90       	pop	r11
     4b4:	af 90       	pop	r10
     4b6:	9f 90       	pop	r9
     4b8:	8f 90       	pop	r8
     4ba:	7f 90       	pop	r7
     4bc:	6f 90       	pop	r6
     4be:	08 95       	ret

000004c0 <writeDestDSN>:
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <writeDestDSN+0xe>
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <writeDestDSN+0x10>
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	29 83       	std	Y+1, r18	; 0x01
     4d8:	32 e0       	ldi	r19, 0x02	; 2
     4da:	3a 83       	std	Y+2, r19	; 0x02
     4dc:	37 e6       	ldi	r19, 0x67	; 103
     4de:	3b 83       	std	Y+3, r19	; 0x03
     4e0:	2c 83       	std	Y+4, r18	; 0x04
     4e2:	5d 98       	cbi	0x0b, 5	; 11
     4e4:	8c 01       	movw	r16, r24
     4e6:	7c 01       	movw	r14, r24
     4e8:	24 e0       	ldi	r18, 0x04	; 4
     4ea:	e2 0e       	add	r14, r18
     4ec:	f1 1c       	adc	r15, r1
     4ee:	f8 01       	movw	r30, r16
     4f0:	81 91       	ld	r24, Z+
     4f2:	8f 01       	movw	r16, r30
     4f4:	8c 83       	std	Y+4, r24	; 0x04
     4f6:	9b 81       	ldd	r25, Y+3	; 0x03
     4f8:	9f 5f       	subi	r25, 0xFF	; 255
     4fa:	9b 83       	std	Y+3, r25	; 0x03
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	64 e0       	ldi	r22, 0x04	; 4
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     50a:	0e 15       	cp	r16, r14
     50c:	1f 05       	cpc	r17, r15
     50e:	79 f7       	brne	.-34     	; 0x4ee <writeDestDSN+0x2e>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
     516:	83 ec       	ldi	r24, 0xC3	; 195
     518:	99 e0       	ldi	r25, 0x09	; 9
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <writeDestDSN+0x5a>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <writeDestDSN+0x60>
     520:	00 00       	nop
     522:	5d 9a       	sbi	0x0b, 5	; 11
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	08 95       	ret

0000053a <buildMsgPath>:
     53a:	2f 92       	push	r2
     53c:	3f 92       	push	r3
     53e:	4f 92       	push	r4
     540:	5f 92       	push	r5
     542:	6f 92       	push	r6
     544:	7f 92       	push	r7
     546:	8f 92       	push	r8
     548:	9f 92       	push	r9
     54a:	af 92       	push	r10
     54c:	bf 92       	push	r11
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <buildMsgPath+0x26>
     560:	00 d0       	rcall	.+0      	; 0x562 <buildMsgPath+0x28>
     562:	1f 92       	push	r1
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	7c 01       	movw	r14, r24
     56a:	7a 83       	std	Y+2, r23	; 0x02
     56c:	69 83       	std	Y+1, r22	; 0x01
     56e:	8a 01       	movw	r16, r20
     570:	8d e0       	ldi	r24, 0x0D	; 13
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <malloc>
     578:	1c 01       	movw	r2, r24
     57a:	d8 01       	movw	r26, r16
     57c:	14 96       	adiw	r26, 0x04	; 4
     57e:	5c 91       	ld	r21, X
     580:	55 23       	and	r21, r21
     582:	51 f1       	breq	.+84     	; 0x5d8 <buildMsgPath+0x9e>
     584:	f7 01       	movw	r30, r14
     586:	60 81       	ld	r22, Z
     588:	98 01       	movw	r18, r16
     58a:	f8 01       	movw	r30, r16
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	dd 24       	eor	r13, r13
     592:	d3 94       	inc	r13
     594:	89 80       	ldd	r8, Y+1	; 0x01
     596:	9a 80       	ldd	r9, Y+2	; 0x02
     598:	05 c0       	rjmp	.+10     	; 0x5a4 <buildMsgPath+0x6a>
     59a:	7d 2d       	mov	r23, r13
     59c:	8f 5f       	subi	r24, 0xFF	; 255
     59e:	34 96       	adiw	r30, 0x04	; 4
     5a0:	85 17       	cp	r24, r21
     5a2:	b1 f0       	breq	.+44     	; 0x5d0 <buildMsgPath+0x96>
     5a4:	96 81       	ldd	r25, Z+6	; 0x06
     5a6:	96 13       	cpse	r25, r22
     5a8:	f9 cf       	rjmp	.-14     	; 0x59c <buildMsgPath+0x62>
     5aa:	d7 01       	movw	r26, r14
     5ac:	11 96       	adiw	r26, 0x01	; 1
     5ae:	4c 91       	ld	r20, X
     5b0:	11 97       	sbiw	r26, 0x01	; 1
     5b2:	97 81       	ldd	r25, Z+7	; 0x07
     5b4:	49 13       	cpse	r20, r25
     5b6:	f2 cf       	rjmp	.-28     	; 0x59c <buildMsgPath+0x62>
     5b8:	12 96       	adiw	r26, 0x02	; 2
     5ba:	4c 91       	ld	r20, X
     5bc:	12 97       	sbiw	r26, 0x02	; 2
     5be:	90 85       	ldd	r25, Z+8	; 0x08
     5c0:	49 13       	cpse	r20, r25
     5c2:	ec cf       	rjmp	.-40     	; 0x59c <buildMsgPath+0x62>
     5c4:	13 96       	adiw	r26, 0x03	; 3
     5c6:	4c 91       	ld	r20, X
     5c8:	91 85       	ldd	r25, Z+9	; 0x09
     5ca:	49 17       	cp	r20, r25
     5cc:	31 f3       	breq	.-52     	; 0x59a <buildMsgPath+0x60>
     5ce:	e6 cf       	rjmp	.-52     	; 0x59c <buildMsgPath+0x62>
     5d0:	9a 82       	std	Y+2, r9	; 0x02
     5d2:	89 82       	std	Y+1, r8	; 0x01
     5d4:	71 30       	cpi	r23, 0x01	; 1
     5d6:	a1 f0       	breq	.+40     	; 0x600 <buildMsgPath+0xc6>
     5d8:	e9 81       	ldd	r30, Y+1	; 0x01
     5da:	fa 81       	ldd	r31, Y+2	; 0x02
     5dc:	40 80       	ld	r4, Z
     5de:	44 20       	and	r4, r4
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <buildMsgPath+0xaa>
     5e2:	70 c0       	rjmp	.+224    	; 0x6c4 <buildMsgPath+0x18a>
     5e4:	5f 01       	movw	r10, r30
     5e6:	ff ef       	ldi	r31, 0xFF	; 255
     5e8:	af 1a       	sub	r10, r31
     5ea:	bf 0a       	sbc	r11, r31
     5ec:	51 2c       	mov	r5, r1
     5ee:	68 01       	movw	r12, r16
     5f0:	74 e0       	ldi	r23, 0x04	; 4
     5f2:	c7 0e       	add	r12, r23
     5f4:	d1 1c       	adc	r13, r1
     5f6:	3a 82       	std	Y+2, r3	; 0x02
     5f8:	29 82       	std	Y+1, r2	; 0x01
     5fa:	34 2c       	mov	r3, r4
     5fc:	45 2c       	mov	r4, r5
     5fe:	4f c0       	rjmp	.+158    	; 0x69e <buildMsgPath+0x164>
     600:	d1 01       	movw	r26, r2
     602:	0c 5f       	subi	r16, 0xFC	; 252
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	a7 01       	movw	r20, r14
     608:	f9 01       	movw	r30, r18
     60a:	81 91       	ld	r24, Z+
     60c:	9f 01       	movw	r18, r30
     60e:	8d 93       	st	X+, r24
     610:	fa 01       	movw	r30, r20
     612:	81 91       	ld	r24, Z+
     614:	af 01       	movw	r20, r30
     616:	13 96       	adiw	r26, 0x03	; 3
     618:	8c 93       	st	X, r24
     61a:	13 97       	sbiw	r26, 0x03	; 3
     61c:	20 17       	cp	r18, r16
     61e:	31 07       	cpc	r19, r17
     620:	99 f7       	brne	.-26     	; 0x608 <buildMsgPath+0xce>
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	d1 01       	movw	r26, r2
     626:	1c 96       	adiw	r26, 0x0c	; 12
     628:	8c 93       	st	X, r24
     62a:	4c c0       	rjmp	.+152    	; 0x6c4 <buildMsgPath+0x18a>
     62c:	ab 81       	ldd	r26, Y+3	; 0x03
     62e:	bc 81       	ldd	r27, Y+4	; 0x04
     630:	2d 90       	ld	r2, X+
     632:	bc 83       	std	Y+4, r27	; 0x04
     634:	ab 83       	std	Y+3, r26	; 0x03
     636:	d4 01       	movw	r26, r8
     638:	7d 91       	ld	r23, X+
     63a:	4d 01       	movw	r8, r26
     63c:	27 16       	cp	r2, r23
     63e:	19 f0       	breq	.+6      	; 0x646 <buildMsgPath+0x10c>
     640:	b0 81       	ld	r27, Z
     642:	2b 12       	cpse	r2, r27
     644:	07 c0       	rjmp	.+14     	; 0x654 <buildMsgPath+0x11a>
     646:	63 30       	cpi	r22, 0x03	; 3
     648:	08 f0       	brcs	.+2      	; 0x64c <buildMsgPath+0x112>
     64a:	63 94       	inc	r6
     64c:	6f 5f       	subi	r22, 0xFF	; 255
     64e:	31 96       	adiw	r30, 0x01	; 1
     650:	64 30       	cpi	r22, 0x04	; 4
     652:	61 f7       	brne	.-40     	; 0x62c <buildMsgPath+0xf2>
     654:	73 94       	inc	r7
     656:	04 96       	adiw	r24, 0x04	; 4
     658:	75 14       	cp	r7, r5
     65a:	59 f1       	breq	.+86     	; 0x6b2 <buildMsgPath+0x178>
     65c:	a7 01       	movw	r20, r14
     65e:	98 01       	movw	r18, r16
     660:	f8 01       	movw	r30, r16
     662:	47 01       	movw	r8, r14
     664:	9c 83       	std	Y+4, r25	; 0x04
     666:	8b 83       	std	Y+3, r24	; 0x03
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	e0 cf       	rjmp	.-64     	; 0x62c <buildMsgPath+0xf2>
     66c:	d9 01       	movw	r26, r18
     66e:	8d 91       	ld	r24, X+
     670:	9d 01       	movw	r18, r26
     672:	81 93       	st	Z+, r24
     674:	d4 01       	movw	r26, r8
     676:	8d 91       	ld	r24, X+
     678:	4d 01       	movw	r8, r26
     67a:	83 83       	std	Z+3, r24	; 0x03
     67c:	da 01       	movw	r26, r20
     67e:	8d 91       	ld	r24, X+
     680:	ad 01       	movw	r20, r26
     682:	87 83       	std	Z+7, r24	; 0x07
     684:	c2 16       	cp	r12, r18
     686:	d3 06       	cpc	r13, r19
     688:	89 f7       	brne	.-30     	; 0x66c <buildMsgPath+0x132>
     68a:	73 e0       	ldi	r23, 0x03	; 3
     68c:	e9 81       	ldd	r30, Y+1	; 0x01
     68e:	fa 81       	ldd	r31, Y+2	; 0x02
     690:	74 87       	std	Z+12, r23	; 0x0c
     692:	43 94       	inc	r4
     694:	84 e2       	ldi	r24, 0x24	; 36
     696:	a8 0e       	add	r10, r24
     698:	b1 1c       	adc	r11, r1
     69a:	43 14       	cp	r4, r3
     69c:	89 f0       	breq	.+34     	; 0x6c0 <buildMsgPath+0x186>
     69e:	d5 01       	movw	r26, r10
     6a0:	14 96       	adiw	r26, 0x04	; 4
     6a2:	5c 90       	ld	r5, X
     6a4:	55 20       	and	r5, r5
     6a6:	a9 f3       	breq	.-22     	; 0x692 <buildMsgPath+0x158>
     6a8:	c5 01       	movw	r24, r10
     6aa:	06 96       	adiw	r24, 0x06	; 6
     6ac:	71 2c       	mov	r7, r1
     6ae:	61 2c       	mov	r6, r1
     6b0:	d5 cf       	rjmp	.-86     	; 0x65c <buildMsgPath+0x122>
     6b2:	b2 e0       	ldi	r27, 0x02	; 2
     6b4:	6b 12       	cpse	r6, r27
     6b6:	ed cf       	rjmp	.-38     	; 0x692 <buildMsgPath+0x158>
     6b8:	e9 81       	ldd	r30, Y+1	; 0x01
     6ba:	fa 81       	ldd	r31, Y+2	; 0x02
     6bc:	45 01       	movw	r8, r10
     6be:	d6 cf       	rjmp	.-84     	; 0x66c <buildMsgPath+0x132>
     6c0:	29 80       	ldd	r2, Y+1	; 0x01
     6c2:	3a 80       	ldd	r3, Y+2	; 0x02
     6c4:	c1 01       	movw	r24, r2
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	df 90       	pop	r13
     6de:	cf 90       	pop	r12
     6e0:	bf 90       	pop	r11
     6e2:	af 90       	pop	r10
     6e4:	9f 90       	pop	r9
     6e6:	8f 90       	pop	r8
     6e8:	7f 90       	pop	r7
     6ea:	6f 90       	pop	r6
     6ec:	5f 90       	pop	r5
     6ee:	4f 90       	pop	r4
     6f0:	3f 90       	pop	r3
     6f2:	2f 90       	pop	r2
     6f4:	08 95       	ret

000006f6 <sendMessageSimple>:
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	00 d0       	rcall	.+0      	; 0x710 <sendMessageSimple+0x1a>
     710:	00 d0       	rcall	.+0      	; 0x712 <sendMessageSimple+0x1c>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	d8 2e       	mov	r13, r24
     718:	5a 01       	movw	r10, r20
     71a:	49 01       	movw	r8, r18
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	89 83       	std	Y+1, r24	; 0x01
     720:	6a 83       	std	Y+2, r22	; 0x02
     722:	db 82       	std	Y+3, r13	; 0x03
     724:	cc 82       	std	Y+4, r12	; 0x04
     726:	fa 01       	movw	r30, r20
     728:	e6 0f       	add	r30, r22
     72a:	f1 1d       	adc	r31, r1
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeDestDSN>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	64 e0       	ldi	r22, 0x04	; 4
     73a:	ce 01       	movw	r24, r28
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     742:	6d 2d       	mov	r22, r13
     744:	66 0f       	add	r22, r22
     746:	66 0f       	add	r22, r22
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	c5 01       	movw	r24, r10
     74e:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	66 e0       	ldi	r22, 0x06	; 6
     758:	c4 01       	movw	r24, r8
     75a:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	66 e0       	ldi	r22, 0x06	; 6
     764:	c8 01       	movw	r24, r16
     766:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	6c 2d       	mov	r22, r12
     770:	c7 01       	movw	r24, r14
     772:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	9f 90       	pop	r9
     794:	8f 90       	pop	r8
     796:	08 95       	ret

00000798 <sendNetworkData>:
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	27 97       	sbiw	r28, 0x07	; 7
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	7c 01       	movw	r14, r24
     7b6:	16 2f       	mov	r17, r22
     7b8:	fa 01       	movw	r30, r20
     7ba:	c9 01       	movw	r24, r18
     7bc:	23 e0       	ldi	r18, 0x03	; 3
     7be:	29 83       	std	Y+1, r18	; 0x01
     7c0:	20 81       	ld	r18, Z
     7c2:	2a 83       	std	Y+2, r18	; 0x02
     7c4:	21 81       	ldd	r18, Z+1	; 0x01
     7c6:	2b 83       	std	Y+3, r18	; 0x03
     7c8:	22 81       	ldd	r18, Z+2	; 0x02
     7ca:	2c 83       	std	Y+4, r18	; 0x04
     7cc:	23 81       	ldd	r18, Z+3	; 0x03
     7ce:	2d 83       	std	Y+5, r18	; 0x05
     7d0:	6e 83       	std	Y+6, r22	; 0x06
     7d2:	0f 83       	std	Y+7, r16	; 0x07
     7d4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeDestDSN>
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	67 e0       	ldi	r22, 0x07	; 7
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	61 2f       	mov	r22, r17
     7ec:	c7 01       	movw	r24, r14
     7ee:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     7f2:	27 96       	adiw	r28, 0x07	; 7
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	08 95       	ret

0000080c <sendAck>:
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	00 d0       	rcall	.+0      	; 0x812 <sendAck+0x6>
     812:	00 d0       	rcall	.+0      	; 0x814 <sendAck+0x8>
     814:	00 d0       	rcall	.+0      	; 0x816 <sendAck+0xa>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	fc 01       	movw	r30, r24
     81c:	cb 01       	movw	r24, r22
     81e:	24 e0       	ldi	r18, 0x04	; 4
     820:	29 83       	std	Y+1, r18	; 0x01
     822:	20 81       	ld	r18, Z
     824:	2a 83       	std	Y+2, r18	; 0x02
     826:	21 81       	ldd	r18, Z+1	; 0x01
     828:	2b 83       	std	Y+3, r18	; 0x03
     82a:	22 81       	ldd	r18, Z+2	; 0x02
     82c:	2c 83       	std	Y+4, r18	; 0x04
     82e:	23 81       	ldd	r18, Z+3	; 0x03
     830:	2d 83       	std	Y+5, r18	; 0x05
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	2e 83       	std	Y+6, r18	; 0x06
     836:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeDestDSN>
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	65 e0       	ldi	r22, 0x05	; 5
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	ce 01       	movw	r24, r28
     850:	06 96       	adiw	r24, 0x06	; 6
     852:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     856:	26 96       	adiw	r28, 0x06	; 6
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	de bf       	out	0x3e, r29	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	cd bf       	out	0x3d, r28	; 61
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <broadcastCon>:
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	2b 97       	sbiw	r28, 0x0b	; 11
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	7b 01       	movw	r14, r22
     884:	5d 98       	cbi	0x0b, 5	; 11
     886:	9f ef       	ldi	r25, 0xFF	; 255
     888:	99 83       	std	Y+1, r25	; 0x01
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	9a 83       	std	Y+2, r25	; 0x02
     88e:	9d e4       	ldi	r25, 0x4D	; 77
     890:	9b 83       	std	Y+3, r25	; 0x03
     892:	8c 83       	std	Y+4, r24	; 0x04
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	64 e0       	ldi	r22, 0x04	; 4
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     8a2:	8b e4       	ldi	r24, 0x4B	; 75
     8a4:	9d e1       	ldi	r25, 0x1D	; 29
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <broadcastCon+0x3e>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <broadcastCon+0x44>
     8ac:	00 00       	nop
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     8c6:	85 e0       	ldi	r24, 0x05	; 5
     8c8:	e6 e0       	ldi	r30, 0x06	; 6
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	de 01       	movw	r26, r28
     8ce:	15 96       	adiw	r26, 0x05	; 5
     8d0:	01 90       	ld	r0, Z+
     8d2:	0d 92       	st	X+, r0
     8d4:	8a 95       	dec	r24
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <broadcastCon+0x68>
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	8a 87       	std	Y+10, r24	; 0x0a
     8dc:	84 e2       	ldi	r24, 0x24	; 36
     8de:	8b 87       	std	Y+11, r24	; 0x0b
     8e0:	14 e0       	ldi	r17, 0x04	; 4
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	65 e0       	ldi	r22, 0x05	; 5
     8e8:	ce 01       	movw	r24, r28
     8ea:	05 96       	adiw	r24, 0x05	; 5
     8ec:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     8f6:	8f 81       	ldd	r24, Y+7	; 0x07
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	8f 83       	std	Y+7, r24	; 0x07
     8fc:	83 ec       	ldi	r24, 0xC3	; 195
     8fe:	99 e0       	ldi	r25, 0x09	; 9
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x1>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
     908:	11 50       	subi	r17, 0x01	; 1
     90a:	59 f7       	brne	.-42     	; 0x8e2 <broadcastCon+0x7a>
     90c:	83 ed       	ldi	r24, 0xD3	; 211
     90e:	90 e3       	ldi	r25, 0x30	; 48
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0x11>
     914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0x17>
     916:	00 00       	nop
     918:	5d 9a       	sbi	0x0b, 5	; 11
     91a:	83 ec       	ldi	r24, 0xC3	; 195
     91c:	99 e0       	ldi	r25, 0x09	; 9
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	f1 f7       	brne	.-4      	; 0x91e <__stack+0x1f>
     922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0x25>
     924:	00 00       	nop
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	62 e0       	ldi	r22, 0x02	; 2
     92c:	ce 01       	movw	r24, r28
     92e:	0a 96       	adiw	r24, 0x0a	; 10
     930:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	64 e2       	ldi	r22, 0x24	; 36
     93a:	c7 01       	movw	r24, r14
     93c:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     940:	83 ec       	ldi	r24, 0xC3	; 195
     942:	99 e0       	ldi	r25, 0x09	; 9
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <__stack+0x45>
     948:	00 c0       	rjmp	.+0      	; 0x94a <__stack+0x4b>
     94a:	00 00       	nop
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
     952:	2b 96       	adiw	r28, 0x0b	; 11
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	ff 90       	pop	r15
     966:	ef 90       	pop	r14
     968:	08 95       	ret

0000096a <updateNetworks>:
     96a:	2f 92       	push	r2
     96c:	3f 92       	push	r3
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	2b 97       	sbiw	r28, 0x0b	; 11
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
     99e:	2c 01       	movw	r4, r24
     9a0:	5b 01       	movw	r10, r22
     9a2:	7a 01       	movw	r14, r20
     9a4:	3a 83       	std	Y+2, r19	; 0x02
     9a6:	29 83       	std	Y+1, r18	; 0x01
     9a8:	67 2b       	or	r22, r23
     9aa:	89 f0       	breq	.+34     	; 0x9ce <updateNetworks+0x64>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	10 e0       	ldi	r17, 0x00	; 0
     9b2:	67 01       	movw	r12, r14
     9b4:	c8 0e       	add	r12, r24
     9b6:	d9 1e       	adc	r13, r25
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     9be:	d6 01       	movw	r26, r12
     9c0:	8c 93       	st	X, r24
     9c2:	1f 5f       	subi	r17, 0xFF	; 255
     9c4:	81 2f       	mov	r24, r17
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8a 15       	cp	r24, r10
     9ca:	9b 05       	cpc	r25, r11
     9cc:	90 f3       	brcs	.-28     	; 0x9b2 <updateNetworks+0x48>
     9ce:	01 30       	cpi	r16, 0x01	; 1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <updateNetworks+0x6a>
     9d2:	3b c1       	rjmp	.+630    	; 0xc4a <updateNetworks+0x2e0>
     9d4:	d2 01       	movw	r26, r4
     9d6:	ec 90       	ld	r14, X
     9d8:	ee 20       	and	r14, r14
     9da:	09 f4       	brne	.+2      	; 0x9de <updateNetworks+0x74>
     9dc:	72 c2       	rjmp	.+1252   	; 0xec2 <updateNetworks+0x558>
     9de:	81 2c       	mov	r8, r1
     9e0:	91 2c       	mov	r9, r1
     9e2:	31 2c       	mov	r3, r1
     9e4:	1e 82       	std	Y+6, r1	; 0x06
     9e6:	b1 e0       	ldi	r27, 0x01	; 1
     9e8:	bf 83       	std	Y+7, r27	; 0x07
     9ea:	22 24       	eor	r2, r2
     9ec:	23 94       	inc	r2
     9ee:	8d 82       	std	Y+5, r8	; 0x05
     9f0:	69 80       	ldd	r6, Y+1	; 0x01
     9f2:	7a 80       	ldd	r7, Y+2	; 0x02
     9f4:	f3 01       	movw	r30, r6
     9f6:	84 80       	ldd	r8, Z+4	; 0x04
     9f8:	10 e0       	ldi	r17, 0x00	; 0
     9fa:	bd 80       	ldd	r11, Y+5	; 0x05
     9fc:	ab 2c       	mov	r10, r11
     9fe:	b1 2c       	mov	r11, r1
     a00:	bc 82       	std	Y+4, r11	; 0x04
     a02:	ab 82       	std	Y+3, r10	; 0x03
     a04:	72 01       	movw	r14, r4
     a06:	24 e2       	ldi	r18, 0x24	; 36
     a08:	3d 81       	ldd	r19, Y+5	; 0x05
     a0a:	23 9f       	mul	r18, r19
     a0c:	e0 0c       	add	r14, r0
     a0e:	f1 1c       	adc	r15, r1
     a10:	11 24       	eor	r1, r1
     a12:	d7 01       	movw	r26, r14
     a14:	11 96       	adiw	r26, 0x01	; 1
     a16:	a7 01       	movw	r20, r14
     a18:	4e 5f       	subi	r20, 0xFE	; 254
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	67 01       	movw	r12, r14
     a1e:	63 e0       	ldi	r22, 0x03	; 3
     a20:	c6 0e       	add	r12, r22
     a22:	d1 1c       	adc	r13, r1
     a24:	57 01       	movw	r10, r14
     a26:	74 e0       	ldi	r23, 0x04	; 4
     a28:	a7 0e       	add	r10, r23
     a2a:	b1 1c       	adc	r11, r1
     a2c:	85 e0       	ldi	r24, 0x05	; 5
     a2e:	e8 0e       	add	r14, r24
     a30:	f1 1c       	adc	r15, r1
     a32:	2b 81       	ldd	r18, Y+3	; 0x03
     a34:	3c 81       	ldd	r19, Y+4	; 0x04
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	22 0f       	add	r18, r18
     a3c:	33 1f       	adc	r19, r19
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	eb 81       	ldd	r30, Y+3	; 0x03
     a44:	fc 81       	ldd	r31, Y+4	; 0x04
     a46:	2e 0f       	add	r18, r30
     a48:	3f 1f       	adc	r19, r31
     a4a:	79 86       	std	Y+9, r7	; 0x09
     a4c:	68 86       	std	Y+8, r6	; 0x08
     a4e:	7f 80       	ldd	r7, Y+7	; 0x07
     a50:	6b 81       	ldd	r22, Y+3	; 0x03
     a52:	7c 81       	ldd	r23, Y+4	; 0x04
     a54:	7a 83       	std	Y+2, r23	; 0x02
     a56:	69 83       	std	Y+1, r22	; 0x01
     a58:	0c 91       	ld	r16, X
     a5a:	81 2f       	mov	r24, r17
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	e8 85       	ldd	r30, Y+8	; 0x08
     a60:	f9 85       	ldd	r31, Y+9	; 0x09
     a62:	74 e0       	ldi	r23, 0x04	; 4
     a64:	17 9f       	mul	r17, r23
     a66:	e0 0d       	add	r30, r0
     a68:	f1 1d       	adc	r31, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	66 81       	ldd	r22, Z+6	; 0x06
     a6e:	60 13       	cpse	r22, r16
     a70:	cb c2       	rjmp	.+1430   	; 0x1008 <updateNetworks+0x69e>
     a72:	fc 01       	movw	r30, r24
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	68 85       	ldd	r22, Y+8	; 0x08
     a7e:	79 85       	ldd	r23, Y+9	; 0x09
     a80:	e6 0f       	add	r30, r22
     a82:	f7 1f       	adc	r31, r23
     a84:	77 81       	ldd	r23, Z+7	; 0x07
     a86:	fa 01       	movw	r30, r20
     a88:	60 81       	ld	r22, Z
     a8a:	76 13       	cpse	r23, r22
     a8c:	bd c2       	rjmp	.+1402   	; 0x1008 <updateNetworks+0x69e>
     a8e:	fc 01       	movw	r30, r24
     a90:	32 96       	adiw	r30, 0x02	; 2
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	68 85       	ldd	r22, Y+8	; 0x08
     a9c:	79 85       	ldd	r23, Y+9	; 0x09
     a9e:	e6 0f       	add	r30, r22
     aa0:	f7 1f       	adc	r31, r23
     aa2:	70 81       	ld	r23, Z
     aa4:	f6 01       	movw	r30, r12
     aa6:	60 81       	ld	r22, Z
     aa8:	76 13       	cpse	r23, r22
     aaa:	ae c2       	rjmp	.+1372   	; 0x1008 <updateNetworks+0x69e>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	e8 85       	ldd	r30, Y+8	; 0x08
     ab6:	f9 85       	ldd	r31, Y+9	; 0x09
     ab8:	e8 0f       	add	r30, r24
     aba:	f9 1f       	adc	r31, r25
     abc:	91 85       	ldd	r25, Z+9	; 0x09
     abe:	f5 01       	movw	r30, r10
     ac0:	80 81       	ld	r24, Z
     ac2:	98 13       	cpse	r25, r24
     ac4:	a1 c2       	rjmp	.+1346   	; 0x1008 <updateNetworks+0x69e>
     ac6:	37 2c       	mov	r3, r7
     ac8:	9f c2       	rjmp	.+1342   	; 0x1008 <updateNetworks+0x69e>
     aca:	86 2f       	mov	r24, r22
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	f9 01       	movw	r30, r18
     ad0:	e8 0f       	add	r30, r24
     ad2:	f9 1f       	adc	r31, r25
     ad4:	ee 0f       	add	r30, r30
     ad6:	ff 1f       	adc	r31, r31
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	e4 0d       	add	r30, r4
     ade:	f5 1d       	adc	r31, r5
     ae0:	a8 85       	ldd	r26, Y+8	; 0x08
     ae2:	b9 85       	ldd	r27, Y+9	; 0x09
     ae4:	6c 90       	ld	r6, X
     ae6:	e7 81       	ldd	r30, Z+7	; 0x07
     ae8:	6e 12       	cpse	r6, r30
     aea:	2f c0       	rjmp	.+94     	; 0xb4a <updateNetworks+0x1e0>
     aec:	f9 01       	movw	r30, r18
     aee:	e8 0f       	add	r30, r24
     af0:	f9 1f       	adc	r31, r25
     af2:	32 96       	adiw	r30, 0x02	; 2
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	e4 0d       	add	r30, r4
     afe:	f5 1d       	adc	r31, r5
     b00:	f0 81       	ld	r31, Z
     b02:	11 96       	adiw	r26, 0x01	; 1
     b04:	ec 91       	ld	r30, X
     b06:	11 97       	sbiw	r26, 0x01	; 1
     b08:	fe 13       	cpse	r31, r30
     b0a:	1f c0       	rjmp	.+62     	; 0xb4a <updateNetworks+0x1e0>
     b0c:	f9 01       	movw	r30, r18
     b0e:	e8 0f       	add	r30, r24
     b10:	f9 1f       	adc	r31, r25
     b12:	32 96       	adiw	r30, 0x02	; 2
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	e4 0d       	add	r30, r4
     b1e:	f5 1d       	adc	r31, r5
     b20:	f1 81       	ldd	r31, Z+1	; 0x01
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	ec 91       	ld	r30, X
     b26:	12 97       	sbiw	r26, 0x02	; 2
     b28:	fe 13       	cpse	r31, r30
     b2a:	0f c0       	rjmp	.+30     	; 0xb4a <updateNetworks+0x1e0>
     b2c:	f9 01       	movw	r30, r18
     b2e:	e8 0f       	add	r30, r24
     b30:	f9 1f       	adc	r31, r25
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	ee 0f       	add	r30, r30
     b38:	ff 1f       	adc	r31, r31
     b3a:	e4 0d       	add	r30, r4
     b3c:	f5 1d       	adc	r31, r5
     b3e:	13 96       	adiw	r26, 0x03	; 3
     b40:	9c 91       	ld	r25, X
     b42:	82 85       	ldd	r24, Z+10	; 0x0a
     b44:	98 13       	cpse	r25, r24
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <updateNetworks+0x1e0>
     b48:	92 2c       	mov	r9, r2
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	76 17       	cp	r23, r22
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <updateNetworks+0x1e8>
     b50:	bc cf       	rjmp	.-136    	; 0xaca <updateNetworks+0x160>
     b52:	e8 85       	ldd	r30, Y+8	; 0x08
     b54:	f9 85       	ldd	r31, Y+9	; 0x09
     b56:	aa 85       	ldd	r26, Y+10	; 0x0a
     b58:	bb 85       	ldd	r27, Y+11	; 0x0b
     b5a:	33 20       	and	r3, r3
     b5c:	99 f1       	breq	.+102    	; 0xbc4 <updateNetworks+0x25a>
     b5e:	91 10       	cpse	r9, r1
     b60:	63 c0       	rjmp	.+198    	; 0xc28 <updateNetworks+0x2be>
     b62:	3f 01       	movw	r6, r30
     b64:	14 e2       	ldi	r17, 0x24	; 36
     b66:	a9 80       	ldd	r10, Y+1	; 0x01
     b68:	ba 80       	ldd	r11, Y+2	; 0x02
     b6a:	1a 9d       	mul	r17, r10
     b6c:	f0 01       	movw	r30, r0
     b6e:	1b 9d       	mul	r17, r11
     b70:	f0 0d       	add	r31, r0
     b72:	11 24       	eor	r1, r1
     b74:	e4 0d       	add	r30, r4
     b76:	f5 1d       	adc	r31, r5
     b78:	7f 5f       	subi	r23, 0xFF	; 255
     b7a:	75 83       	std	Z+5, r23	; 0x05
     b7c:	d3 01       	movw	r26, r6
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	44 e2       	ldi	r20, 0x24	; 36
     b84:	4a 9d       	mul	r20, r10
     b86:	90 01       	movw	r18, r0
     b88:	4b 9d       	mul	r20, r11
     b8a:	30 0d       	add	r19, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	af 01       	movw	r20, r30
     b90:	4b 5f       	subi	r20, 0xFB	; 251
     b92:	5f 4f       	sbci	r21, 0xFF	; 255
     b94:	6d 91       	ld	r22, X+
     b96:	fa 01       	movw	r30, r20
     b98:	70 81       	ld	r23, Z
     b9a:	f9 01       	movw	r30, r18
     b9c:	14 e0       	ldi	r17, 0x04	; 4
     b9e:	71 9f       	mul	r23, r17
     ba0:	e0 0d       	add	r30, r0
     ba2:	f1 1d       	adc	r31, r1
     ba4:	11 24       	eor	r1, r1
     ba6:	e4 0d       	add	r30, r4
     ba8:	f5 1d       	adc	r31, r5
     baa:	e8 0f       	add	r30, r24
     bac:	f9 1f       	adc	r31, r25
     bae:	67 83       	std	Z+7, r22	; 0x07
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	91 05       	cpc	r25, r1
     bb6:	71 f7       	brne	.-36     	; 0xb94 <updateNetworks+0x22a>
     bb8:	68 84       	ldd	r6, Y+8	; 0x08
     bba:	79 84       	ldd	r7, Y+9	; 0x09
     bbc:	31 2c       	mov	r3, r1
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	2e 83       	std	Y+6, r18	; 0x06
     bc2:	38 c0       	rjmp	.+112    	; 0xc34 <updateNetworks+0x2ca>
     bc4:	99 20       	and	r9, r9
     bc6:	81 f1       	breq	.+96     	; 0xc28 <updateNetworks+0x2be>
     bc8:	68 84       	ldd	r6, Y+8	; 0x08
     bca:	79 84       	ldd	r7, Y+9	; 0x09
     bcc:	68 2d       	mov	r22, r8
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	d3 01       	movw	r26, r6
     bd2:	34 e0       	ldi	r19, 0x04	; 4
     bd4:	83 9e       	mul	r8, r19
     bd6:	a0 0d       	add	r26, r0
     bd8:	b1 1d       	adc	r27, r1
     bda:	11 24       	eor	r1, r1
     bdc:	16 96       	adiw	r26, 0x06	; 6
     bde:	0c 93       	st	X, r16
     be0:	16 97       	sbiw	r26, 0x06	; 6
     be2:	e4 e2       	ldi	r30, 0x24	; 36
     be4:	49 81       	ldd	r20, Y+1	; 0x01
     be6:	5a 81       	ldd	r21, Y+2	; 0x02
     be8:	e4 9f       	mul	r30, r20
     bea:	c0 01       	movw	r24, r0
     bec:	e5 9f       	mul	r30, r21
     bee:	90 0d       	add	r25, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	84 0d       	add	r24, r4
     bf4:	95 1d       	adc	r25, r5
     bf6:	fc 01       	movw	r30, r24
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	17 96       	adiw	r26, 0x07	; 7
     bfc:	2c 93       	st	X, r18
     bfe:	17 97       	sbiw	r26, 0x07	; 7
     c00:	23 81       	ldd	r18, Z+3	; 0x03
     c02:	fb 01       	movw	r30, r22
     c04:	32 96       	adiw	r30, 0x02	; 2
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e6 0d       	add	r30, r6
     c10:	f7 1d       	adc	r31, r7
     c12:	20 83       	st	Z, r18
     c14:	fc 01       	movw	r30, r24
     c16:	84 81       	ldd	r24, Z+4	; 0x04
     c18:	19 96       	adiw	r26, 0x09	; 9
     c1a:	8c 93       	st	X, r24
     c1c:	83 94       	inc	r8
     c1e:	d3 01       	movw	r26, r6
     c20:	14 96       	adiw	r26, 0x04	; 4
     c22:	8c 92       	st	X, r8
     c24:	91 2c       	mov	r9, r1
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <updateNetworks+0x2ca>
     c28:	1f 5f       	subi	r17, 0xFF	; 255
     c2a:	81 16       	cp	r8, r17
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <updateNetworks+0x2c6>
     c2e:	10 cf       	rjmp	.-480    	; 0xa50 <updateNetworks+0xe6>
     c30:	68 84       	ldd	r6, Y+8	; 0x08
     c32:	79 84       	ldd	r7, Y+9	; 0x09
     c34:	bd 81       	ldd	r27, Y+5	; 0x05
     c36:	bf 5f       	subi	r27, 0xFF	; 255
     c38:	bd 83       	std	Y+5, r27	; 0x05
     c3a:	f2 01       	movw	r30, r4
     c3c:	80 81       	ld	r24, Z
     c3e:	b8 17       	cp	r27, r24
     c40:	08 f4       	brcc	.+2      	; 0xc44 <updateNetworks+0x2da>
     c42:	d8 ce       	rjmp	.-592    	; 0x9f4 <updateNetworks+0x8a>
     c44:	7a 82       	std	Y+2, r7	; 0x02
     c46:	69 82       	std	Y+1, r6	; 0x01
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <updateNetworks+0x2e2>
     c4a:	1e 82       	std	Y+6, r1	; 0x06
     c4c:	d2 01       	movw	r26, r4
     c4e:	ec 90       	ld	r14, X
     c50:	ee 20       	and	r14, r14
     c52:	09 f4       	brne	.+2      	; 0xc56 <updateNetworks+0x2ec>
     c54:	3d c1       	rjmp	.+634    	; 0xed0 <updateNetworks+0x566>
     c56:	e9 81       	ldd	r30, Y+1	; 0x01
     c58:	fa 81       	ldd	r31, Y+2	; 0x02
     c5a:	10 81       	ld	r17, Z
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	d1 2c       	mov	r13, r1
     c64:	04 e2       	ldi	r16, 0x24	; 36
     c66:	ff 24       	eor	r15, r15
     c68:	f3 94       	inc	r15
     c6a:	81 2f       	mov	r24, r17
     c6c:	1d 2d       	mov	r17, r13
     c6e:	4f 01       	movw	r8, r30
     c70:	d8 2e       	mov	r13, r24
     c72:	15 c1       	rjmp	.+554    	; 0xe9e <updateNetworks+0x534>
     c74:	1f 2d       	mov	r17, r15
     c76:	82 2f       	mov	r24, r18
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	fa 01       	movw	r30, r20
     c7c:	e8 0f       	add	r30, r24
     c7e:	f9 1f       	adc	r31, r25
     c80:	2f 5f       	subi	r18, 0xFF	; 255
     c82:	88 0d       	add	r24, r8
     c84:	99 1d       	adc	r25, r9
     c86:	c1 80       	ldd	r12, Z+1	; 0x01
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	c8 12       	cpse	r12, r24
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <updateNetworks+0x334>
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	82 0f       	add	r24, r18
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	08 f0       	brcs	.+2      	; 0xc9a <updateNetworks+0x330>
     c98:	bd c1       	rjmp	.+890    	; 0x1014 <updateNetworks+0x6aa>
     c9a:	24 30       	cpi	r18, 0x04	; 4
     c9c:	60 f3       	brcs	.-40     	; 0xc76 <updateNetworks+0x30c>
     c9e:	11 30       	cpi	r17, 0x01	; 1
     ca0:	09 f0       	breq	.+2      	; 0xca4 <updateNetworks+0x33a>
     ca2:	f7 c0       	rjmp	.+494    	; 0xe92 <updateNetworks+0x528>
     ca4:	9a 82       	std	Y+2, r9	; 0x02
     ca6:	89 82       	std	Y+1, r8	; 0x01
     ca8:	a9 81       	ldd	r26, Y+1	; 0x01
     caa:	ba 81       	ldd	r27, Y+2	; 0x02
     cac:	14 96       	adiw	r26, 0x04	; 4
     cae:	ec 90       	ld	r14, X
     cb0:	14 97       	sbiw	r26, 0x04	; 4
     cb2:	15 96       	adiw	r26, 0x05	; 5
     cb4:	8c 91       	ld	r24, X
     cb6:	03 2f       	mov	r16, r19
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	f2 01       	movw	r30, r4
     cbc:	b4 e2       	ldi	r27, 0x24	; 36
     cbe:	3b 9f       	mul	r19, r27
     cc0:	e0 0d       	add	r30, r0
     cc2:	f1 1d       	adc	r31, r1
     cc4:	11 24       	eor	r1, r1
     cc6:	96 81       	ldd	r25, Z+6	; 0x06
     cc8:	89 13       	cpse	r24, r25
     cca:	5b c0       	rjmp	.+182    	; 0xd82 <updateNetworks+0x418>
     ccc:	94 e2       	ldi	r25, 0x24	; 36
     cce:	90 9f       	mul	r25, r16
     cd0:	f0 01       	movw	r30, r0
     cd2:	91 9f       	mul	r25, r17
     cd4:	f0 0d       	add	r31, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	e4 0d       	add	r30, r4
     cda:	f5 1d       	adc	r31, r5
     cdc:	95 81       	ldd	r25, Z+5	; 0x05
     cde:	e9 12       	cpse	r14, r25
     ce0:	50 c0       	rjmp	.+160    	; 0xd82 <updateNetworks+0x418>
     ce2:	ee 20       	and	r14, r14
     ce4:	09 f4       	brne	.+2      	; 0xce8 <updateNetworks+0x37e>
     ce6:	9c c1       	rjmp	.+824    	; 0x1020 <updateNetworks+0x6b6>
     ce8:	e4 e2       	ldi	r30, 0x24	; 36
     cea:	3e 9f       	mul	r19, r30
     cec:	a0 01       	movw	r20, r0
     cee:	11 24       	eor	r1, r1
     cf0:	b2 01       	movw	r22, r4
     cf2:	64 0f       	add	r22, r20
     cf4:	75 1f       	adc	r23, r21
     cf6:	a9 80       	ldd	r10, Y+1	; 0x01
     cf8:	ba 80       	ldd	r11, Y+2	; 0x02
     cfa:	48 5f       	subi	r20, 0xF8	; 248
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	44 0d       	add	r20, r4
     d00:	55 1d       	adc	r21, r5
     d02:	d1 2c       	mov	r13, r1
     d04:	11 c0       	rjmp	.+34     	; 0xd28 <updateNetworks+0x3be>
     d06:	f1 90       	ld	r15, Z+
     d08:	2d 91       	ld	r18, X+
     d0a:	f2 12       	cpse	r15, r18
     d0c:	37 c0       	rjmp	.+110    	; 0xd7c <updateNetworks+0x412>
     d0e:	91 50       	subi	r25, 0x01	; 1
     d10:	d1 f7       	brne	.-12     	; 0xd06 <updateNetworks+0x39c>
     d12:	d3 94       	inc	r13
     d14:	6c 5f       	subi	r22, 0xFC	; 252
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	b4 e0       	ldi	r27, 0x04	; 4
     d1a:	ab 0e       	add	r10, r27
     d1c:	b1 1c       	adc	r11, r1
     d1e:	4c 5f       	subi	r20, 0xFC	; 252
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	ed 14       	cp	r14, r13
     d24:	09 f4       	brne	.+2      	; 0xd28 <updateNetworks+0x3be>
     d26:	7c c1       	rjmp	.+760    	; 0x1020 <updateNetworks+0x6b6>
     d28:	fb 01       	movw	r30, r22
     d2a:	27 81       	ldd	r18, Z+7	; 0x07
     d2c:	d5 01       	movw	r26, r10
     d2e:	16 96       	adiw	r26, 0x06	; 6
     d30:	9c 91       	ld	r25, X
     d32:	16 97       	sbiw	r26, 0x06	; 6
     d34:	29 13       	cpse	r18, r25
     d36:	23 c0       	rjmp	.+70     	; 0xd7e <updateNetworks+0x414>
     d38:	17 96       	adiw	r26, 0x07	; 7
     d3a:	fa 01       	movw	r30, r20
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	e3 cf       	rjmp	.-58     	; 0xd06 <updateNetworks+0x39c>
     d40:	f1 90       	ld	r15, Z+
     d42:	2d 91       	ld	r18, X+
     d44:	f2 12       	cpse	r15, r18
     d46:	1c c0       	rjmp	.+56     	; 0xd80 <updateNetworks+0x416>
     d48:	9f 5f       	subi	r25, 0xFF	; 255
     d4a:	96 30       	cpi	r25, 0x06	; 6
     d4c:	c9 f7       	brne	.-14     	; 0xd40 <updateNetworks+0x3d6>
     d4e:	d3 94       	inc	r13
     d50:	6a 5f       	subi	r22, 0xFA	; 250
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	b6 e0       	ldi	r27, 0x06	; 6
     d56:	ab 0e       	add	r10, r27
     d58:	b1 1c       	adc	r11, r1
     d5a:	4a 5f       	subi	r20, 0xFA	; 250
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	8d 15       	cp	r24, r13
     d60:	09 f4       	brne	.+2      	; 0xd64 <updateNetworks+0x3fa>
     d62:	44 c1       	rjmp	.+648    	; 0xfec <updateNetworks+0x682>
     d64:	f5 01       	movw	r30, r10
     d66:	22 89       	ldd	r18, Z+18	; 0x12
     d68:	db 01       	movw	r26, r22
     d6a:	53 96       	adiw	r26, 0x13	; 19
     d6c:	9c 91       	ld	r25, X
     d6e:	29 13       	cpse	r18, r25
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <updateNetworks+0x418>
     d72:	d5 01       	movw	r26, r10
     d74:	53 96       	adiw	r26, 0x13	; 19
     d76:	fa 01       	movw	r30, r20
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	e2 cf       	rjmp	.-60     	; 0xd40 <updateNetworks+0x3d6>
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <updateNetworks+0x418>
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <updateNetworks+0x418>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <updateNetworks+0x418>
     d82:	84 e2       	ldi	r24, 0x24	; 36
     d84:	80 9f       	mul	r24, r16
     d86:	f0 01       	movw	r30, r0
     d88:	81 9f       	mul	r24, r17
     d8a:	f0 0d       	add	r31, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	e4 0d       	add	r30, r4
     d90:	f5 1d       	adc	r31, r5
     d92:	e5 82       	std	Z+5, r14	; 0x05
     d94:	a9 81       	ldd	r26, Y+1	; 0x01
     d96:	ba 81       	ldd	r27, Y+2	; 0x02
     d98:	15 96       	adiw	r26, 0x05	; 5
     d9a:	8c 91       	ld	r24, X
     d9c:	15 97       	sbiw	r26, 0x05	; 5
     d9e:	86 83       	std	Z+6, r24	; 0x06
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8c 91       	ld	r24, X
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <updateNetworks+0x440>
     da8:	45 c0       	rjmp	.+138    	; 0xe34 <updateNetworks+0x4ca>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	c8 01       	movw	r24, r16
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	08 0f       	add	r16, r24
     dbc:	19 1f       	adc	r17, r25
     dbe:	82 2f       	mov	r24, r18
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	e9 80       	ldd	r14, Y+1	; 0x01
     dc4:	fa 80       	ldd	r15, Y+2	; 0x02
     dc6:	b4 e0       	ldi	r27, 0x04	; 4
     dc8:	2b 9f       	mul	r18, r27
     dca:	e0 0c       	add	r14, r0
     dcc:	f1 1c       	adc	r15, r1
     dce:	11 24       	eor	r1, r1
     dd0:	d7 01       	movw	r26, r14
     dd2:	16 96       	adiw	r26, 0x06	; 6
     dd4:	ec 91       	ld	r30, X
     dd6:	a8 01       	movw	r20, r16
     dd8:	48 0f       	add	r20, r24
     dda:	59 1f       	adc	r21, r25
     ddc:	ba 01       	movw	r22, r20
     dde:	66 0f       	add	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	66 0f       	add	r22, r22
     de4:	77 1f       	adc	r23, r23
     de6:	64 0d       	add	r22, r4
     de8:	75 1d       	adc	r23, r5
     dea:	db 01       	movw	r26, r22
     dec:	17 96       	adiw	r26, 0x07	; 7
     dee:	ec 93       	st	X, r30
     df0:	f7 01       	movw	r30, r14
     df2:	a7 81       	ldd	r26, Z+7	; 0x07
     df4:	fa 01       	movw	r30, r20
     df6:	32 96       	adiw	r30, 0x02	; 2
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e4 0d       	add	r30, r4
     e02:	f5 1d       	adc	r31, r5
     e04:	a0 83       	st	Z, r26
     e06:	dc 01       	movw	r26, r24
     e08:	12 96       	adiw	r26, 0x02	; 2
     e0a:	aa 0f       	add	r26, r26
     e0c:	bb 1f       	adc	r27, r27
     e0e:	aa 0f       	add	r26, r26
     e10:	bb 1f       	adc	r27, r27
     e12:	a9 80       	ldd	r10, Y+1	; 0x01
     e14:	ba 80       	ldd	r11, Y+2	; 0x02
     e16:	aa 0d       	add	r26, r10
     e18:	bb 1d       	adc	r27, r11
     e1a:	8c 91       	ld	r24, X
     e1c:	81 83       	std	Z+1, r24	; 0x01
     e1e:	d7 01       	movw	r26, r14
     e20:	19 96       	adiw	r26, 0x09	; 9
     e22:	8c 91       	ld	r24, X
     e24:	fb 01       	movw	r30, r22
     e26:	82 87       	std	Z+10, r24	; 0x0a
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	d5 01       	movw	r26, r10
     e2c:	14 96       	adiw	r26, 0x04	; 4
     e2e:	8c 91       	ld	r24, X
     e30:	28 17       	cp	r18, r24
     e32:	28 f2       	brcs	.-118    	; 0xdbe <updateNetworks+0x454>
     e34:	e9 81       	ldd	r30, Y+1	; 0x01
     e36:	fa 81       	ldd	r31, Y+2	; 0x02
     e38:	85 81       	ldd	r24, Z+5	; 0x05
     e3a:	88 23       	and	r24, r24
     e3c:	09 f4       	brne	.+2      	; 0xe40 <updateNetworks+0x4d6>
     e3e:	d8 c0       	rjmp	.+432    	; 0xff0 <updateNetworks+0x686>
     e40:	f4 e2       	ldi	r31, 0x24	; 36
     e42:	3f 9f       	mul	r19, r31
     e44:	90 01       	movw	r18, r0
     e46:	11 24       	eor	r1, r1
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	2d 5e       	subi	r18, 0xED	; 237
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
     e4e:	0c c0       	rjmp	.+24     	; 0xe68 <updateNetworks+0x4fe>
     e50:	9d 91       	ld	r25, X+
     e52:	91 93       	st	Z+, r25
     e54:	81 50       	subi	r24, 0x01	; 1
     e56:	e1 f7       	brne	.-8      	; 0xe50 <updateNetworks+0x4e6>
     e58:	4f 5f       	subi	r20, 0xFF	; 255
     e5a:	a9 81       	ldd	r26, Y+1	; 0x01
     e5c:	ba 81       	ldd	r27, Y+2	; 0x02
     e5e:	15 96       	adiw	r26, 0x05	; 5
     e60:	8c 91       	ld	r24, X
     e62:	48 17       	cp	r20, r24
     e64:	08 f0       	brcs	.+2      	; 0xe68 <updateNetworks+0x4fe>
     e66:	c6 c0       	rjmp	.+396    	; 0xff4 <updateNetworks+0x68a>
     e68:	84 2f       	mov	r24, r20
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	fc 01       	movw	r30, r24
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	e8 0f       	add	r30, r24
     e74:	f9 1f       	adc	r31, r25
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	df 01       	movw	r26, r30
     e7c:	52 96       	adiw	r26, 0x12	; 18
     e7e:	a9 80       	ldd	r10, Y+1	; 0x01
     e80:	ba 80       	ldd	r11, Y+2	; 0x02
     e82:	aa 0d       	add	r26, r10
     e84:	bb 1d       	adc	r27, r11
     e86:	e2 0f       	add	r30, r18
     e88:	f3 1f       	adc	r31, r19
     e8a:	e4 0d       	add	r30, r4
     e8c:	f5 1d       	adc	r31, r5
     e8e:	86 e0       	ldi	r24, 0x06	; 6
     e90:	df cf       	rjmp	.-66     	; 0xe50 <updateNetworks+0x4e6>
     e92:	3f 5f       	subi	r19, 0xFF	; 255
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	94 96       	adiw	r26, 0x24	; 36
     e9a:	3e 15       	cp	r19, r14
     e9c:	71 f0       	breq	.+28     	; 0xeba <updateNetworks+0x550>
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	8c 91       	ld	r24, X
     ea2:	11 97       	sbiw	r26, 0x01	; 1
     ea4:	8d 11       	cpse	r24, r13
     ea6:	fb ce       	rjmp	.-522    	; 0xc9e <updateNetworks+0x334>
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	06 9f       	mul	r16, r22
     eac:	a0 01       	movw	r20, r0
     eae:	07 9f       	mul	r16, r23
     eb0:	50 0d       	add	r21, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	44 0d       	add	r20, r4
     eb6:	55 1d       	adc	r21, r5
     eb8:	eb ce       	rjmp	.-554    	; 0xc90 <updateNetworks+0x326>
     eba:	9a 82       	std	Y+2, r9	; 0x02
     ebc:	89 82       	std	Y+1, r8	; 0x01
     ebe:	11 11       	cpse	r17, r1
     ec0:	9b c0       	rjmp	.+310    	; 0xff8 <updateNetworks+0x68e>
     ec2:	0f 2e       	mov	r0, r31
     ec4:	f5 e0       	ldi	r31, 0x05	; 5
     ec6:	bf 2e       	mov	r11, r31
     ec8:	f0 2d       	mov	r31, r0
     eca:	eb 14       	cp	r14, r11
     ecc:	09 f4       	brne	.+2      	; 0xed0 <updateNetworks+0x566>
     ece:	96 c0       	rjmp	.+300    	; 0xffc <updateNetworks+0x692>
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	4e 0d       	add	r20, r14
     ed4:	d2 01       	movw	r26, r4
     ed6:	4c 93       	st	X, r20
     ed8:	e9 81       	ldd	r30, Y+1	; 0x01
     eda:	fa 81       	ldd	r31, Y+2	; 0x02
     edc:	24 81       	ldd	r18, Z+4	; 0x04
     ede:	84 2f       	mov	r24, r20
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	f2 01       	movw	r30, r4
     ee4:	14 e2       	ldi	r17, 0x24	; 36
     ee6:	41 9f       	mul	r20, r17
     ee8:	e0 0d       	add	r30, r0
     eea:	f1 1d       	adc	r31, r1
     eec:	11 24       	eor	r1, r1
     eee:	25 83       	std	Z+5, r18	; 0x05
     ef0:	a9 81       	ldd	r26, Y+1	; 0x01
     ef2:	ba 81       	ldd	r27, Y+2	; 0x02
     ef4:	15 96       	adiw	r26, 0x05	; 5
     ef6:	2c 91       	ld	r18, X
     ef8:	15 97       	sbiw	r26, 0x05	; 5
     efa:	25 83       	std	Z+5, r18	; 0x05
     efc:	14 96       	adiw	r26, 0x04	; 4
     efe:	2c 91       	ld	r18, X
     f00:	22 23       	and	r18, r18
     f02:	09 f4       	brne	.+2      	; 0xf06 <updateNetworks+0x59c>
     f04:	45 c0       	rjmp	.+138    	; 0xf90 <updateNetworks+0x626>
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	9c 01       	movw	r18, r24
     f0a:	22 0f       	add	r18, r18
     f0c:	33 1f       	adc	r19, r19
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	28 0f       	add	r18, r24
     f18:	39 1f       	adc	r19, r25
     f1a:	85 2f       	mov	r24, r21
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	e9 80       	ldd	r14, Y+1	; 0x01
     f20:	fa 80       	ldd	r15, Y+2	; 0x02
     f22:	b4 e0       	ldi	r27, 0x04	; 4
     f24:	5b 9f       	mul	r21, r27
     f26:	e0 0c       	add	r14, r0
     f28:	f1 1c       	adc	r15, r1
     f2a:	11 24       	eor	r1, r1
     f2c:	d7 01       	movw	r26, r14
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	ec 91       	ld	r30, X
     f32:	b9 01       	movw	r22, r18
     f34:	68 0f       	add	r22, r24
     f36:	79 1f       	adc	r23, r25
     f38:	8b 01       	movw	r16, r22
     f3a:	00 0f       	add	r16, r16
     f3c:	11 1f       	adc	r17, r17
     f3e:	00 0f       	add	r16, r16
     f40:	11 1f       	adc	r17, r17
     f42:	04 0d       	add	r16, r4
     f44:	15 1d       	adc	r17, r5
     f46:	d8 01       	movw	r26, r16
     f48:	17 96       	adiw	r26, 0x07	; 7
     f4a:	ec 93       	st	X, r30
     f4c:	f7 01       	movw	r30, r14
     f4e:	a7 81       	ldd	r26, Z+7	; 0x07
     f50:	fb 01       	movw	r30, r22
     f52:	32 96       	adiw	r30, 0x02	; 2
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	e4 0d       	add	r30, r4
     f5e:	f5 1d       	adc	r31, r5
     f60:	a0 83       	st	Z, r26
     f62:	dc 01       	movw	r26, r24
     f64:	12 96       	adiw	r26, 0x02	; 2
     f66:	aa 0f       	add	r26, r26
     f68:	bb 1f       	adc	r27, r27
     f6a:	aa 0f       	add	r26, r26
     f6c:	bb 1f       	adc	r27, r27
     f6e:	a9 80       	ldd	r10, Y+1	; 0x01
     f70:	ba 80       	ldd	r11, Y+2	; 0x02
     f72:	aa 0d       	add	r26, r10
     f74:	bb 1d       	adc	r27, r11
     f76:	8c 91       	ld	r24, X
     f78:	81 83       	std	Z+1, r24	; 0x01
     f7a:	d7 01       	movw	r26, r14
     f7c:	19 96       	adiw	r26, 0x09	; 9
     f7e:	8c 91       	ld	r24, X
     f80:	f8 01       	movw	r30, r16
     f82:	82 87       	std	Z+10, r24	; 0x0a
     f84:	5f 5f       	subi	r21, 0xFF	; 255
     f86:	d5 01       	movw	r26, r10
     f88:	14 96       	adiw	r26, 0x04	; 4
     f8a:	8c 91       	ld	r24, X
     f8c:	58 17       	cp	r21, r24
     f8e:	28 f2       	brcs	.-118    	; 0xf1a <updateNetworks+0x5b0>
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	85 81       	ldd	r24, Z+5	; 0x05
     f96:	88 23       	and	r24, r24
     f98:	99 f1       	breq	.+102    	; 0x1000 <updateNetworks+0x696>
     f9a:	f4 e2       	ldi	r31, 0x24	; 36
     f9c:	4f 9f       	mul	r20, r31
     f9e:	a0 01       	movw	r20, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	4d 5e       	subi	r20, 0xED	; 237
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255
     fa8:	0b c0       	rjmp	.+22     	; 0xfc0 <updateNetworks+0x656>
     faa:	9d 91       	ld	r25, X+
     fac:	91 93       	st	Z+, r25
     fae:	81 50       	subi	r24, 0x01	; 1
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <updateNetworks+0x640>
     fb2:	6f 5f       	subi	r22, 0xFF	; 255
     fb4:	a9 81       	ldd	r26, Y+1	; 0x01
     fb6:	ba 81       	ldd	r27, Y+2	; 0x02
     fb8:	15 96       	adiw	r26, 0x05	; 5
     fba:	8c 91       	ld	r24, X
     fbc:	68 17       	cp	r22, r24
     fbe:	10 f5       	brcc	.+68     	; 0x1004 <updateNetworks+0x69a>
     fc0:	86 2f       	mov	r24, r22
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9c 01       	movw	r18, r24
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	dc 01       	movw	r26, r24
     fd4:	52 96       	adiw	r26, 0x12	; 18
     fd6:	e9 81       	ldd	r30, Y+1	; 0x01
     fd8:	fa 81       	ldd	r31, Y+2	; 0x02
     fda:	ae 0f       	add	r26, r30
     fdc:	bf 1f       	adc	r27, r31
     fde:	84 0f       	add	r24, r20
     fe0:	95 1f       	adc	r25, r21
     fe2:	f2 01       	movw	r30, r4
     fe4:	e8 0f       	add	r30, r24
     fe6:	f9 1f       	adc	r31, r25
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	df cf       	rjmp	.-66     	; 0xfaa <updateNetworks+0x640>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	29 c0       	rjmp	.+82     	; 0x1042 <updateNetworks+0x6d8>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	27 c0       	rjmp	.+78     	; 0x1042 <updateNetworks+0x6d8>
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	25 c0       	rjmp	.+74     	; 0x1042 <updateNetworks+0x6d8>
     ff8:	8e 81       	ldd	r24, Y+6	; 0x06
     ffa:	23 c0       	rjmp	.+70     	; 0x1042 <updateNetworks+0x6d8>
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	21 c0       	rjmp	.+66     	; 0x1042 <updateNetworks+0x6d8>
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	1f c0       	rjmp	.+62     	; 0x1042 <updateNetworks+0x6d8>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	1d c0       	rjmp	.+58     	; 0x1042 <updateNetworks+0x6d8>
    1008:	f7 01       	movw	r30, r14
    100a:	70 81       	ld	r23, Z
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	bb 87       	std	Y+11, r27	; 0x0b
    1010:	aa 87       	std	Y+10, r26	; 0x0a
    1012:	5b cd       	rjmp	.-1354   	; 0xaca <updateNetworks+0x160>
    1014:	24 30       	cpi	r18, 0x04	; 4
    1016:	08 f4       	brcc	.+2      	; 0x101a <updateNetworks+0x6b0>
    1018:	2d ce       	rjmp	.-934    	; 0xc74 <updateNetworks+0x30a>
    101a:	9a 82       	std	Y+2, r9	; 0x02
    101c:	89 82       	std	Y+1, r8	; 0x01
    101e:	44 ce       	rjmp	.-888    	; 0xca8 <updateNetworks+0x33e>
    1020:	88 23       	and	r24, r24
    1022:	79 f0       	breq	.+30     	; 0x1042 <updateNetworks+0x6d8>
    1024:	b4 e2       	ldi	r27, 0x24	; 36
    1026:	3b 9f       	mul	r19, r27
    1028:	a0 01       	movw	r20, r0
    102a:	11 24       	eor	r1, r1
    102c:	b2 01       	movw	r22, r4
    102e:	64 0f       	add	r22, r20
    1030:	75 1f       	adc	r23, r21
    1032:	a9 80       	ldd	r10, Y+1	; 0x01
    1034:	ba 80       	ldd	r11, Y+2	; 0x02
    1036:	4c 5e       	subi	r20, 0xEC	; 236
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	44 0d       	add	r20, r4
    103c:	55 1d       	adc	r21, r5
    103e:	d1 2c       	mov	r13, r1
    1040:	91 ce       	rjmp	.-734    	; 0xd64 <updateNetworks+0x3fa>
    1042:	2b 96       	adiw	r28, 0x0b	; 11
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
    105e:	bf 90       	pop	r11
    1060:	af 90       	pop	r10
    1062:	9f 90       	pop	r9
    1064:	8f 90       	pop	r8
    1066:	7f 90       	pop	r7
    1068:	6f 90       	pop	r6
    106a:	5f 90       	pop	r5
    106c:	4f 90       	pop	r4
    106e:	3f 90       	pop	r3
    1070:	2f 90       	pop	r2
    1072:	08 95       	ret

00001074 <handleMessages>:


uint8_t handleMessages(uint8_t UARTPort, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
    1074:	2f 92       	push	r2
    1076:	3f 92       	push	r3
    1078:	4f 92       	push	r4
    107a:	5f 92       	push	r5
    107c:	6f 92       	push	r6
    107e:	7f 92       	push	r7
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	c5 5a       	subi	r28, 0xA5	; 165
    109e:	d1 09       	sbc	r29, r1
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	7b 01       	movw	r14, r22
    10ac:	2a 01       	movw	r4, r20
    10ae:	49 01       	movw	r8, r18
    10b0:	68 01       	movw	r12, r16
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
    10b2:	6d b6       	in	r6, 0x3d	; 61
    10b4:	7e b6       	in	r7, 0x3e	; 62
uint8_t handleMessages(uint8_t UARTPort, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
	
	uint8_t msgType;
	
	
	if (UARTPort == 0){
    10b6:	81 11       	cpse	r24, r1
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <handleMessages+0x52>
		msgType = getChar(0);		// Message type is stored as the first byte
    10ba:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t sourceDSN[4];
	// Message that HUMPRO received over air
	
	
	if (msgType == 0x01){
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <handleMessages+0x50>
    10c2:	9c c1       	rjmp	.+824    	; 0x13fc <handleMessages+0x388>
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <handleMessages+0x6c>
		msgType = getChar(0);		// Message type is stored as the first byte
		
		
	}
	else{
		getChar(1);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		getChar(1);
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		msgType = getChar(1);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t sourceDSN[4];
	// Message that HUMPRO received over air
	
	
	if (msgType == 0x01){
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	09 f0       	breq	.+2      	; 0x10de <handleMessages+0x6a>
    10dc:	8f c1       	rjmp	.+798    	; 0x13fc <handleMessages+0x388>
    10de:	0d c1       	rjmp	.+538    	; 0x12fa <handleMessages+0x286>
		// [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte),
		//  msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
		
		if (UARTPort == 0){
    10e0:	2d b6       	in	r2, 0x3d	; 61
    10e2:	3e b6       	in	r3, 0x3e	; 62
			uint8_t deviceNumInPath = getChar(0) + 1;		// Increment to this device
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10ea:	55 24       	eor	r5, r5
    10ec:	53 94       	inc	r5
    10ee:	58 0e       	add	r5, r24
			uint8_t msgPathSize = getChar(0);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10f6:	98 2e       	mov	r9, r24
			uint8_t msgSize = getChar(0);
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10fe:	88 2e       	mov	r8, r24
			uint8_t msg[msgSize];
    1100:	0d b7       	in	r16, 0x3d	; 61
    1102:	1e b7       	in	r17, 0x3e	; 62
    1104:	08 1b       	sub	r16, r24
    1106:	11 09       	sbc	r17, r1
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	1e bf       	out	0x3e, r17	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0d bf       	out	0x3d, r16	; 61
    1112:	0f 5f       	subi	r16, 0xFF	; 255
    1114:	1f 4f       	sbci	r17, 0xFF	; 255
    1116:	c3 56       	subi	r28, 0x63	; 99
    1118:	df 4f       	sbci	r29, 0xFF	; 255
    111a:	19 83       	std	Y+1, r17	; 0x01
    111c:	08 83       	st	Y, r16
    111e:	cd 59       	subi	r28, 0x9D	; 157
    1120:	d0 40       	sbci	r29, 0x00	; 0
			uint8_t msgPath[msgPathSize*4];
    1122:	e9 2c       	mov	r14, r9
    1124:	f1 2c       	mov	r15, r1
    1126:	ee 0c       	add	r14, r14
    1128:	ff 1c       	adc	r15, r15
    112a:	ee 0c       	add	r14, r14
    112c:	ff 1c       	adc	r15, r15
    112e:	2d b7       	in	r18, 0x3d	; 61
    1130:	3e b7       	in	r19, 0x3e	; 62
    1132:	2e 19       	sub	r18, r14
    1134:	3f 09       	sbc	r19, r15
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	3e bf       	out	0x3e, r19	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	2d bf       	out	0x3d, r18	; 61
    1140:	0d b7       	in	r16, 0x3d	; 61
    1142:	1e b7       	in	r17, 0x3e	; 62
    1144:	0f 5f       	subi	r16, 0xFF	; 255
    1146:	1f 4f       	sbci	r17, 0xFF	; 255
    1148:	c1 56       	subi	r28, 0x61	; 97
    114a:	df 4f       	sbci	r29, 0xFF	; 255
    114c:	19 83       	std	Y+1, r17	; 0x01
    114e:	08 83       	st	Y, r16
    1150:	cf 59       	subi	r28, 0x9F	; 159
    1152:	d0 40       	sbci	r29, 0x00	; 0
    1154:	58 01       	movw	r10, r16
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
    1156:	1e 14       	cp	r1, r14
    1158:	1f 04       	cpc	r1, r15
    115a:	0c f0       	brlt	.+2      	; 0x115e <handleMessages+0xea>
    115c:	85 c4       	rjmp	.+2314   	; 0x1a68 <handleMessages+0x9f4>
    115e:	00 e0       	ldi	r16, 0x00	; 0
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	41 2c       	mov	r4, r1
				msgPath[i] = getChar(0);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    116a:	f5 01       	movw	r30, r10
    116c:	e0 0f       	add	r30, r16
    116e:	f1 1f       	adc	r31, r17
    1170:	80 83       	st	Z, r24
			uint8_t deviceNumInPath = getChar(0) + 1;		// Increment to this device
			uint8_t msgPathSize = getChar(0);
			uint8_t msgSize = getChar(0);
			uint8_t msg[msgSize];
			uint8_t msgPath[msgPathSize*4];
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
    1172:	43 94       	inc	r4
    1174:	04 2d       	mov	r16, r4
    1176:	10 e0       	ldi	r17, 0x00	; 0
    1178:	0e 15       	cp	r16, r14
    117a:	1f 05       	cpc	r17, r15
    117c:	9c f3       	brlt	.-26     	; 0x1164 <handleMessages+0xf0>
    117e:	74 c4       	rjmp	.+2280   	; 0x1a68 <handleMessages+0x9f4>
				msgPath[i] = getChar(0);
			}
			
			uint8_t destPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				destPhoneAdd[i] = getChar(0);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1186:	d8 01       	movw	r26, r16
    1188:	8d 93       	st	X+, r24
    118a:	8d 01       	movw	r16, r26
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
				msgPath[i] = getChar(0);
			}
			
			uint8_t destPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
    118c:	ea 16       	cp	r14, r26
    118e:	fb 06       	cpc	r15, r27
    1190:	b9 f7       	brne	.-18     	; 0x1180 <handleMessages+0x10c>
    1192:	8e 01       	movw	r16, r28
    1194:	0b 5f       	subi	r16, 0xFB	; 251
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	7e 01       	movw	r14, r28
    119a:	bb e0       	ldi	r27, 0x0B	; 11
    119c:	eb 0e       	add	r14, r27
    119e:	f1 1c       	adc	r15, r1
				destPhoneAdd[i] = getChar(0);
			}
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				srcPhoneAdd[i] = getChar(0);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    11a6:	f8 01       	movw	r30, r16
    11a8:	81 93       	st	Z+, r24
    11aa:	8f 01       	movw	r16, r30
			for (uint8_t i = 0; i < 6; i ++){
				destPhoneAdd[i] = getChar(0);
			}
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
    11ac:	ee 15       	cp	r30, r14
    11ae:	ff 05       	cpc	r31, r15
    11b0:	b9 f7       	brne	.-18     	; 0x11a0 <handleMessages+0x12c>
				srcPhoneAdd[i] = getChar(0);
			}
			for (uint8_t i = 0; i < msgSize; i++){
    11b2:	88 20       	and	r8, r8
    11b4:	c1 f0       	breq	.+48     	; 0x11e6 <handleMessages+0x172>
    11b6:	c3 56       	subi	r28, 0x63	; 99
    11b8:	df 4f       	sbci	r29, 0xFF	; 255
    11ba:	08 81       	ld	r16, Y
    11bc:	19 81       	ldd	r17, Y+1	; 0x01
    11be:	cd 59       	subi	r28, 0x9D	; 157
    11c0:	d0 40       	sbci	r29, 0x00	; 0
    11c2:	ee 24       	eor	r14, r14
    11c4:	ea 94       	dec	r14
    11c6:	e8 0c       	add	r14, r8
    11c8:	f1 2c       	mov	r15, r1
    11ca:	ff ef       	ldi	r31, 0xFF	; 255
    11cc:	ef 1a       	sub	r14, r31
    11ce:	ff 0a       	sbc	r15, r31
    11d0:	e0 0e       	add	r14, r16
    11d2:	f1 1e       	adc	r15, r17
				msg[i] = getChar(0);
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    11da:	d8 01       	movw	r26, r16
    11dc:	8d 93       	st	X+, r24
    11de:	8d 01       	movw	r16, r26
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				srcPhoneAdd[i] = getChar(0);
			}
			for (uint8_t i = 0; i < msgSize; i++){
    11e0:	ea 16       	cp	r14, r26
    11e2:	fb 06       	cpc	r15, r27
    11e4:	b9 f7       	brne	.-18     	; 0x11d4 <handleMessages+0x160>
				msg[i] = getChar(0);
			}
			
			// Seeing if the this device is the last in the path, if so send message data to esp to be transmitted to the phone
			if (deviceNumInPath == msgPathSize){
    11e6:	59 10       	cpse	r5, r9
    11e8:	2c c0       	rjmp	.+88     	; 0x1242 <handleMessages+0x1ce>
				uint8_t espMsg[] = {msgType,destPhoneAdd,srcPhoneAdd,msgSize,msg};
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	cf 56       	subi	r28, 0x6F	; 111
    11ee:	df 4f       	sbci	r29, 0xFF	; 255
    11f0:	88 83       	st	Y, r24
    11f2:	c1 59       	subi	r28, 0x91	; 145
    11f4:	d0 40       	sbci	r29, 0x00	; 0
    11f6:	ce 01       	movw	r24, r28
    11f8:	8b 57       	subi	r24, 0x7B	; 123
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	ce 56       	subi	r28, 0x6E	; 110
    11fe:	df 4f       	sbci	r29, 0xFF	; 255
    1200:	88 83       	st	Y, r24
    1202:	c2 59       	subi	r28, 0x92	; 146
    1204:	d0 40       	sbci	r29, 0x00	; 0
    1206:	80 58       	subi	r24, 0x80	; 128
    1208:	91 09       	sbc	r25, r1
    120a:	cd 56       	subi	r28, 0x6D	; 109
    120c:	df 4f       	sbci	r29, 0xFF	; 255
    120e:	88 83       	st	Y, r24
    1210:	c3 59       	subi	r28, 0x93	; 147
    1212:	d0 40       	sbci	r29, 0x00	; 0
    1214:	cc 56       	subi	r28, 0x6C	; 108
    1216:	df 4f       	sbci	r29, 0xFF	; 255
    1218:	88 82       	st	Y, r8
    121a:	c4 59       	subi	r28, 0x94	; 148
    121c:	d0 40       	sbci	r29, 0x00	; 0
    121e:	c3 56       	subi	r28, 0x63	; 99
    1220:	df 4f       	sbci	r29, 0xFF	; 255
    1222:	b8 81       	ld	r27, Y
    1224:	cd 59       	subi	r28, 0x9D	; 157
    1226:	d0 40       	sbci	r29, 0x00	; 0
    1228:	cb 56       	subi	r28, 0x6B	; 107
    122a:	df 4f       	sbci	r29, 0xFF	; 255
    122c:	b8 83       	st	Y, r27
    122e:	c5 59       	subi	r28, 0x95	; 149
    1230:	d0 40       	sbci	r29, 0x00	; 0
				TXWrite(espMsg,sizeof(espMsg),1);
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	65 e0       	ldi	r22, 0x05	; 5
    1238:	84 57       	subi	r24, 0x74	; 116
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1240:	56 c0       	rjmp	.+172    	; 0x12ee <handleMessages+0x27a>
			}
			
			// If not pass along the message to the next NUB device
			else{
				uint8_t msgHeader[] = {msgType,deviceNumInPath,msgPathSize,msgSize};
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	cf 56       	subi	r28, 0x6F	; 111
    1246:	df 4f       	sbci	r29, 0xFF	; 255
    1248:	88 83       	st	Y, r24
    124a:	c1 59       	subi	r28, 0x91	; 145
    124c:	d0 40       	sbci	r29, 0x00	; 0
    124e:	ce 56       	subi	r28, 0x6E	; 110
    1250:	df 4f       	sbci	r29, 0xFF	; 255
    1252:	58 82       	st	Y, r5
    1254:	c2 59       	subi	r28, 0x92	; 146
    1256:	d0 40       	sbci	r29, 0x00	; 0
    1258:	cd 56       	subi	r28, 0x6D	; 109
    125a:	df 4f       	sbci	r29, 0xFF	; 255
    125c:	98 82       	st	Y, r9
    125e:	c3 59       	subi	r28, 0x93	; 147
    1260:	d0 40       	sbci	r29, 0x00	; 0
    1262:	cc 56       	subi	r28, 0x6C	; 108
    1264:	df 4f       	sbci	r29, 0xFF	; 255
    1266:	88 82       	st	Y, r8
    1268:	c4 59       	subi	r28, 0x94	; 148
    126a:	d0 40       	sbci	r29, 0x00	; 0
				
				writeDestDSN(msgPath[deviceNumInPath + 1]);		// The next devices DSN
    126c:	c1 56       	subi	r28, 0x61	; 97
    126e:	df 4f       	sbci	r29, 0xFF	; 255
    1270:	e8 81       	ld	r30, Y
    1272:	f9 81       	ldd	r31, Y+1	; 0x01
    1274:	cf 59       	subi	r28, 0x9F	; 159
    1276:	d0 40       	sbci	r29, 0x00	; 0
    1278:	e5 0d       	add	r30, r5
    127a:	f1 1d       	adc	r31, r1
    127c:	81 81       	ldd	r24, Z+1	; 0x01
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeDestDSN>
				
				// Send [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte),
				//       msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
				
				TXWrite(msgHeader,sizeof(msgHeader),0);
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	64 e0       	ldi	r22, 0x04	; 4
    128a:	ce 01       	movw	r24, r28
    128c:	8f 56       	subi	r24, 0x6F	; 111
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				TXWrite(msgPath,msgPathSize*4,0);
    1294:	69 2d       	mov	r22, r9
    1296:	66 0f       	add	r22, r22
    1298:	66 0f       	add	r22, r22
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	c1 56       	subi	r28, 0x61	; 97
    12a0:	df 4f       	sbci	r29, 0xFF	; 255
    12a2:	88 81       	ld	r24, Y
    12a4:	99 81       	ldd	r25, Y+1	; 0x01
    12a6:	cf 59       	subi	r28, 0x9F	; 159
    12a8:	d0 40       	sbci	r29, 0x00	; 0
    12aa:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				TXWrite(destPhoneAdd,6,0);			// mac address
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	66 e0       	ldi	r22, 0x06	; 6
    12b4:	ce 01       	movw	r24, r28
    12b6:	8b 57       	subi	r24, 0x7B	; 123
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				TXWrite(srcPhoneAdd,6,0);			// mac address
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	66 e0       	ldi	r22, 0x06	; 6
    12c4:	ce 01       	movw	r24, r28
    12c6:	05 96       	adiw	r24, 0x05	; 5
    12c8:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				
				TXWrite(msg, msgSize,0);
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	68 2d       	mov	r22, r8
    12d2:	c3 56       	subi	r28, 0x63	; 99
    12d4:	df 4f       	sbci	r29, 0xFF	; 255
    12d6:	88 81       	ld	r24, Y
    12d8:	99 81       	ldd	r25, Y+1	; 0x01
    12da:	cd 59       	subi	r28, 0x9D	; 157
    12dc:	d0 40       	sbci	r29, 0x00	; 0
    12de:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				
				sendAck(myCons->myDSN,sourceDSN);
    12e2:	be 01       	movw	r22, r28
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	c6 01       	movw	r24, r12
    12ea:	0e 94 06 04 	call	0x80c	; 0x80c <sendAck>
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	3e be       	out	0x3e, r3	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	2d be       	out	0x3d, r2	; 61
    12f8:	ae c3       	rjmp	.+1884   	; 0x1a56 <handleMessages+0x9e2>
		}
		// If Message from esp
		else{
			// Format 0x02,0x00,msgType,msg length,dest mac, source mac, message
			//                         /Starting here from this point
			uint8_t msgLen = getChar(1);	// Just 1 byte for now
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1300:	58 2e       	mov	r5, r24
    1302:	5e 01       	movw	r10, r28
    1304:	e7 e9       	ldi	r30, 0x97	; 151
    1306:	ae 0e       	add	r10, r30
    1308:	b1 1c       	adc	r11, r1
    130a:	8e 01       	movw	r16, r28
    130c:	05 57       	subi	r16, 0x75	; 117
    130e:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* destDSN;
			uint8_t msgPath[3][4];
			uint8_t msgPathSize = 0;
			uint8_t* msgDataReturn;
			uint8_t msg[128];
			for (uint8_t i = 0; i < 12; i++){
    1310:	41 2c       	mov	r4, r1
				if (i < 6){
    1312:	f5 e0       	ldi	r31, 0x05	; 5
    1314:	f4 15       	cp	r31, r4
    1316:	30 f0       	brcs	.+12     	; 0x1324 <handleMessages+0x2b0>
					destAdd[i] = getChar(1);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    131e:	d5 01       	movw	r26, r10
    1320:	8c 93       	st	X, r24
    1322:	05 c0       	rjmp	.+10     	; 0x132e <handleMessages+0x2ba>
				}
				else{
					srcAdd[i-6] = getChar(1);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    132a:	f8 01       	movw	r30, r16
    132c:	80 83       	st	Z, r24
			uint8_t* destDSN;
			uint8_t msgPath[3][4];
			uint8_t msgPathSize = 0;
			uint8_t* msgDataReturn;
			uint8_t msg[128];
			for (uint8_t i = 0; i < 12; i++){
    132e:	43 94       	inc	r4
    1330:	ff ef       	ldi	r31, 0xFF	; 255
    1332:	af 1a       	sub	r10, r31
    1334:	bf 0a       	sbc	r11, r31
    1336:	0f 5f       	subi	r16, 0xFF	; 255
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	0f 2e       	mov	r0, r31
    133c:	fc e0       	ldi	r31, 0x0C	; 12
    133e:	2f 2e       	mov	r2, r31
    1340:	f0 2d       	mov	r31, r0
    1342:	42 10       	cpse	r4, r2
    1344:	e6 cf       	rjmp	.-52     	; 0x1312 <handleMessages+0x29e>
				}
				else{
					srcAdd[i-6] = getChar(1);
				}
			}
			for (uint8_t i = 0; i < (msgLen - 12); i++){
    1346:	a5 2c       	mov	r10, r5
    1348:	b1 2c       	mov	r11, r1
    134a:	0c e0       	ldi	r16, 0x0C	; 12
    134c:	a0 1a       	sub	r10, r16
    134e:	b1 08       	sbc	r11, r1
    1350:	1a 14       	cp	r1, r10
    1352:	1b 04       	cpc	r1, r11
    1354:	9c f4       	brge	.+38     	; 0x137c <handleMessages+0x308>
    1356:	00 e0       	ldi	r16, 0x00	; 0
    1358:	10 e0       	ldi	r17, 0x00	; 0
    135a:	41 2c       	mov	r4, r1
				msg[i] = getChar(1);
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1362:	e5 e0       	ldi	r30, 0x05	; 5
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	ec 0f       	add	r30, r28
    1368:	fd 1f       	adc	r31, r29
    136a:	e0 0f       	add	r30, r16
    136c:	f1 1f       	adc	r31, r17
    136e:	80 83       	st	Z, r24
				}
				else{
					srcAdd[i-6] = getChar(1);
				}
			}
			for (uint8_t i = 0; i < (msgLen - 12); i++){
    1370:	43 94       	inc	r4
    1372:	04 2d       	mov	r16, r4
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	0a 15       	cp	r16, r10
    1378:	1b 05       	cpc	r17, r11
    137a:	84 f3       	brlt	.-32     	; 0x135c <handleMessages+0x2e8>
				msg[i] = getChar(1);
			}
			
			
			destDSN = getDestPhoneAdd(destAdd,myCons->myDSN,networkPtr2);
    137c:	a4 01       	movw	r20, r8
    137e:	b6 01       	movw	r22, r12
    1380:	ce 01       	movw	r24, r28
    1382:	89 56       	subi	r24, 0x69	; 105
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	0e 94 ef 01 	call	0x3de	; 0x3de <getDestPhoneAdd>
			msgDataReturn= buildMsgPath(destDSN,networkPtr,myCons);
    138a:	a6 01       	movw	r20, r12
    138c:	b7 01       	movw	r22, r14
    138e:	0e 94 9d 02 	call	0x53a	; 0x53a <buildMsgPath>
    1392:	bc 01       	movw	r22, r24
			msgPathSize = *(msgDataReturn + 12);
    1394:	dc 01       	movw	r26, r24
    1396:	1c 96       	adiw	r26, 0x0c	; 12
    1398:	dc 90       	ld	r13, X
    139a:	fc 01       	movw	r30, r24
    139c:	ae 01       	movw	r20, r28
    139e:	4b 57       	subi	r20, 0x7B	; 123
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	8c 01       	movw	r16, r24
    13a4:	04 5f       	subi	r16, 0xF4	; 244
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	0b c0       	rjmp	.+22     	; 0x13c0 <handleMessages+0x34c>
			for (uint8_t i= 0; i < 3; i++){
				for (uint8_t j= 0; j <4; j++){
					
					msgPath[i][j] = *(msgDataReturn + i*4 + j);
    13aa:	91 91       	ld	r25, Z+
    13ac:	9d 93       	st	X+, r25
			
			destDSN = getDestPhoneAdd(destAdd,myCons->myDSN,networkPtr2);
			msgDataReturn= buildMsgPath(destDSN,networkPtr,myCons);
			msgPathSize = *(msgDataReturn + 12);
			for (uint8_t i= 0; i < 3; i++){
				for (uint8_t j= 0; j <4; j++){
    13ae:	2e 17       	cp	r18, r30
    13b0:	3f 07       	cpc	r19, r31
    13b2:	d9 f7       	brne	.-10     	; 0x13aa <handleMessages+0x336>
    13b4:	4c 5f       	subi	r20, 0xFC	; 252
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255
    13b8:	f9 01       	movw	r30, r18
			
			
			destDSN = getDestPhoneAdd(destAdd,myCons->myDSN,networkPtr2);
			msgDataReturn= buildMsgPath(destDSN,networkPtr,myCons);
			msgPathSize = *(msgDataReturn + 12);
			for (uint8_t i= 0; i < 3; i++){
    13ba:	20 17       	cp	r18, r16
    13bc:	31 07       	cpc	r19, r17
    13be:	29 f0       	breq	.+10     	; 0x13ca <handleMessages+0x356>
    13c0:	9f 01       	movw	r18, r30
    13c2:	2c 5f       	subi	r18, 0xFC	; 252
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
				}
				else{
					srcAdd[i-6] = getChar(1);
				}
			}
			for (uint8_t i = 0; i < (msgLen - 12); i++){
    13c6:	da 01       	movw	r26, r20
    13c8:	f0 cf       	rjmp	.-32     	; 0x13aa <handleMessages+0x336>
				for (uint8_t j= 0; j <4; j++){
					
					msgPath[i][j] = *(msgDataReturn + i*4 + j);
				}
			}
			free(msgDataReturn);
    13ca:	cb 01       	movw	r24, r22
    13cc:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <free>
			sendMessageSimple(msgPathSize,0,msgPath,destAdd,srcAdd,msg,msgLen-12);
    13d0:	0f 2e       	mov	r0, r31
    13d2:	f4 ef       	ldi	r31, 0xF4	; 244
    13d4:	cf 2e       	mov	r12, r31
    13d6:	f0 2d       	mov	r31, r0
    13d8:	c5 0c       	add	r12, r5
    13da:	fe 01       	movw	r30, r28
    13dc:	35 96       	adiw	r30, 0x05	; 5
    13de:	7f 01       	movw	r14, r30
    13e0:	8e 01       	movw	r16, r28
    13e2:	0f 56       	subi	r16, 0x6F	; 111
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	9e 01       	movw	r18, r28
    13e8:	29 56       	subi	r18, 0x69	; 105
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	ae 01       	movw	r20, r28
    13ee:	4b 57       	subi	r20, 0x7B	; 123
    13f0:	5f 4f       	sbci	r21, 0xFF	; 255
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	8d 2d       	mov	r24, r13
    13f6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sendMessageSimple>
    13fa:	2d c3       	rjmp	.+1626   	; 0x1a56 <handleMessages+0x9e2>
		}
		
	}
	if (msgType == 0x03){												// Network adjustment
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	09 f0       	breq	.+2      	; 0x1402 <handleMessages+0x38e>
    1400:	40 c0       	rjmp	.+128    	; 0x1482 <handleMessages+0x40e>
		
		sourceDSN[0] = (uint8_t) getChar(0);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1408:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = (uint8_t) getChar(0);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1410:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = (uint8_t) getChar(0);
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1418:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = (uint8_t) getChar(0);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1420:	8c 83       	std	Y+4, r24	; 0x04
		uint16_t networkSize = getChar(0);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1428:	a8 2e       	mov	r10, r24
		uint8_t newCon = getChar(0);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		
		// Received message format: {msgType,myDSN[0],myDSN[1],myDSN[2],myDSN[3],networkSize,newCon,networkPtr};
		
		uint8_t sendToNeighbors;
		
		sendToNeighbors = updateNetworks(networkPtr,sizeOfNetwork,networkPtr2,myCons,newCon);
    1430:	08 2f       	mov	r16, r24
    1432:	96 01       	movw	r18, r12
    1434:	a4 01       	movw	r20, r8
    1436:	b2 01       	movw	r22, r4
    1438:	c7 01       	movw	r24, r14
    143a:	0e 94 b5 04 	call	0x96a	; 0x96a <updateNetworks>
		

		// If network has been updated send to connected devices
		if (sendToNeighbors == 1){
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	09 f0       	breq	.+2      	; 0x1444 <handleMessages+0x3d0>
    1442:	0a c3       	rjmp	.+1556   	; 0x1a58 <handleMessages+0x9e4>
			
			
			for (uint8_t deviceNum = 0; deviceNum < myCons->myNumOfNubCon; deviceNum ++){
    1444:	d6 01       	movw	r26, r12
    1446:	14 96       	adiw	r26, 0x04	; 4
    1448:	8c 91       	ld	r24, X
    144a:	88 23       	and	r24, r24
    144c:	09 f4       	brne	.+2      	; 0x1450 <handleMessages+0x3dc>
    144e:	06 c3       	rjmp	.+1548   	; 0x1a5c <handleMessages+0x9e8>
    1450:	10 e0       	ldi	r17, 0x00	; 0
				sendNetworkData(networkPtr,networkSize,myCons,myCons->myNubConnections[deviceNum],0);
    1452:	b1 2c       	mov	r11, r1
    1454:	21 2f       	mov	r18, r17
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	2a 5f       	subi	r18, 0xFA	; 250
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	2c 0d       	add	r18, r12
    1466:	3d 1d       	adc	r19, r13
    1468:	00 e0       	ldi	r16, 0x00	; 0
    146a:	a6 01       	movw	r20, r12
    146c:	b5 01       	movw	r22, r10
    146e:	c7 01       	movw	r24, r14
    1470:	0e 94 cc 03 	call	0x798	; 0x798 <sendNetworkData>

		// If network has been updated send to connected devices
		if (sendToNeighbors == 1){
			
			
			for (uint8_t deviceNum = 0; deviceNum < myCons->myNumOfNubCon; deviceNum ++){
    1474:	1f 5f       	subi	r17, 0xFF	; 255
    1476:	f6 01       	movw	r30, r12
    1478:	84 81       	ldd	r24, Z+4	; 0x04
    147a:	18 17       	cp	r17, r24
    147c:	58 f3       	brcs	.-42     	; 0x1454 <handleMessages+0x3e0>
				sendNetworkData(networkPtr,networkSize,myCons,myCons->myNubConnections[deviceNum],0);
			}
		}
		
		return 3;
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	12 c3       	rjmp	.+1572   	; 0x1aa6 <handleMessages+0xa32>
		
	}
	
	// Acknowledgment received
	if(msgType == 0x04){
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	49 f4       	brne	.+18     	; 0x1498 <handleMessages+0x424>
		TXWrite(0x16,1,0);
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	86 e1       	ldi	r24, 0x16	; 22
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
		return 0x04;													// Will change later when checking connections
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	07 c3       	rjmp	.+1550   	; 0x1aa6 <handleMessages+0xa32>
	}
	
	// Trying to connect
	if(msgType == 0x05){
    1498:	85 30       	cpi	r24, 0x05	; 5
    149a:	09 f0       	breq	.+2      	; 0x149e <handleMessages+0x42a>
    149c:	d3 c2       	rjmp	.+1446   	; 0x1a44 <handleMessages+0x9d0>
		
		// Just sent myData, add to structure and send structure
		uint8_t sizeOfMessage;
		uint8_t deviceFound = 0;
		sizeOfMessage = getChar(0);
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    14a4:	cd 55       	subi	r28, 0x5D	; 93
    14a6:	df 4f       	sbci	r29, 0xFF	; 255
    14a8:	88 83       	st	Y, r24
    14aa:	c3 5a       	subi	r28, 0xA3	; 163
    14ac:	d0 40       	sbci	r29, 0x00	; 0
		sourceDSN[0] = getChar(0);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    14b4:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = getChar(0);
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    14bc:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = getChar(0);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    14c4:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = getChar(0);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    14cc:	8c 83       	std	Y+4, r24	; 0x04
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) && (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
    14ce:	d7 01       	movw	r26, r14
    14d0:	8c 91       	ld	r24, X
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <handleMessages+0x464>
    14d6:	c4 c2       	rjmp	.+1416   	; 0x1a60 <handleMessages+0x9ec>
    14d8:	f6 01       	movw	r30, r12
    14da:	94 81       	ldd	r25, Z+4	; 0x04
    14dc:	93 30       	cpi	r25, 0x03	; 3
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <handleMessages+0x46e>
    14e0:	c1 c2       	rjmp	.+1410   	; 0x1a64 <handleMessages+0x9f0>
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    14e2:	81 11       	cpse	r24, r1
    14e4:	39 c0       	rjmp	.+114    	; 0x1558 <handleMessages+0x4e4>
    14e6:	91 c0       	rjmp	.+290    	; 0x160a <handleMessages+0x596>
					}
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
    14e8:	c1 56       	subi	r28, 0x61	; 97
    14ea:	df 4f       	sbci	r29, 0xFF	; 255
    14ec:	08 81       	ld	r16, Y
    14ee:	cf 59       	subi	r28, 0x9F	; 159
    14f0:	d0 40       	sbci	r29, 0x00	; 0
    14f2:	01 30       	cpi	r16, 0x01	; 1
    14f4:	59 f5       	brne	.+86     	; 0x154c <handleMessages+0x4d8>
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    14f6:	cf 55       	subi	r28, 0x5F	; 95
    14f8:	df 4f       	sbci	r29, 0xFF	; 255
    14fa:	08 81       	ld	r16, Y
    14fc:	19 81       	ldd	r17, Y+1	; 0x01
    14fe:	c1 5a       	subi	r28, 0xA1	; 161
    1500:	d0 40       	sbci	r29, 0x00	; 0
    1502:	01 2b       	or	r16, r17
    1504:	19 f1       	breq	.+70     	; 0x154c <handleMessages+0x4d8>
						*(networkPtr2 + 1 + DEVICESIZE*deviceNum +  j*sizeof(uint8_t) + 4) = getChar(0);
    1506:	aa 0c       	add	r10, r10
    1508:	bb 1c       	adc	r11, r11
    150a:	c5 01       	movw	r24, r10
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	a8 0e       	add	r10, r24
    151a:	b9 1e       	adc	r11, r25
    151c:	85 01       	movw	r16, r10
    151e:	09 5e       	subi	r16, 0xE9	; 233
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	08 0d       	add	r16, r8
    1524:	19 1d       	adc	r17, r9
    1526:	cc 55       	subi	r28, 0x5C	; 92
    1528:	df 4f       	sbci	r29, 0xFF	; 255
    152a:	28 81       	ld	r18, Y
    152c:	39 81       	ldd	r19, Y+1	; 0x01
    152e:	c4 5a       	subi	r28, 0xA4	; 164
    1530:	d0 40       	sbci	r29, 0x00	; 0
    1532:	a2 0e       	add	r10, r18
    1534:	b3 1e       	adc	r11, r19
    1536:	a8 0c       	add	r10, r8
    1538:	b9 1c       	adc	r11, r9
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1540:	d8 01       	movw	r26, r16
    1542:	8d 93       	st	X+, r24
    1544:	8d 01       	movw	r16, r26
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    1546:	aa 15       	cp	r26, r10
    1548:	bb 05       	cpc	r27, r11
    154a:	b9 f7       	brne	.-18     	; 0x153a <handleMessages+0x4c6>
		sourceDSN[2] = getChar(0);
		sourceDSN[3] = getChar(0);
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) && (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    154c:	33 94       	inc	r3
    154e:	f7 01       	movw	r30, r14
    1550:	80 81       	ld	r24, Z
    1552:	38 16       	cp	r3, r24
    1554:	00 f1       	brcs	.+64     	; 0x1596 <handleMessages+0x522>
    1556:	52 c0       	rjmp	.+164    	; 0x15fc <handleMessages+0x588>
    1558:	31 2c       	mov	r3, r1
    155a:	c1 56       	subi	r28, 0x61	; 97
    155c:	df 4f       	sbci	r29, 0xFF	; 255
    155e:	18 82       	st	Y, r1
    1560:	cf 59       	subi	r28, 0x9F	; 159
    1562:	d0 40       	sbci	r29, 0x00	; 0
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1564:	0f 2e       	mov	r0, r31
    1566:	f4 e2       	ldi	r31, 0x24	; 36
    1568:	2f 2e       	mov	r2, r31
    156a:	f0 2d       	mov	r31, r0
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    156c:	cd 55       	subi	r28, 0x5D	; 93
    156e:	df 4f       	sbci	r29, 0xFF	; 255
    1570:	18 81       	ld	r17, Y
    1572:	c3 5a       	subi	r28, 0xA3	; 163
    1574:	d0 40       	sbci	r29, 0x00	; 0
    1576:	01 2f       	mov	r16, r17
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	cf 55       	subi	r28, 0x5F	; 95
    157c:	df 4f       	sbci	r29, 0xFF	; 255
    157e:	19 83       	std	Y+1, r17	; 0x01
    1580:	08 83       	st	Y, r16
    1582:	c1 5a       	subi	r28, 0xA1	; 161
    1584:	d0 40       	sbci	r29, 0x00	; 0
    1586:	09 5e       	subi	r16, 0xE9	; 233
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	cc 55       	subi	r28, 0x5C	; 92
    158c:	df 4f       	sbci	r29, 0xFF	; 255
    158e:	19 83       	std	Y+1, r17	; 0x01
    1590:	08 83       	st	Y, r16
    1592:	c4 5a       	subi	r28, 0xA4	; 164
    1594:	d0 40       	sbci	r29, 0x00	; 0
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) && (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1596:	a3 2c       	mov	r10, r3
    1598:	b1 2c       	mov	r11, r1
    159a:	99 81       	ldd	r25, Y+1	; 0x01
    159c:	f7 01       	movw	r30, r14
    159e:	23 9c       	mul	r2, r3
    15a0:	e0 0d       	add	r30, r0
    15a2:	f1 1d       	adc	r31, r1
    15a4:	11 24       	eor	r1, r1
    15a6:	81 81       	ldd	r24, Z+1	; 0x01
    15a8:	98 13       	cpse	r25, r24
    15aa:	9e cf       	rjmp	.-196    	; 0x14e8 <handleMessages+0x474>
    15ac:	2a 9c       	mul	r2, r10
    15ae:	f0 01       	movw	r30, r0
    15b0:	2b 9c       	mul	r2, r11
    15b2:	f0 0d       	add	r31, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	ee 0d       	add	r30, r14
    15b8:	ff 1d       	adc	r31, r15
    15ba:	92 81       	ldd	r25, Z+2	; 0x02
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	98 13       	cpse	r25, r24
    15c0:	93 cf       	rjmp	.-218    	; 0x14e8 <handleMessages+0x474>
    15c2:	2a 9c       	mul	r2, r10
    15c4:	f0 01       	movw	r30, r0
    15c6:	2b 9c       	mul	r2, r11
    15c8:	f0 0d       	add	r31, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	ee 0d       	add	r30, r14
    15ce:	ff 1d       	adc	r31, r15
    15d0:	93 81       	ldd	r25, Z+3	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	98 13       	cpse	r25, r24
    15d6:	88 cf       	rjmp	.-240    	; 0x14e8 <handleMessages+0x474>
    15d8:	2a 9c       	mul	r2, r10
    15da:	f0 01       	movw	r30, r0
    15dc:	2b 9c       	mul	r2, r11
    15de:	f0 0d       	add	r31, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	ee 0d       	add	r30, r14
    15e4:	ff 1d       	adc	r31, r15
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	84 81       	ldd	r24, Z+4	; 0x04
    15ea:	98 13       	cpse	r25, r24
    15ec:	7d cf       	rjmp	.-262    	; 0x14e8 <handleMessages+0x474>
    15ee:	01 e0       	ldi	r16, 0x01	; 1
    15f0:	c1 56       	subi	r28, 0x61	; 97
    15f2:	df 4f       	sbci	r29, 0xFF	; 255
    15f4:	08 83       	st	Y, r16
    15f6:	cf 59       	subi	r28, 0x9F	; 159
    15f8:	d0 40       	sbci	r29, 0x00	; 0
    15fa:	7d cf       	rjmp	.-262    	; 0x14f6 <handleMessages+0x482>
					}
					
				}
			}
			// Adding device data to the next empty place in the network
			if (deviceFound == 0){
    15fc:	c1 56       	subi	r28, 0x61	; 97
    15fe:	df 4f       	sbci	r29, 0xFF	; 255
    1600:	18 81       	ld	r17, Y
    1602:	cf 59       	subi	r28, 0x9F	; 159
    1604:	d0 40       	sbci	r29, 0x00	; 0
    1606:	11 11       	cpse	r17, r1
    1608:	a3 c0       	rjmp	.+326    	; 0x1750 <handleMessages+0x6dc>
    160a:	2d b6       	in	r2, 0x3d	; 61
    160c:	3e b6       	in	r3, 0x3e	; 62
    160e:	c3 56       	subi	r28, 0x63	; 99
    1610:	df 4f       	sbci	r29, 0xFF	; 255
    1612:	39 82       	std	Y+1, r3	; 0x01
    1614:	28 82       	st	Y, r2
    1616:	cd 59       	subi	r28, 0x9D	; 157
    1618:	d0 40       	sbci	r29, 0x00	; 0
				uint8_t message[sizeOfMessage];
    161a:	cd 55       	subi	r28, 0x5D	; 93
    161c:	df 4f       	sbci	r29, 0xFF	; 255
    161e:	08 81       	ld	r16, Y
    1620:	c3 5a       	subi	r28, 0xA3	; 163
    1622:	d0 40       	sbci	r29, 0x00	; 0
    1624:	20 2e       	mov	r2, r16
    1626:	31 2c       	mov	r3, r1
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	fc 01       	movw	r30, r24
    1630:	ee 0f       	add	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	ee 0f       	add	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	8e 0f       	add	r24, r30
    163e:	9f 1f       	adc	r25, r31
    1640:	f4 01       	movw	r30, r8
    1642:	e8 0f       	add	r30, r24
    1644:	f9 1f       	adc	r31, r25
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	83 8b       	std	Z+19, r24	; 0x13
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
    164a:	d7 01       	movw	r26, r14
    164c:	8c 91       	ld	r24, X
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	fc 01       	movw	r30, r24
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	8e 0f       	add	r24, r30
    1664:	9f 1f       	adc	r25, r31
    1666:	f4 01       	movw	r30, r8
    1668:	e8 0f       	add	r30, r24
    166a:	f9 1f       	adc	r31, r25
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	84 8b       	std	Z+20, r24	; 0x14
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
    1670:	8c 91       	ld	r24, X
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	fc 01       	movw	r30, r24
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	8e 0f       	add	r24, r30
    1688:	9f 1f       	adc	r25, r31
    168a:	f4 01       	movw	r30, r8
    168c:	e8 0f       	add	r30, r24
    168e:	f9 1f       	adc	r31, r25
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	85 8b       	std	Z+21, r24	; 0x15
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
    1694:	8c 91       	ld	r24, X
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	fc 01       	movw	r30, r24
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	8e 0f       	add	r24, r30
    16ac:	9f 1f       	adc	r25, r31
    16ae:	f4 01       	movw	r30, r8
    16b0:	e8 0f       	add	r30, r24
    16b2:	f9 1f       	adc	r31, r25
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	86 8b       	std	Z+22, r24	; 0x16
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    16b8:	21 14       	cp	r2, r1
    16ba:	31 04       	cpc	r3, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <handleMessages+0x64c>
    16be:	dc c1       	rjmp	.+952    	; 0x1a78 <handleMessages+0xa04>
    16c0:	a1 2c       	mov	r10, r1
    16c2:	b1 2c       	mov	r11, r1
    16c4:	e3 ec       	ldi	r30, 0xC3	; 195
    16c6:	f9 e0       	ldi	r31, 0x09	; 9
    16c8:	31 97       	sbiw	r30, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <handleMessages+0x654>
    16cc:	00 c0       	rjmp	.+0      	; 0x16ce <handleMessages+0x65a>
    16ce:	00 00       	nop
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
    16d0:	d7 01       	movw	r26, r14
    16d2:	0c 91       	ld	r16, X
    16d4:	10 e0       	ldi	r17, 0x00	; 0
    16d6:	00 0f       	add	r16, r16
    16d8:	11 1f       	adc	r17, r17
    16da:	c8 01       	movw	r24, r16
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	08 0f       	add	r16, r24
    16ea:	19 1f       	adc	r17, r25
    16ec:	09 5e       	subi	r16, 0xE9	; 233
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
    16f0:	0a 0d       	add	r16, r10
    16f2:	1b 1d       	adc	r17, r11
    16f4:	08 0d       	add	r16, r8
    16f6:	19 1d       	adc	r17, r9
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    16fe:	f8 01       	movw	r30, r16
    1700:	80 83       	st	Z, r24
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    1702:	ff ef       	ldi	r31, 0xFF	; 255
    1704:	af 1a       	sub	r10, r31
    1706:	bf 0a       	sbc	r11, r31
    1708:	2a 14       	cp	r2, r10
    170a:	3b 04       	cpc	r3, r11
    170c:	d9 f6       	brne	.-74     	; 0x16c4 <handleMessages+0x650>
    170e:	b4 c1       	rjmp	.+872    	; 0x1a78 <handleMessages+0xa04>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] =  myCons->myDSN[j];
    1710:	6d 91       	ld	r22, X+
    1712:	f9 01       	movw	r30, r18
    1714:	70 81       	ld	r23, Z
    1716:	fa 01       	movw	r30, r20
    1718:	04 e0       	ldi	r16, 0x04	; 4
    171a:	70 9f       	mul	r23, r16
    171c:	e0 0d       	add	r30, r0
    171e:	f1 1d       	adc	r31, r1
    1720:	11 24       	eor	r1, r1
    1722:	ee 0d       	add	r30, r14
    1724:	ff 1d       	adc	r31, r15
    1726:	e8 0f       	add	r30, r24
    1728:	f9 1f       	adc	r31, r25
    172a:	67 83       	std	Z+7, r22	; 0x07
    172c:	01 96       	adiw	r24, 0x01	; 1
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	91 05       	cpc	r25, r1
    1732:	71 f7       	brne	.-36     	; 0x1710 <handleMessages+0x69c>
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] =  myCons->myDSN[j];
				}
				networkPtr->numOfDevices++;
    1734:	1f 5f       	subi	r17, 0xFF	; 255
    1736:	d7 01       	movw	r26, r14
    1738:	1c 93       	st	X, r17
    173a:	c3 56       	subi	r28, 0x63	; 99
    173c:	df 4f       	sbci	r29, 0xFF	; 255
    173e:	28 80       	ld	r2, Y
    1740:	39 80       	ldd	r3, Y+1	; 0x01
    1742:	cd 59       	subi	r28, 0x9D	; 157
    1744:	d0 40       	sbci	r29, 0x00	; 0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	3e be       	out	0x3e, r3	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	2d be       	out	0x3d, r2	; 61
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    1750:	d7 01       	movw	r26, r14
    1752:	bc 90       	ld	r11, X
    1754:	bb 20       	and	r11, r11
    1756:	09 f4       	brne	.+2      	; 0x175a <handleMessages+0x6e6>
    1758:	6a c1       	rjmp	.+724    	; 0x1a2e <handleMessages+0x9ba>
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){		// Searching for source dsn in network list
    175a:	99 80       	ldd	r9, Y+1	; 0x01
    175c:	b7 01       	movw	r22, r14
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	00 e0       	ldi	r16, 0x00	; 0
    1764:	a1 2c       	mov	r10, r1
    1766:	0f 2e       	mov	r0, r31
    1768:	f4 e2       	ldi	r31, 0x24	; 36
    176a:	8f 2e       	mov	r8, r31
    176c:	f0 2d       	mov	r31, r0
						break;
						}
					if (i >= 3){
						deviceFound = 1;	//Should always be true
    176e:	33 24       	eor	r3, r3
    1770:	33 94       	inc	r3
    1772:	4f c1       	rjmp	.+670    	; 0x1a12 <handleMessages+0x99e>
    1774:	a3 2c       	mov	r10, r3
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){		// Searching for source dsn in network list
    1776:	81 2f       	mov	r24, r17
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	ec 0f       	add	r30, r28
    1780:	fd 1f       	adc	r31, r29
    1782:	e8 0f       	add	r30, r24
    1784:	f9 1f       	adc	r31, r25
    1786:	1f 5f       	subi	r17, 0xFF	; 255
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	20 80       	ld	r2, Z
    178e:	fc 01       	movw	r30, r24
    1790:	81 81       	ldd	r24, Z+1	; 0x01
    1792:	28 12       	cpse	r2, r24
    1794:	07 c0       	rjmp	.+14     	; 0x17a4 <handleMessages+0x730>
						break;
						}
					if (i >= 3){
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	81 0f       	add	r24, r17
    179a:	83 30       	cpi	r24, 0x03	; 3
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <handleMessages+0x72c>
    179e:	7b c1       	rjmp	.+758    	; 0x1a96 <handleMessages+0xa22>
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
    17a0:	14 30       	cpi	r17, 0x04	; 4
    17a2:	48 f3       	brcs	.-46     	; 0x1776 <handleMessages+0x702>
					if (i >= 3){
						deviceFound = 1;	//Should always be true
					}
				}
				
				if (deviceFound == 1){
    17a4:	f1 e0       	ldi	r31, 0x01	; 1
    17a6:	af 12       	cpse	r10, r31
    17a8:	2e c1       	rjmp	.+604    	; 0x1a06 <handleMessages+0x992>
					deviceFound = 0;	// Now searching for local DSN in connecting device 
					for (uint8_t deviceNubCon = 0; deviceNubCon < networkPtr->device[deviceNum].numOfNubCon; deviceNubCon++){
    17aa:	20 2e       	mov	r2, r16
    17ac:	31 2c       	mov	r3, r1
    17ae:	c3 56       	subi	r28, 0x63	; 99
    17b0:	df 4f       	sbci	r29, 0xFF	; 255
    17b2:	39 82       	std	Y+1, r3	; 0x01
    17b4:	28 82       	st	Y, r2
    17b6:	cd 59       	subi	r28, 0x9D	; 157
    17b8:	d0 40       	sbci	r29, 0x00	; 0
    17ba:	f7 01       	movw	r30, r14
    17bc:	14 e2       	ldi	r17, 0x24	; 36
    17be:	01 9f       	mul	r16, r17
    17c0:	e0 0d       	add	r30, r0
    17c2:	f1 1d       	adc	r31, r1
    17c4:	11 24       	eor	r1, r1
    17c6:	35 81       	ldd	r19, Z+5	; 0x05
    17c8:	33 23       	and	r19, r19
    17ca:	49 f1       	breq	.+82     	; 0x181e <handleMessages+0x7aa>
						for (uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[deviceNum].nubConnections[deviceNubCon][i] ){
    17cc:	d6 01       	movw	r26, r12
    17ce:	4c 91       	ld	r20, X
    17d0:	f7 01       	movw	r30, r14
    17d2:	b4 e2       	ldi	r27, 0x24	; 36
    17d4:	0b 9f       	mul	r16, r27
    17d6:	e0 0d       	add	r30, r0
    17d8:	f1 1d       	adc	r31, r1
    17da:	11 24       	eor	r1, r1
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	11 e0       	ldi	r17, 0x01	; 1
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <handleMessages+0x77a>
    17e4:	51 2f       	mov	r21, r17
					}
				}
				
				if (deviceFound == 1){
					deviceFound = 0;	// Now searching for local DSN in connecting device 
					for (uint8_t deviceNubCon = 0; deviceNubCon < networkPtr->device[deviceNum].numOfNubCon; deviceNubCon++){
    17e6:	8f 5f       	subi	r24, 0xFF	; 255
    17e8:	34 96       	adiw	r30, 0x04	; 4
    17ea:	83 17       	cp	r24, r19
    17ec:	b1 f0       	breq	.+44     	; 0x181a <handleMessages+0x7a6>
						for (uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[deviceNum].nubConnections[deviceNubCon][i] ){
    17ee:	97 81       	ldd	r25, Z+7	; 0x07
    17f0:	49 13       	cpse	r20, r25
    17f2:	f9 cf       	rjmp	.-14     	; 0x17e6 <handleMessages+0x772>
    17f4:	d6 01       	movw	r26, r12
    17f6:	11 96       	adiw	r26, 0x01	; 1
    17f8:	2c 91       	ld	r18, X
    17fa:	11 97       	sbiw	r26, 0x01	; 1
    17fc:	90 85       	ldd	r25, Z+8	; 0x08
    17fe:	29 13       	cpse	r18, r25
    1800:	f2 cf       	rjmp	.-28     	; 0x17e6 <handleMessages+0x772>
    1802:	21 85       	ldd	r18, Z+9	; 0x09
    1804:	12 96       	adiw	r26, 0x02	; 2
    1806:	9c 91       	ld	r25, X
    1808:	12 97       	sbiw	r26, 0x02	; 2
    180a:	29 13       	cpse	r18, r25
    180c:	ec cf       	rjmp	.-40     	; 0x17e6 <handleMessages+0x772>
    180e:	22 85       	ldd	r18, Z+10	; 0x0a
    1810:	13 96       	adiw	r26, 0x03	; 3
    1812:	9c 91       	ld	r25, X
    1814:	29 17       	cp	r18, r25
    1816:	31 f3       	breq	.-52     	; 0x17e4 <handleMessages+0x770>
    1818:	e6 cf       	rjmp	.-52     	; 0x17e6 <handleMessages+0x772>
								deviceFound = 1;
							}
						}
					}
					// If Local nub is not in connecting nub list
					if (deviceFound == 0){
    181a:	51 11       	cpse	r21, r1
    181c:	db c0       	rjmp	.+438    	; 0x19d4 <handleMessages+0x960>
    181e:	96 01       	movw	r18, r12
    1820:	de 01       	movw	r26, r28
    1822:	11 96       	adiw	r26, 0x01	; 1
				
				if (deviceFound == 1){
					deviceFound = 0;	// Now searching for local DSN in connecting device 
					for (uint8_t deviceNubCon = 0; deviceNubCon < networkPtr->device[deviceNum].numOfNubCon; deviceNubCon++){
						for (uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[deviceNum].nubConnections[deviceNubCon][i] ){
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
					}
					// If Local nub is not in connecting nub list
					if (deviceFound == 0){
						
						for (uint8_t i = 0; i < 4; i++){
							networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
    1828:	44 e2       	ldi	r20, 0x24	; 36
    182a:	c3 56       	subi	r28, 0x63	; 99
    182c:	df 4f       	sbci	r29, 0xFF	; 255
    182e:	e8 81       	ld	r30, Y
    1830:	f9 81       	ldd	r31, Y+1	; 0x01
    1832:	cd 59       	subi	r28, 0x9D	; 157
    1834:	d0 40       	sbci	r29, 0x00	; 0
    1836:	4e 9f       	mul	r20, r30
    1838:	80 01       	movw	r16, r0
    183a:	4f 9f       	mul	r20, r31
    183c:	10 0d       	add	r17, r0
    183e:	11 24       	eor	r1, r1
    1840:	a7 01       	movw	r20, r14
    1842:	40 0f       	add	r20, r16
    1844:	51 1f       	adc	r21, r17
    1846:	fa 01       	movw	r30, r20
    1848:	35 96       	adiw	r30, 0x05	; 5
    184a:	c1 56       	subi	r28, 0x61	; 97
    184c:	df 4f       	sbci	r29, 0xFF	; 255
    184e:	f9 83       	std	Y+1, r31	; 0x01
    1850:	e8 83       	st	Y, r30
    1852:	cf 59       	subi	r28, 0x9F	; 159
    1854:	d0 40       	sbci	r29, 0x00	; 0
    1856:	f9 01       	movw	r30, r18
    1858:	b1 90       	ld	r11, Z+
    185a:	9f 01       	movw	r18, r30
    185c:	c1 56       	subi	r28, 0x61	; 97
    185e:	df 4f       	sbci	r29, 0xFF	; 255
    1860:	e8 81       	ld	r30, Y
    1862:	f9 81       	ldd	r31, Y+1	; 0x01
    1864:	cf 59       	subi	r28, 0x9F	; 159
    1866:	d0 40       	sbci	r29, 0x00	; 0
    1868:	50 81       	ld	r21, Z
    186a:	f8 01       	movw	r30, r16
    186c:	44 e0       	ldi	r20, 0x04	; 4
    186e:	54 9f       	mul	r21, r20
    1870:	e0 0d       	add	r30, r0
    1872:	f1 1d       	adc	r31, r1
    1874:	11 24       	eor	r1, r1
    1876:	ee 0d       	add	r30, r14
    1878:	ff 1d       	adc	r31, r15
    187a:	e8 0f       	add	r30, r24
    187c:	f9 1f       	adc	r31, r25
    187e:	b7 82       	std	Z+7, r11	; 0x07
							myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
    1880:	f6 01       	movw	r30, r12
    1882:	b4 80       	ldd	r11, Z+4	; 0x04
    1884:	ad 90       	ld	r10, X+
    1886:	44 e0       	ldi	r20, 0x04	; 4
    1888:	b4 9e       	mul	r11, r20
    188a:	e0 0d       	add	r30, r0
    188c:	f1 1d       	adc	r31, r1
    188e:	11 24       	eor	r1, r1
    1890:	e8 0f       	add	r30, r24
    1892:	f9 1f       	adc	r31, r25
    1894:	a6 82       	std	Z+6, r10	; 0x06
    1896:	01 96       	adiw	r24, 0x01	; 1
						}
					}
					// If Local nub is not in connecting nub list
					if (deviceFound == 0){
						
						for (uint8_t i = 0; i < 4; i++){
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	91 05       	cpc	r25, r1
    189c:	e1 f6       	brne	.-72     	; 0x1856 <handleMessages+0x7e2>
							networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
							myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
						}
						myCons->myNumOfNubCon ++;
    189e:	b3 94       	inc	r11
    18a0:	d6 01       	movw	r26, r12
    18a2:	14 96       	adiw	r26, 0x04	; 4
    18a4:	bc 92       	st	X, r11
						networkPtr->device[deviceNum].numOfNubCon ++;
    18a6:	84 e2       	ldi	r24, 0x24	; 36
    18a8:	c3 56       	subi	r28, 0x63	; 99
    18aa:	df 4f       	sbci	r29, 0xFF	; 255
    18ac:	28 80       	ld	r2, Y
    18ae:	39 80       	ldd	r3, Y+1	; 0x01
    18b0:	cd 59       	subi	r28, 0x9D	; 157
    18b2:	d0 40       	sbci	r29, 0x00	; 0
    18b4:	82 9d       	mul	r24, r2
    18b6:	f0 01       	movw	r30, r0
    18b8:	83 9d       	mul	r24, r3
    18ba:	f0 0d       	add	r31, r0
    18bc:	11 24       	eor	r1, r1
    18be:	ee 0d       	add	r30, r14
    18c0:	ff 1d       	adc	r31, r15
    18c2:	85 81       	ldd	r24, Z+5	; 0x05
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	85 83       	std	Z+5, r24	; 0x05
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    18c8:	d7 01       	movw	r26, r14
    18ca:	bc 90       	ld	r11, X
    18cc:	b1 10       	cpse	r11, r1
    18ce:	82 c0       	rjmp	.+260    	; 0x19d4 <handleMessages+0x960>
    18d0:	ae c0       	rjmp	.+348    	; 0x1a2e <handleMessages+0x9ba>
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
							if (i >= 3){
								deviceFound = 1;
    18d2:	18 2d       	mov	r17, r8
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    18d4:	8a 2f       	mov	r24, r26
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	f6 01       	movw	r30, r12
    18da:	e8 0f       	add	r30, r24
    18dc:	f9 1f       	adc	r31, r25
    18de:	af 5f       	subi	r26, 0xFF	; 255
    18e0:	82 0f       	add	r24, r18
    18e2:	93 1f       	adc	r25, r19
    18e4:	b0 81       	ld	r27, Z
    18e6:	fc 01       	movw	r30, r24
    18e8:	81 81       	ldd	r24, Z+1	; 0x01
    18ea:	b8 13       	cpse	r27, r24
    18ec:	07 c0       	rjmp	.+14     	; 0x18fc <handleMessages+0x888>
							if (i >= 3){
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	8a 0f       	add	r24, r26
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <handleMessages+0x884>
    18f6:	d3 c0       	rjmp	.+422    	; 0x1a9e <handleMessages+0xa2a>
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
    18f8:	a4 30       	cpi	r26, 0x04	; 4
    18fa:	60 f3       	brcs	.-40     	; 0x18d4 <handleMessages+0x860>
								deviceFound = 1;
							}
						}
						
						
						if (deviceFound == 1){
    18fc:	11 30       	cpi	r17, 0x01	; 1
    18fe:	09 f0       	breq	.+2      	; 0x1902 <handleMessages+0x88e>
    1900:	61 c0       	rjmp	.+194    	; 0x19c4 <handleMessages+0x950>
							deviceFound = 0;
							for (uint8_t myNubCon = 0; myNubCon < myCons->myNumOfNubCon; myNubCon++){
    1902:	d6 01       	movw	r26, r12
    1904:	14 96       	adiw	r26, 0x04	; 4
    1906:	4c 91       	ld	r20, X
    1908:	44 23       	and	r20, r20
    190a:	09 f1       	breq	.+66     	; 0x194e <handleMessages+0x8da>
    190c:	f7 01       	movw	r30, r14
    190e:	b4 e2       	ldi	r27, 0x24	; 36
    1910:	3b 9e       	mul	r3, r27
    1912:	e0 0d       	add	r30, r0
    1914:	f1 1d       	adc	r31, r1
    1916:	11 24       	eor	r1, r1
								for (uint8_t i = 0; i < 4; i++){
									if (sourceDSN[i] != networkPtr->device[myDeviceNum].nubConnections[myNubCon][i]){
    1918:	5a 81       	ldd	r21, Y+2	; 0x02
    191a:	7b 81       	ldd	r23, Y+3	; 0x03
    191c:	0c 81       	ldd	r16, Y+4	; 0x04
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	11 e0       	ldi	r17, 0x01	; 1
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <handleMessages+0x8bc>
    1926:	61 2f       	mov	r22, r17
						}
						
						
						if (deviceFound == 1){
							deviceFound = 0;
							for (uint8_t myNubCon = 0; myNubCon < myCons->myNumOfNubCon; myNubCon++){
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	34 96       	adiw	r30, 0x04	; 4
    192c:	84 17       	cp	r24, r20
    192e:	69 f0       	breq	.+26     	; 0x194a <handleMessages+0x8d6>
								for (uint8_t i = 0; i < 4; i++){
									if (sourceDSN[i] != networkPtr->device[myDeviceNum].nubConnections[myNubCon][i]){
    1930:	97 81       	ldd	r25, Z+7	; 0x07
    1932:	99 11       	cpse	r25, r9
    1934:	f9 cf       	rjmp	.-14     	; 0x1928 <handleMessages+0x8b4>
    1936:	90 85       	ldd	r25, Z+8	; 0x08
    1938:	59 13       	cpse	r21, r25
    193a:	f6 cf       	rjmp	.-20     	; 0x1928 <handleMessages+0x8b4>
    193c:	91 85       	ldd	r25, Z+9	; 0x09
    193e:	79 13       	cpse	r23, r25
    1940:	f3 cf       	rjmp	.-26     	; 0x1928 <handleMessages+0x8b4>
    1942:	92 85       	ldd	r25, Z+10	; 0x0a
    1944:	09 17       	cp	r16, r25
    1946:	79 f3       	breq	.-34     	; 0x1926 <handleMessages+0x8b2>
    1948:	ef cf       	rjmp	.-34     	; 0x1928 <handleMessages+0x8b4>
									if (i >= 3){
										deviceFound = 1;		// Device already added
									}
								}
							}
							if (deviceFound == 0){
    194a:	61 11       	cpse	r22, r1
    194c:	70 c0       	rjmp	.+224    	; 0x1a2e <handleMessages+0x9ba>
    194e:	9e 01       	movw	r18, r28
    1950:	2f 5f       	subi	r18, 0xFF	; 255
    1952:	3f 4f       	sbci	r19, 0xFF	; 255
						
						if (deviceFound == 1){
							deviceFound = 0;
							for (uint8_t myNubCon = 0; myNubCon < myCons->myNumOfNubCon; myNubCon++){
								for (uint8_t i = 0; i < 4; i++){
									if (sourceDSN[i] != networkPtr->device[myDeviceNum].nubConnections[myNubCon][i]){
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
									}
								}
							}
							if (deviceFound == 0){
								for (uint16_t j = 0; j < 4; j++){
									networkPtr->device[myDeviceNum].nubConnections[networkPtr->device[myDeviceNum].numOfNubCon][j] = sourceDSN[j];
    1958:	e3 2d       	mov	r30, r3
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	c3 56       	subi	r28, 0x63	; 99
    195e:	df 4f       	sbci	r29, 0xFF	; 255
    1960:	f9 83       	std	Y+1, r31	; 0x01
    1962:	e8 83       	st	Y, r30
    1964:	cd 59       	subi	r28, 0x9D	; 157
    1966:	d0 40       	sbci	r29, 0x00	; 0
    1968:	f4 e2       	ldi	r31, 0x24	; 36
    196a:	3f 9e       	mul	r3, r31
    196c:	a0 01       	movw	r20, r0
    196e:	11 24       	eor	r1, r1
    1970:	d7 01       	movw	r26, r14
    1972:	a4 0f       	add	r26, r20
    1974:	b5 1f       	adc	r27, r21
    1976:	15 96       	adiw	r26, 0x05	; 5
    1978:	c3 56       	subi	r28, 0x63	; 99
    197a:	df 4f       	sbci	r29, 0xFF	; 255
    197c:	88 80       	ld	r8, Y
    197e:	99 80       	ldd	r9, Y+1	; 0x01
    1980:	cd 59       	subi	r28, 0x9D	; 157
    1982:	d0 40       	sbci	r29, 0x00	; 0
    1984:	f9 01       	movw	r30, r18
    1986:	b1 90       	ld	r11, Z+
    1988:	9f 01       	movw	r18, r30
    198a:	ec 91       	ld	r30, X
    198c:	1a 01       	movw	r2, r20
    198e:	04 e0       	ldi	r16, 0x04	; 4
    1990:	e0 9f       	mul	r30, r16
    1992:	20 0c       	add	r2, r0
    1994:	31 1c       	adc	r3, r1
    1996:	11 24       	eor	r1, r1
    1998:	f1 01       	movw	r30, r2
    199a:	ee 0d       	add	r30, r14
    199c:	ff 1d       	adc	r31, r15
    199e:	e8 0f       	add	r30, r24
    19a0:	f9 1f       	adc	r31, r25
    19a2:	b7 82       	std	Z+7, r11	; 0x07
										deviceFound = 1;		// Device already added
									}
								}
							}
							if (deviceFound == 0){
								for (uint16_t j = 0; j < 4; j++){
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	84 30       	cpi	r24, 0x04	; 4
    19a8:	91 05       	cpc	r25, r1
    19aa:	31 f7       	brne	.-52     	; 0x1978 <handleMessages+0x904>
									networkPtr->device[myDeviceNum].nubConnections[networkPtr->device[myDeviceNum].numOfNubCon][j] = sourceDSN[j];
								}
								networkPtr->device[myDeviceNum].numOfNubCon ++;
    19ac:	84 e2       	ldi	r24, 0x24	; 36
    19ae:	88 9d       	mul	r24, r8
    19b0:	f0 01       	movw	r30, r0
    19b2:	89 9d       	mul	r24, r9
    19b4:	f0 0d       	add	r31, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	ee 0d       	add	r30, r14
    19ba:	ff 1d       	adc	r31, r15
    19bc:	85 81       	ldd	r24, Z+5	; 0x05
    19be:	8f 5f       	subi	r24, 0xFF	; 255
    19c0:	85 83       	std	Z+5, r24	; 0x05
    19c2:	35 c0       	rjmp	.+106    	; 0x1a2e <handleMessages+0x9ba>
						networkPtr->device[deviceNum].numOfNubCon ++;
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    19c4:	33 94       	inc	r3
    19c6:	4f 5f       	subi	r20, 0xFF	; 255
    19c8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ca:	6c 5d       	subi	r22, 0xDC	; 220
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	3b 14       	cp	r3, r11
    19d0:	68 f0       	brcs	.+26     	; 0x19ec <handleMessages+0x978>
    19d2:	2d c0       	rjmp	.+90     	; 0x1a2e <handleMessages+0x9ba>
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    19d4:	d6 01       	movw	r26, r12
    19d6:	0c 91       	ld	r16, X
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	31 2c       	mov	r3, r1
    19de:	10 e0       	ldi	r17, 0x00	; 0
    19e0:	0f 2e       	mov	r0, r31
    19e2:	f4 e2       	ldi	r31, 0x24	; 36
    19e4:	af 2e       	mov	r10, r31
    19e6:	f0 2d       	mov	r31, r0
							if (i >= 3){
								deviceFound = 1;
    19e8:	88 24       	eor	r8, r8
    19ea:	83 94       	inc	r8
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    19ec:	fb 01       	movw	r30, r22
    19ee:	21 81       	ldd	r18, Z+1	; 0x01
    19f0:	02 13       	cpse	r16, r18
    19f2:	84 cf       	rjmp	.-248    	; 0x18fc <handleMessages+0x888>
    19f4:	a1 e0       	ldi	r26, 0x01	; 1
    19f6:	a4 9e       	mul	r10, r20
    19f8:	90 01       	movw	r18, r0
    19fa:	a5 9e       	mul	r10, r21
    19fc:	30 0d       	add	r19, r0
    19fe:	11 24       	eor	r1, r1
    1a00:	2e 0d       	add	r18, r14
    1a02:	3f 1d       	adc	r19, r15
    1a04:	74 cf       	rjmp	.-280    	; 0x18ee <handleMessages+0x87a>
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    1a06:	0f 5f       	subi	r16, 0xFF	; 255
    1a08:	4f 5f       	subi	r20, 0xFF	; 255
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0c:	94 96       	adiw	r26, 0x24	; 36
    1a0e:	0b 15       	cp	r16, r11
    1a10:	71 f0       	breq	.+28     	; 0x1a2e <handleMessages+0x9ba>
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){		// Searching for source dsn in network list
    1a12:	11 96       	adiw	r26, 0x01	; 1
    1a14:	2c 91       	ld	r18, X
    1a16:	11 97       	sbiw	r26, 0x01	; 1
    1a18:	92 12       	cpse	r9, r18
    1a1a:	c4 ce       	rjmp	.-632    	; 0x17a4 <handleMessages+0x730>
    1a1c:	11 e0       	ldi	r17, 0x01	; 1
    1a1e:	84 9e       	mul	r8, r20
    1a20:	90 01       	movw	r18, r0
    1a22:	85 9e       	mul	r8, r21
    1a24:	30 0d       	add	r19, r0
    1a26:	11 24       	eor	r1, r1
    1a28:	2e 0d       	add	r18, r14
    1a2a:	3f 1d       	adc	r19, r15
    1a2c:	b4 ce       	rjmp	.-664    	; 0x1796 <handleMessages+0x722>
					}
					break;
				}
			}

			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
    1a2e:	01 e0       	ldi	r16, 0x01	; 1
    1a30:	9e 01       	movw	r18, r28
    1a32:	2f 5f       	subi	r18, 0xFF	; 255
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	a6 01       	movw	r20, r12
    1a38:	b2 01       	movw	r22, r4
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	0e 94 cc 03 	call	0x798	; 0x798 <sendNetworkData>
			return 5;
    1a40:	85 e0       	ldi	r24, 0x05	; 5
    1a42:	31 c0       	rjmp	.+98     	; 0x1aa6 <handleMessages+0xa32>
		}
	}
	
	
	// Ack from Humpro after command is sent
	if (msgType == 0x06){
    1a44:	86 30       	cpi	r24, 0x06	; 6
    1a46:	39 f4       	brne	.+14     	; 0x1a56 <handleMessages+0x9e2>
		uint8_t regNum		= (uint8_t) getChar(0);
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		uint8_t regValue	= (uint8_t) getChar(0);
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		return regValue;
    1a54:	28 c0       	rjmp	.+80     	; 0x1aa6 <handleMessages+0xa32>
	}
	// Message from Humpro
	
}
    1a56:	27 c0       	rjmp	.+78     	; 0x1aa6 <handleMessages+0xa32>
			for (uint8_t deviceNum = 0; deviceNum < myCons->myNumOfNubCon; deviceNum ++){
				sendNetworkData(networkPtr,networkSize,myCons,myCons->myNubConnections[deviceNum],0);
			}
		}
		
		return 3;
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	25 c0       	rjmp	.+74     	; 0x1aa6 <handleMessages+0xa32>
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	23 c0       	rjmp	.+70     	; 0x1aa6 <handleMessages+0xa32>

			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
			return 5;
		}
		else{
			return 0;
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	21 c0       	rjmp	.+66     	; 0x1aa6 <handleMessages+0xa32>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	1f c0       	rjmp	.+62     	; 0x1aa6 <handleMessages+0xa32>
    1a68:	8e 01       	movw	r16, r28
    1a6a:	0b 57       	subi	r16, 0x7B	; 123
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	78 01       	movw	r14, r16
    1a70:	f6 e0       	ldi	r31, 0x06	; 6
    1a72:	ef 0e       	add	r14, r31
    1a74:	f1 1c       	adc	r15, r1
    1a76:	84 cb       	rjmp	.-2296   	; 0x1180 <handleMessages+0x10c>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] =  myCons->myDSN[j];
    1a78:	d7 01       	movw	r26, r14
    1a7a:	1c 91       	ld	r17, X
    1a7c:	d6 01       	movw	r26, r12
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	e4 e2       	ldi	r30, 0x24	; 36
    1a84:	1e 9f       	mul	r17, r30
    1a86:	a0 01       	movw	r20, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	97 01       	movw	r18, r14
    1a8c:	24 0f       	add	r18, r20
    1a8e:	35 1f       	adc	r19, r21
    1a90:	2b 5f       	subi	r18, 0xFB	; 251
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	3d ce       	rjmp	.-902    	; 0x1710 <handleMessages+0x69c>
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
    1a96:	14 30       	cpi	r17, 0x04	; 4
    1a98:	08 f4       	brcc	.+2      	; 0x1a9c <handleMessages+0xa28>
    1a9a:	6c ce       	rjmp	.-808    	; 0x1774 <handleMessages+0x700>
    1a9c:	86 ce       	rjmp	.-756    	; 0x17aa <handleMessages+0x736>
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
    1a9e:	a4 30       	cpi	r26, 0x04	; 4
    1aa0:	08 f4       	brcc	.+2      	; 0x1aa4 <handleMessages+0xa30>
    1aa2:	17 cf       	rjmp	.-466    	; 0x18d2 <handleMessages+0x85e>
    1aa4:	2e cf       	rjmp	.-420    	; 0x1902 <handleMessages+0x88e>
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	7e be       	out	0x3e, r7	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	6d be       	out	0x3d, r6	; 61
    1ab0:	cb 55       	subi	r28, 0x5B	; 91
    1ab2:	df 4f       	sbci	r29, 0xFF	; 255
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	cf 90       	pop	r12
    1ace:	bf 90       	pop	r11
    1ad0:	af 90       	pop	r10
    1ad2:	9f 90       	pop	r9
    1ad4:	8f 90       	pop	r8
    1ad6:	7f 90       	pop	r7
    1ad8:	6f 90       	pop	r6
    1ada:	5f 90       	pop	r5
    1adc:	4f 90       	pop	r4
    1ade:	3f 90       	pop	r3
    1ae0:	2f 90       	pop	r2
    1ae2:	08 95       	ret

00001ae4 <USART_setup>:

// Setting up USART for communication between HUMPRO900 module and the MCU
void USART_setup(unsigned int ubrr){
	
	// UART 0
	UBRR0H = (unsigned char)(ubrr>>8);			// Setting baud rate
    1ae4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
    1ae8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A = (1<<UDRE0)|(1<<U2X0);
    1aec:	42 e2       	ldi	r20, 0x22	; 34
    1aee:	40 93 c0 00 	sts	0x00C0, r20	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0)|(1<<TXEN0);				// Enabling Tx & Rx
    1af2:	38 e9       	ldi	r19, 0x98	; 152
    1af4:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    1af8:	2e e0       	ldi	r18, 0x0E	; 14
    1afa:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// UART 1
	UBRR1H = (unsigned char)(ubrr>>8);			// Setting baud rate
    1afe:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = (unsigned char)ubrr;
    1b02:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1A = (1<<UDRE1)|(1<<U2X0);
    1b06:	40 93 c8 00 	sts	0x00C8, r20	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
	UCSR1B = (1<<RXEN1)|(1<<RXCIE1)|(1<<TXEN1);				// Enabling Tx & Rx
    1b0a:	30 93 c9 00 	sts	0x00C9, r19	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	UCSR1C = (1<<USBS1)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    1b0e:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
    1b12:	08 95       	ret

00001b14 <setupTransceiver>:
}



// Setting up ports for HUMPRO900 transceiver
uint8_t * setupTransceiver(){
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	60 97       	sbiw	r28, 0x10	; 16
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
	
	sei();		// Enabling interrupts
    1b2c:	78 94       	sei
	DDRB |= (1 << DDB7);	//PD4 PWR High for normal op, low for low power operation (power down)
    1b2e:	27 9a       	sbi	0x04, 7	; 4
	//DDRC &= ~(1 << DDC3);	//PC3 CRESP_BAR
	DDRC &= ~(1 << DDC4);	//PC4 CTS_BAR (high when busy, low when module is ready)
    1b30:	3c 98       	cbi	0x07, 4	; 7
	DDRB |= (1 << DDB6);	//PC5 Reset, resets when low
    1b32:	26 9a       	sbi	0x04, 6	; 4
	
	
	//DDRD &= ~(1 << DDD0);	//PD2 Buffer empty status (high when buffer is empty) input
	DDRD |= (1 << DDD3);	//PD3 "PUSH button" PULL LOW
    1b34:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD5);	//PD5 CMD_BAR (high for data transmit, low for commands)
    1b36:	55 9a       	sbi	0x0a, 5	; 10
	
	PORTD &= ~(1<< PORTD3);
    1b38:	5b 98       	cbi	0x0b, 3	; 11
	PORTB &= ~(1 << PORTB6);		// Reset norm operation
    1b3a:	2e 98       	cbi	0x05, 6	; 5
    1b3c:	87 ea       	ldi	r24, 0xA7	; 167
    1b3e:	91 e6       	ldi	r25, 0x61	; 97
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <setupTransceiver+0x2c>
    1b44:	00 c0       	rjmp	.+0      	; 0x1b46 <setupTransceiver+0x32>
    1b46:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1 <<PORTB6);
    1b48:	2e 9a       	sbi	0x05, 6	; 5
    1b4a:	9f e3       	ldi	r25, 0x3F	; 63
    1b4c:	ed e0       	ldi	r30, 0x0D	; 13
    1b4e:	f3 e0       	ldi	r31, 0x03	; 3
    1b50:	91 50       	subi	r25, 0x01	; 1
    1b52:	e0 40       	sbci	r30, 0x00	; 0
    1b54:	f0 40       	sbci	r31, 0x00	; 0
    1b56:	e1 f7       	brne	.-8      	; 0x1b50 <setupTransceiver+0x3c>
    1b58:	00 c0       	rjmp	.+0      	; 0x1b5a <setupTransceiver+0x46>
    1b5a:	00 00       	nop
	_delay_ms(1000);
	rx0ReadPos = rx0WritePos;	// Ignoring reset message
    1b5c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
    1b60:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx0ReadPos>
    1b64:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <rx1Buffer>
    1b68:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx0ReadPos>
	
	
	PORTD &= ~(1 << PORTD5);	// Command mode
    1b6c:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t addMode[4]	= {0xFF,0x02,0x4F,0x04};		// Setting address mode as DSN (Volatile address)
	uint8_t showVer[4]	= {0xFF,0x02,0x0A,0x00};		// Do not show version at start up
	uint8_t CMDHold[4]	= {0xFF,0x02,0x6E,0x00};		// If CMD_BAR is low, wait until it goes high to send to mcu
	uint8_t compat[4]	= {0xFF,0x02,0x70,0x00};		// Compatibility mode to enable broadcast function for DSN
	uint8_t autoAdd[4]	= {0xFF,0x02,0x71,0x04};		// Auto addressing for DNS mode
	uint8_t myDSN3[4]	= {0xFF,0x02,0xFE,0x34};				// Read command for preprogrammed DNS values, DSN3 is MSB
    1b6e:	2f ef       	ldi	r18, 0xFF	; 255
    1b70:	29 83       	std	Y+1, r18	; 0x01
    1b72:	92 e0       	ldi	r25, 0x02	; 2
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	8e ef       	ldi	r24, 0xFE	; 254
    1b78:	8b 83       	std	Y+3, r24	; 0x03
    1b7a:	34 e3       	ldi	r19, 0x34	; 52
    1b7c:	3c 83       	std	Y+4, r19	; 0x04
	uint8_t myDSN2[4]	= {0xFF,0x02,0xFE,0x35};
    1b7e:	2d 83       	std	Y+5, r18	; 0x05
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8f 83       	std	Y+7, r24	; 0x07
    1b84:	35 e3       	ldi	r19, 0x35	; 53
    1b86:	38 87       	std	Y+8, r19	; 0x08
	uint8_t myDSN1[4]	= {0xFF,0x02,0xFE,0x36};
    1b88:	29 87       	std	Y+9, r18	; 0x09
    1b8a:	9a 87       	std	Y+10, r25	; 0x0a
    1b8c:	8b 87       	std	Y+11, r24	; 0x0b
    1b8e:	36 e3       	ldi	r19, 0x36	; 54
    1b90:	3c 87       	std	Y+12, r19	; 0x0c
	uint8_t myDSN0[4]	= {0xFF,0x02,0xFE,0x37};
    1b92:	2d 87       	std	Y+13, r18	; 0x0d
    1b94:	9e 87       	std	Y+14, r25	; 0x0e
    1b96:	8f 87       	std	Y+15, r24	; 0x0f
    1b98:	87 e3       	ldi	r24, 0x37	; 55
    1b9a:	88 8b       	std	Y+16, r24	; 0x10
	//getChar(0);
	//TX0Write(autoAdd[0],4);
	
	
	// Getting local DNS info (third char returned)
	uint8_t *myDSNVal = malloc(4*sizeof(uint8_t));
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <malloc>
    1ba4:	8c 01       	movw	r16, r24
	
	TXWrite(myDSN3,4,0);
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	64 e0       	ldi	r22, 0x04	; 4
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	ce 01       	movw	r24, r28
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1bb6:	87 ea       	ldi	r24, 0xA7	; 167
    1bb8:	91 e6       	ldi	r25, 0x61	; 97
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <setupTransceiver+0xa6>
    1bbe:	00 c0       	rjmp	.+0      	; 0x1bc0 <setupTransceiver+0xac>
    1bc0:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1bc2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <unread0Bytes>
    1bc6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rx1WritePos>
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	ec f3       	brlt	.-6      	; 0x1bca <setupTransceiver+0xb6>
	
	rx0ReadPos = rx0WritePos -1;		// Ignoring other bytes received, only care about DSN value
    1bd0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
    1bd4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx0ReadPos>
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <rx1Buffer>
    1bde:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx0ReadPos>

	myDSNVal[0] = getChar(0);
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1bea:	f8 01       	movw	r30, r16
    1bec:	80 83       	st	Z, r24
	
	
	TXWrite(myDSN2,4,0);
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	64 e0       	ldi	r22, 0x04	; 4
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	05 96       	adiw	r24, 0x05	; 5
    1bfa:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1bfe:	87 ea       	ldi	r24, 0xA7	; 167
    1c00:	91 e6       	ldi	r25, 0x61	; 97
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <setupTransceiver+0xee>
    1c06:	00 c0       	rjmp	.+0      	; 0x1c08 <setupTransceiver+0xf4>
    1c08:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1c0a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <unread0Bytes>
    1c0e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rx1WritePos>
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	91 05       	cpc	r25, r1
    1c16:	ec f3       	brlt	.-6      	; 0x1c12 <setupTransceiver+0xfe>
		
	rx0ReadPos = rx0WritePos -1;
    1c18:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
    1c1c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx0ReadPos>
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <rx1Buffer>
    1c26:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx0ReadPos>
	myDSNVal[1] = getChar(0);
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1c32:	f8 01       	movw	r30, r16
    1c34:	81 83       	std	Z+1, r24	; 0x01
	
	
	TXWrite(myDSN1,4,0);
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	64 e0       	ldi	r22, 0x04	; 4
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	ce 01       	movw	r24, r28
    1c40:	09 96       	adiw	r24, 0x09	; 9
    1c42:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1c46:	87 ea       	ldi	r24, 0xA7	; 167
    1c48:	91 e6       	ldi	r25, 0x61	; 97
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <setupTransceiver+0x136>
    1c4e:	00 c0       	rjmp	.+0      	; 0x1c50 <setupTransceiver+0x13c>
    1c50:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1c52:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <unread0Bytes>
    1c56:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rx1WritePos>
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	ec f3       	brlt	.-6      	; 0x1c5a <setupTransceiver+0x146>
	rx0ReadPos = rx0WritePos -1;
    1c60:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
    1c64:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx0ReadPos>
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <rx1Buffer>
    1c6e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx0ReadPos>
	myDSNVal[2] = getChar(0);
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	82 83       	std	Z+2, r24	; 0x02
	
	
	TXWrite(myDSN0,4,0);
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	64 e0       	ldi	r22, 0x04	; 4
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	ce 01       	movw	r24, r28
    1c88:	0d 96       	adiw	r24, 0x0d	; 13
    1c8a:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1c8e:	87 ea       	ldi	r24, 0xA7	; 167
    1c90:	91 e6       	ldi	r25, 0x61	; 97
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <setupTransceiver+0x17e>
    1c96:	00 c0       	rjmp	.+0      	; 0x1c98 <setupTransceiver+0x184>
    1c98:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1c9a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <unread0Bytes>
    1c9e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rx1WritePos>
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	ec f3       	brlt	.-6      	; 0x1ca2 <setupTransceiver+0x18e>
	rx0ReadPos = rx0WritePos -1;
    1ca8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx0WritePos>
    1cac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx0ReadPos>
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <rx1Buffer>
    1cb6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx0ReadPos>
	myDSNVal[3] = getChar(0);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	83 83       	std	Z+3, r24	; 0x03
    1cc6:	ff eb       	ldi	r31, 0xBF	; 191
    1cc8:	27 e2       	ldi	r18, 0x27	; 39
    1cca:	89 e0       	ldi	r24, 0x09	; 9
    1ccc:	f1 50       	subi	r31, 0x01	; 1
    1cce:	20 40       	sbci	r18, 0x00	; 0
    1cd0:	80 40       	sbci	r24, 0x00	; 0
    1cd2:	e1 f7       	brne	.-8      	; 0x1ccc <setupTransceiver+0x1b8>
    1cd4:	00 c0       	rjmp	.+0      	; 0x1cd6 <setupTransceiver+0x1c2>
    1cd6:	00 00       	nop
	
	_delay_ms(3000);
	
	TXWrite(myDSNVal,4,0);
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	64 e0       	ldi	r22, 0x04	; 4
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1ce6:	9f e3       	ldi	r25, 0x3F	; 63
    1ce8:	ed e0       	ldi	r30, 0x0D	; 13
    1cea:	f3 e0       	ldi	r31, 0x03	; 3
    1cec:	91 50       	subi	r25, 0x01	; 1
    1cee:	e0 40       	sbci	r30, 0x00	; 0
    1cf0:	f0 40       	sbci	r31, 0x00	; 0
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <setupTransceiver+0x1d8>
    1cf4:	00 c0       	rjmp	.+0      	; 0x1cf6 <setupTransceiver+0x1e2>
    1cf6:	00 00       	nop
	_delay_ms(1000);
	PORTD |= (1 << PORTD5);	// Data transmit mode
    1cf8:	5d 9a       	sbi	0x0b, 5	; 11
	
	//PORTC |= (1 << PORTC5);
	
	return myDSNVal;
	
}
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	60 96       	adiw	r28, 0x10	; 16
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	08 95       	ret

00001d12 <malloc>:
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	10 f4       	brcc	.+4      	; 0x1d24 <malloc+0x12>
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <__flp>
    1d28:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <__flp+0x1>
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	a0 e0       	ldi	r26, 0x00	; 0
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	19 f1       	breq	.+70     	; 0x1d7e <malloc+0x6c>
    1d38:	40 81       	ld	r20, Z
    1d3a:	51 81       	ldd	r21, Z+1	; 0x01
    1d3c:	02 81       	ldd	r16, Z+2	; 0x02
    1d3e:	13 81       	ldd	r17, Z+3	; 0x03
    1d40:	48 17       	cp	r20, r24
    1d42:	59 07       	cpc	r21, r25
    1d44:	c8 f0       	brcs	.+50     	; 0x1d78 <malloc+0x66>
    1d46:	84 17       	cp	r24, r20
    1d48:	95 07       	cpc	r25, r21
    1d4a:	69 f4       	brne	.+26     	; 0x1d66 <malloc+0x54>
    1d4c:	10 97       	sbiw	r26, 0x00	; 0
    1d4e:	31 f0       	breq	.+12     	; 0x1d5c <malloc+0x4a>
    1d50:	12 96       	adiw	r26, 0x02	; 2
    1d52:	0c 93       	st	X, r16
    1d54:	12 97       	sbiw	r26, 0x02	; 2
    1d56:	13 96       	adiw	r26, 0x03	; 3
    1d58:	1c 93       	st	X, r17
    1d5a:	27 c0       	rjmp	.+78     	; 0x1daa <malloc+0x98>
    1d5c:	00 93 14 03 	sts	0x0314, r16	; 0x800314 <__flp>
    1d60:	10 93 15 03 	sts	0x0315, r17	; 0x800315 <__flp+0x1>
    1d64:	22 c0       	rjmp	.+68     	; 0x1daa <malloc+0x98>
    1d66:	21 15       	cp	r18, r1
    1d68:	31 05       	cpc	r19, r1
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <malloc+0x60>
    1d6c:	42 17       	cp	r20, r18
    1d6e:	53 07       	cpc	r21, r19
    1d70:	18 f4       	brcc	.+6      	; 0x1d78 <malloc+0x66>
    1d72:	9a 01       	movw	r18, r20
    1d74:	bd 01       	movw	r22, r26
    1d76:	ef 01       	movw	r28, r30
    1d78:	df 01       	movw	r26, r30
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	db cf       	rjmp	.-74     	; 0x1d34 <malloc+0x22>
    1d7e:	21 15       	cp	r18, r1
    1d80:	31 05       	cpc	r19, r1
    1d82:	f9 f0       	breq	.+62     	; 0x1dc2 <malloc+0xb0>
    1d84:	28 1b       	sub	r18, r24
    1d86:	39 0b       	sbc	r19, r25
    1d88:	24 30       	cpi	r18, 0x04	; 4
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	80 f4       	brcc	.+32     	; 0x1dae <malloc+0x9c>
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	61 15       	cp	r22, r1
    1d94:	71 05       	cpc	r23, r1
    1d96:	21 f0       	breq	.+8      	; 0x1da0 <malloc+0x8e>
    1d98:	fb 01       	movw	r30, r22
    1d9a:	93 83       	std	Z+3, r25	; 0x03
    1d9c:	82 83       	std	Z+2, r24	; 0x02
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <malloc+0x96>
    1da0:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <__flp+0x1>
    1da4:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <__flp>
    1da8:	fe 01       	movw	r30, r28
    1daa:	32 96       	adiw	r30, 0x02	; 2
    1dac:	44 c0       	rjmp	.+136    	; 0x1e36 <malloc+0x124>
    1dae:	fe 01       	movw	r30, r28
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	81 93       	st	Z+, r24
    1db6:	91 93       	st	Z+, r25
    1db8:	22 50       	subi	r18, 0x02	; 2
    1dba:	31 09       	sbc	r19, r1
    1dbc:	39 83       	std	Y+1, r19	; 0x01
    1dbe:	28 83       	st	Y, r18
    1dc0:	3a c0       	rjmp	.+116    	; 0x1e36 <malloc+0x124>
    1dc2:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <__brkval>
    1dc6:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <__brkval+0x1>
    1dca:	23 2b       	or	r18, r19
    1dcc:	41 f4       	brne	.+16     	; 0x1dde <malloc+0xcc>
    1dce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1dd2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1dd6:	30 93 13 03 	sts	0x0313, r19	; 0x800313 <__brkval+0x1>
    1dda:	20 93 12 03 	sts	0x0312, r18	; 0x800312 <__brkval>
    1dde:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1de2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1de6:	21 15       	cp	r18, r1
    1de8:	31 05       	cpc	r19, r1
    1dea:	41 f4       	brne	.+16     	; 0x1dfc <malloc+0xea>
    1dec:	2d b7       	in	r18, 0x3d	; 61
    1dee:	3e b7       	in	r19, 0x3e	; 62
    1df0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1df4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1df8:	24 1b       	sub	r18, r20
    1dfa:	35 0b       	sbc	r19, r21
    1dfc:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <__brkval>
    1e00:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <__brkval+0x1>
    1e04:	e2 17       	cp	r30, r18
    1e06:	f3 07       	cpc	r31, r19
    1e08:	a0 f4       	brcc	.+40     	; 0x1e32 <malloc+0x120>
    1e0a:	2e 1b       	sub	r18, r30
    1e0c:	3f 0b       	sbc	r19, r31
    1e0e:	28 17       	cp	r18, r24
    1e10:	39 07       	cpc	r19, r25
    1e12:	78 f0       	brcs	.+30     	; 0x1e32 <malloc+0x120>
    1e14:	ac 01       	movw	r20, r24
    1e16:	4e 5f       	subi	r20, 0xFE	; 254
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	24 17       	cp	r18, r20
    1e1c:	35 07       	cpc	r19, r21
    1e1e:	48 f0       	brcs	.+18     	; 0x1e32 <malloc+0x120>
    1e20:	4e 0f       	add	r20, r30
    1e22:	5f 1f       	adc	r21, r31
    1e24:	50 93 13 03 	sts	0x0313, r21	; 0x800313 <__brkval+0x1>
    1e28:	40 93 12 03 	sts	0x0312, r20	; 0x800312 <__brkval>
    1e2c:	81 93       	st	Z+, r24
    1e2e:	91 93       	st	Z+, r25
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <malloc+0x124>
    1e32:	e0 e0       	ldi	r30, 0x00	; 0
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	cf 01       	movw	r24, r30
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	08 95       	ret

00001e42 <free>:
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <free+0xa>
    1e4a:	81 c0       	rjmp	.+258    	; 0x1f4e <free+0x10c>
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	32 97       	sbiw	r30, 0x02	; 2
    1e50:	13 82       	std	Z+3, r1	; 0x03
    1e52:	12 82       	std	Z+2, r1	; 0x02
    1e54:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <__flp>
    1e58:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <__flp+0x1>
    1e5c:	10 97       	sbiw	r26, 0x00	; 0
    1e5e:	81 f4       	brne	.+32     	; 0x1e80 <free+0x3e>
    1e60:	20 81       	ld	r18, Z
    1e62:	31 81       	ldd	r19, Z+1	; 0x01
    1e64:	82 0f       	add	r24, r18
    1e66:	93 1f       	adc	r25, r19
    1e68:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <__brkval>
    1e6c:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <__brkval+0x1>
    1e70:	28 17       	cp	r18, r24
    1e72:	39 07       	cpc	r19, r25
    1e74:	51 f5       	brne	.+84     	; 0x1eca <free+0x88>
    1e76:	f0 93 13 03 	sts	0x0313, r31	; 0x800313 <__brkval+0x1>
    1e7a:	e0 93 12 03 	sts	0x0312, r30	; 0x800312 <__brkval>
    1e7e:	67 c0       	rjmp	.+206    	; 0x1f4e <free+0x10c>
    1e80:	ed 01       	movw	r28, r26
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	ce 17       	cp	r28, r30
    1e88:	df 07       	cpc	r29, r31
    1e8a:	40 f4       	brcc	.+16     	; 0x1e9c <free+0x5a>
    1e8c:	4a 81       	ldd	r20, Y+2	; 0x02
    1e8e:	5b 81       	ldd	r21, Y+3	; 0x03
    1e90:	9e 01       	movw	r18, r28
    1e92:	41 15       	cp	r20, r1
    1e94:	51 05       	cpc	r21, r1
    1e96:	f1 f0       	breq	.+60     	; 0x1ed4 <free+0x92>
    1e98:	ea 01       	movw	r28, r20
    1e9a:	f5 cf       	rjmp	.-22     	; 0x1e86 <free+0x44>
    1e9c:	d3 83       	std	Z+3, r29	; 0x03
    1e9e:	c2 83       	std	Z+2, r28	; 0x02
    1ea0:	40 81       	ld	r20, Z
    1ea2:	51 81       	ldd	r21, Z+1	; 0x01
    1ea4:	84 0f       	add	r24, r20
    1ea6:	95 1f       	adc	r25, r21
    1ea8:	c8 17       	cp	r28, r24
    1eaa:	d9 07       	cpc	r29, r25
    1eac:	59 f4       	brne	.+22     	; 0x1ec4 <free+0x82>
    1eae:	88 81       	ld	r24, Y
    1eb0:	99 81       	ldd	r25, Y+1	; 0x01
    1eb2:	84 0f       	add	r24, r20
    1eb4:	95 1f       	adc	r25, r21
    1eb6:	02 96       	adiw	r24, 0x02	; 2
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	93 83       	std	Z+3, r25	; 0x03
    1ec2:	82 83       	std	Z+2, r24	; 0x02
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	29 f4       	brne	.+10     	; 0x1ed4 <free+0x92>
    1eca:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__flp+0x1>
    1ece:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__flp>
    1ed2:	3d c0       	rjmp	.+122    	; 0x1f4e <free+0x10c>
    1ed4:	e9 01       	movw	r28, r18
    1ed6:	fb 83       	std	Y+3, r31	; 0x03
    1ed8:	ea 83       	std	Y+2, r30	; 0x02
    1eda:	49 91       	ld	r20, Y+
    1edc:	59 91       	ld	r21, Y+
    1ede:	c4 0f       	add	r28, r20
    1ee0:	d5 1f       	adc	r29, r21
    1ee2:	ec 17       	cp	r30, r28
    1ee4:	fd 07       	cpc	r31, r29
    1ee6:	61 f4       	brne	.+24     	; 0x1f00 <free+0xbe>
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	84 0f       	add	r24, r20
    1eee:	95 1f       	adc	r25, r21
    1ef0:	02 96       	adiw	r24, 0x02	; 2
    1ef2:	e9 01       	movw	r28, r18
    1ef4:	99 83       	std	Y+1, r25	; 0x01
    1ef6:	88 83       	st	Y, r24
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	e0 e0       	ldi	r30, 0x00	; 0
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	12 96       	adiw	r26, 0x02	; 2
    1f06:	8d 91       	ld	r24, X+
    1f08:	9c 91       	ld	r25, X
    1f0a:	13 97       	sbiw	r26, 0x03	; 3
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	19 f0       	breq	.+6      	; 0x1f16 <free+0xd4>
    1f10:	fd 01       	movw	r30, r26
    1f12:	dc 01       	movw	r26, r24
    1f14:	f7 cf       	rjmp	.-18     	; 0x1f04 <free+0xc2>
    1f16:	8d 91       	ld	r24, X+
    1f18:	9c 91       	ld	r25, X
    1f1a:	11 97       	sbiw	r26, 0x01	; 1
    1f1c:	9d 01       	movw	r18, r26
    1f1e:	2e 5f       	subi	r18, 0xFE	; 254
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	82 0f       	add	r24, r18
    1f24:	93 1f       	adc	r25, r19
    1f26:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <__brkval>
    1f2a:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <__brkval+0x1>
    1f2e:	28 17       	cp	r18, r24
    1f30:	39 07       	cpc	r19, r25
    1f32:	69 f4       	brne	.+26     	; 0x1f4e <free+0x10c>
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	29 f4       	brne	.+10     	; 0x1f42 <free+0x100>
    1f38:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <__flp+0x1>
    1f3c:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <__flp>
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <free+0x104>
    1f42:	13 82       	std	Z+3, r1	; 0x03
    1f44:	12 82       	std	Z+2, r1	; 0x02
    1f46:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <__brkval+0x1>
    1f4a:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <__brkval>
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <_exit>:
    1f54:	f8 94       	cli

00001f56 <__stop_program>:
    1f56:	ff cf       	rjmp	.-2      	; 0x1f56 <__stop_program>
