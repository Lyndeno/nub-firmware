
nub_long_range_328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001a16  00001aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020c  0080010c  0080010c  00001ab6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034f5  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001075  00000000  00000000  0000515d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000165f  00000000  00000000  000061d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00007834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9c  00000000  00000000  00007d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c8a  00000000  00000000  000087b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  0000b43e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_28>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e6 e1       	ldi	r30, 0x16	; 22
      c8:	fa e1       	ldi	r31, 0x1A	; 26
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 30       	cpi	r26, 0x0C	; 12
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	ac e0       	ldi	r26, 0x0C	; 12
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a8 31       	cpi	r26, 0x18	; 24
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
      ea:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TXWrite>:
		return 1;
	}
	else{
		return 0;
	}
}
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	66 23       	and	r22, r22
     100:	31 f1       	breq	.+76     	; 0x14e <TXWrite+0x5c>
     102:	61 50       	subi	r22, 0x01	; 1
     104:	e8 2e       	mov	r14, r24
     106:	f9 2e       	mov	r15, r25
     108:	a8 ec       	ldi	r26, 0xC8	; 200
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	0e ec       	ldi	r16, 0xCE	; 206
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	e0 ec       	ldi	r30, 0xC0	; 192
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	26 ec       	ldi	r18, 0xC6	; 198
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	01 c0       	rjmp	.+2      	; 0x11c <TXWrite+0x2a>
     11a:	68 2f       	mov	r22, r24
     11c:	41 15       	cp	r20, r1
     11e:	51 05       	cpc	r21, r1
     120:	41 f4       	brne	.+16     	; 0x132 <TXWrite+0x40>
     122:	80 81       	ld	r24, Z
     124:	85 ff       	sbrs	r24, 5
     126:	fd cf       	rjmp	.-6      	; 0x122 <TXWrite+0x30>
     128:	e7 01       	movw	r28, r14
     12a:	88 81       	ld	r24, Y
     12c:	e9 01       	movw	r28, r18
     12e:	88 83       	st	Y, r24
     130:	07 c0       	rjmp	.+14     	; 0x140 <TXWrite+0x4e>
     132:	8c 91       	ld	r24, X
     134:	85 ff       	sbrs	r24, 5
     136:	fd cf       	rjmp	.-6      	; 0x132 <TXWrite+0x40>
     138:	e7 01       	movw	r28, r14
     13a:	88 81       	ld	r24, Y
     13c:	e8 01       	movw	r28, r16
     13e:	88 83       	st	Y, r24
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	86 0f       	add	r24, r22
     144:	df ef       	ldi	r29, 0xFF	; 255
     146:	ed 1a       	sub	r14, r29
     148:	fd 0a       	sbc	r15, r29
     14a:	61 11       	cpse	r22, r1
     14c:	e6 cf       	rjmp	.-52     	; 0x11a <TXWrite+0x28>
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <getChar>:
     15c:	81 11       	cpse	r24, r1
     15e:	19 c0       	rjmp	.+50     	; 0x192 <getChar+0x36>
     160:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
     164:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
     168:	98 17       	cp	r25, r24
     16a:	61 f1       	breq	.+88     	; 0x1c4 <getChar+0x68>
     16c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <unread0Bytes>
     170:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <unread0Bytes+0x1>
     174:	21 50       	subi	r18, 0x01	; 1
     176:	31 09       	sbc	r19, r1
     178:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <unread0Bytes+0x1>
     17c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <unread0Bytes>
     180:	e9 2f       	mov	r30, r25
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	ec 5e       	subi	r30, 0xEC	; 236
     186:	fd 4f       	sbci	r31, 0xFD	; 253
     188:	80 81       	ld	r24, Z
     18a:	9f 5f       	subi	r25, 0xFF	; 255
     18c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rx0ReadPos>
     190:	08 95       	ret
     192:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx1ReadPos>
     196:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx1WritePos>
     19a:	98 17       	cp	r25, r24
     19c:	a9 f0       	breq	.+42     	; 0x1c8 <getChar+0x6c>
     19e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
     1a2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
     1a6:	21 50       	subi	r18, 0x01	; 1
     1a8:	31 09       	sbc	r19, r1
     1aa:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
     1ae:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
     1b2:	e9 2f       	mov	r30, r25
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ec 5e       	subi	r30, 0xEC	; 236
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	80 81       	ld	r24, Z
     1bc:	9f 5f       	subi	r25, 0xFF	; 255
     1be:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rx1ReadPos>
     1c2:	08 95       	ret
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	08 95       	ret
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 95       	ret

000001cc <skipBuffer>:
     1cc:	81 11       	cpse	r24, r1
     1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <skipBuffer+0x16>
     1d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <unread0Bytes+0x1>
     1d4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <unread0Bytes>
     1d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
     1dc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
     1e0:	08 95       	ret
     1e2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     1e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     1ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx1WritePos>
     1ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx1ReadPos>
     1f2:	08 95       	ret

000001f4 <Bytes0UnRead>:
     1f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
     1f8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
     1fc:	08 95       	ret

000001fe <Bytes1UnRead>:
     1fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     202:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     206:	08 95       	ret

00000208 <__vector_18>:




// Interrupt for receiving UART data from RX 0
ISR(USART0_RX_vect){
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	8f 93       	push	r24
     214:	9f 93       	push	r25
     216:	ef 93       	push	r30
     218:	ff 93       	push	r31
	unread0Bytes++;
     21a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
     21e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <unread0Bytes+0x1>
     228:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <unread0Bytes>
	rx0Buffer[rx0WritePos] = UDR0;
     22c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
     230:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     234:	e8 2f       	mov	r30, r24
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	ec 5e       	subi	r30, 0xEC	; 236
     23a:	fd 4f       	sbci	r31, 0xFD	; 253
     23c:	90 83       	st	Z, r25
	rx0WritePos++;
     23e:	8f 5f       	subi	r24, 0xFF	; 255
     240:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx0WritePos>
	{
		rx0WritePos = 0;
	}
	
	
}
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	9f 91       	pop	r25
     24a:	8f 91       	pop	r24
     24c:	0f 90       	pop	r0
     24e:	0f be       	out	0x3f, r0	; 63
     250:	0f 90       	pop	r0
     252:	1f 90       	pop	r1
     254:	18 95       	reti

00000256 <__vector_28>:

ISR(USART1_RX_vect){
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	0f 92       	push	r0
     25e:	11 24       	eor	r1, r1
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	ef 93       	push	r30
     266:	ff 93       	push	r31
	unread1Bytes++;
     268:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     26c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     276:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	rx1Buffer[rx1WritePos] = UDR1;
     27a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx1WritePos>
     27e:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     282:	e8 2f       	mov	r30, r24
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ec 5e       	subi	r30, 0xEC	; 236
     288:	fe 4f       	sbci	r31, 0xFE	; 254
     28a:	90 83       	st	Z, r25
	rx1WritePos++;
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx1WritePos>
	
	if(rx1WritePos >= RX1_BUFFER_SIZE)
	{
		rx1WritePos = 0;
	}
}
     292:	ff 91       	pop	r31
     294:	ef 91       	pop	r30
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	0f 90       	pop	r0
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	0f 90       	pop	r0
     2a0:	1f 90       	pop	r1
     2a2:	18 95       	reti

000002a4 <main>:
};



int main(void)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	c9 5d       	subi	r28, 0xD9	; 217
     2ae:	d1 09       	sbc	r29, r1
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	cd bf       	out	0x3d, r28	; 61
	
	DDRE |= (1 << DDE1);
     2ba:	69 9a       	sbi	0x0d, 1	; 13
	PORTE |= (1 << LED);
     2bc:	71 9a       	sbi	0x0e, 1	; 14
	USART_setup(MYUBRR);
     2be:	8c e0       	ldi	r24, 0x0C	; 12
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <USART_setup>
	sei();		// Enabling interrupts 
     2c6:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c8:	87 ea       	ldi	r24, 0xA7	; 167
     2ca:	91 e6       	ldi	r25, 0x61	; 97
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x28>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x2e>
     2d2:	00 00       	nop
	uint8_t *networkPtr2 = &network;
	struct myConData *myConsptr, myCons;
	myConsptr = &myCons;
	uint16_t networkSize = sizeof(network);
	
	myDSN = setupTransceiver();
     2d4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <setupTransceiver>
     2d8:	fe 01       	movw	r30, r28
     2da:	31 96       	adiw	r30, 0x01	; 1
     2dc:	9e 01       	movw	r18, r28
     2de:	2a 54       	subi	r18, 0x4A	; 74
     2e0:	3f 4f       	sbci	r19, 0xFF	; 255
	
	
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
     2e2:	11 92       	st	Z+, r1
	myDSN = setupTransceiver();
	
	
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
     2e4:	2e 17       	cp	r18, r30
     2e6:	3f 07       	cpc	r19, r31
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x3e>
     2ea:	9e 01       	movw	r18, r28
     2ec:	2a 54       	subi	r18, 0x4A	; 74
     2ee:	3f 4f       	sbci	r19, 0xFF	; 255
     2f0:	68 2f       	mov	r22, r24
     2f2:	79 2f       	mov	r23, r25
     2f4:	de 01       	movw	r26, r28
     2f6:	12 96       	adiw	r26, 0x02	; 2
     2f8:	ae 01       	movw	r20, r28
     2fa:	4a 5f       	subi	r20, 0xFA	; 250
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	for(int i = 0; i < 4; i++){
		myCons.myDSN[i] = myDSN[i];
		network.device[0].deviceDSN[i] = myDSN[i];
		network.device[1].deviceDSN[i] = 0x11;
     2fe:	81 e1       	ldi	r24, 0x11	; 17
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	
	for(int i = 0; i < 4; i++){
		myCons.myDSN[i] = myDSN[i];
     300:	fb 01       	movw	r30, r22
     302:	90 81       	ld	r25, Z
     304:	f9 01       	movw	r30, r18
     306:	91 93       	st	Z+, r25
     308:	9f 01       	movw	r18, r30
		network.device[0].deviceDSN[i] = myDSN[i];
     30a:	fb 01       	movw	r30, r22
     30c:	91 91       	ld	r25, Z+
     30e:	bf 01       	movw	r22, r30
     310:	9d 93       	st	X+, r25
		network.device[1].deviceDSN[i] = 0x11;
     312:	93 96       	adiw	r26, 0x23	; 35
     314:	8c 93       	st	X, r24
     316:	93 97       	sbiw	r26, 0x23	; 35
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	
	for(int i = 0; i < 4; i++){
     318:	a4 17       	cp	r26, r20
     31a:	b5 07       	cpc	r27, r21
     31c:	89 f7       	brne	.-30     	; 0x300 <main+0x5c>
     31e:	de 01       	movw	r26, r28
     320:	a8 53       	subi	r26, 0x38	; 56
     322:	bf 4f       	sbci	r27, 0xFF	; 255
     324:	fe 01       	movw	r30, r28
     326:	74 96       	adiw	r30, 0x14	; 20
     328:	9e 01       	movw	r18, r28
     32a:	26 5e       	subi	r18, 0xE6	; 230
     32c:	3f 4f       	sbci	r19, 0xFF	; 255
		network.device[0].deviceDSN[i] = myDSN[i];
		network.device[1].deviceDSN[i] = 0x11;
	}
	
	for(int i = 0; i <6; i++){
		myCons.myPhoneConnections[0][i] = 0x22;
     32e:	82 e2       	ldi	r24, 0x22	; 34
		network.device[0].phoneConnections[0][i] = 0x22;
		network.device[1].phoneConnections[0][i] = 0x33;
     330:	93 e3       	ldi	r25, 0x33	; 51
		network.device[0].deviceDSN[i] = myDSN[i];
		network.device[1].deviceDSN[i] = 0x11;
	}
	
	for(int i = 0; i <6; i++){
		myCons.myPhoneConnections[0][i] = 0x22;
     332:	8d 93       	st	X+, r24
		network.device[0].phoneConnections[0][i] = 0x22;
     334:	81 93       	st	Z+, r24
		network.device[1].phoneConnections[0][i] = 0x33;
     336:	93 a3       	std	Z+35, r25	; 0x23
		myCons.myDSN[i] = myDSN[i];
		network.device[0].deviceDSN[i] = myDSN[i];
		network.device[1].deviceDSN[i] = 0x11;
	}
	
	for(int i = 0; i <6; i++){
     338:	e2 17       	cp	r30, r18
     33a:	f3 07       	cpc	r31, r19
     33c:	d1 f7       	brne	.-12     	; 0x332 <main+0x8e>
		network.device[0].phoneConnections[0][i] = 0x22;
		network.device[1].phoneConnections[0][i] = 0x33;
	}
	///////////
	
	myCons.myNumOfNubCon = 0;
     33e:	c6 54       	subi	r28, 0x46	; 70
     340:	df 4f       	sbci	r29, 0xFF	; 255
     342:	18 82       	st	Y, r1
     344:	ca 5b       	subi	r28, 0xBA	; 186
     346:	d0 40       	sbci	r29, 0x00	; 0
	myCons.myNumOfPhoneCon = 1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	c5 54       	subi	r28, 0x45	; 69
     34c:	df 4f       	sbci	r29, 0xFF	; 255
     34e:	88 83       	st	Y, r24
     350:	cb 5b       	subi	r28, 0xBB	; 187
     352:	d0 40       	sbci	r29, 0x00	; 0
	network.numOfDevices = 2;
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	99 83       	std	Y+1, r25	; 0x01
	network.device[0].numOfNubCon = 0;
     358:	1e 82       	std	Y+6, r1	; 0x06
	network.device[0].numOfPhoneCon = 1;
     35a:	8f 83       	std	Y+7, r24	; 0x07
	network.device[1].numOfPhoneCon = 1;
     35c:	8b a7       	std	Y+43, r24	; 0x2b
	uint8_t firstCon = 1;
	skipBuffer(0);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 e6 00 	call	0x1cc	; 0x1cc <skipBuffer>
	myCons.myNumOfPhoneCon = 1;
	network.numOfDevices = 2;
	network.device[0].numOfNubCon = 0;
	network.device[0].numOfPhoneCon = 1;
	network.device[1].numOfPhoneCon = 1;
	uint8_t firstCon = 1;
     366:	ff 24       	eor	r15, r15
     368:	f3 94       	inc	r15
	
    while (1){
	
		//TXWrite(var,6,0);
		//TXWrite(networkPtr,sizeof(network),0);
		if (firstCon == 1){
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	ff 12       	cpse	r15, r31
     36e:	0f c0       	rjmp	.+30     	; 0x38e <main+0xea>
     370:	2f e3       	ldi	r18, 0x3F	; 63
     372:	82 e4       	ldi	r24, 0x42	; 66
     374:	9f e0       	ldi	r25, 0x0F	; 15
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <main+0xd2>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0xdc>
     380:	00 00       	nop
			_delay_ms(5000);
			broadcastCon(0x00,myConsptr);
     382:	be 01       	movw	r22, r28
     384:	6a 54       	subi	r22, 0x4A	; 74
     386:	7f 4f       	sbci	r23, 0xFF	; 255
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 0f 03 	call	0x61e	; 0x61e <broadcastCon>
		}
		
		//broadcastCon(0x01,networkPtr);
		//sendMessageSimple(myDSN,connectedDevices,var,6);
		uint8_t UARTPort = 1;
		if(Bytes0UnRead() > 0){
     38e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Bytes0UnRead>
     392:	18 16       	cp	r1, r24
     394:	19 06       	cpc	r1, r25
     396:	7c f4       	brge	.+30     	; 0x3b6 <main+0x112>
			UARTPort = 0;
			handleMessages(UARTPort,networkPtr,networkSize,networkPtr2,myConsptr);
     398:	8e 01       	movw	r16, r28
     39a:	0a 54       	subi	r16, 0x4A	; 74
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	9e 01       	movw	r18, r28
     3a0:	2f 5f       	subi	r18, 0xFF	; 255
     3a2:	3f 4f       	sbci	r19, 0xFF	; 255
     3a4:	45 eb       	ldi	r20, 0xB5	; 181
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	b9 01       	movw	r22, r18
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	0e 94 27 07 	call	0xe4e	; 0xe4e <handleMessages>
			firstCon = 0;
			
			skipBuffer();
     3b0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <skipBuffer>
		//sendMessageSimple(myDSN,connectedDevices,var,6);
		uint8_t UARTPort = 1;
		if(Bytes0UnRead() > 0){
			UARTPort = 0;
			handleMessages(UARTPort,networkPtr,networkSize,networkPtr2,myConsptr);
			firstCon = 0;
     3b4:	f1 2c       	mov	r15, r1
			
			skipBuffer();
		}
		if(Bytes1UnRead() > 0){
     3b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Bytes1UnRead>
     3ba:	18 16       	cp	r1, r24
     3bc:	19 06       	cpc	r1, r25
     3be:	64 f4       	brge	.+24     	; 0x3d8 <main+0x134>
			UARTPort = 1;
			handleMessages(UARTPort,networkPtr,networkSize,networkPtr2,myConsptr);
     3c0:	8e 01       	movw	r16, r28
     3c2:	0a 54       	subi	r16, 0x4A	; 74
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
     3c6:	9e 01       	movw	r18, r28
     3c8:	2f 5f       	subi	r18, 0xFF	; 255
     3ca:	3f 4f       	sbci	r19, 0xFF	; 255
     3cc:	45 eb       	ldi	r20, 0xB5	; 181
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	b9 01       	movw	r22, r18
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	0e 94 27 07 	call	0xe4e	; 0xe4e <handleMessages>
     3d8:	ef e3       	ldi	r30, 0x3F	; 63
     3da:	fd e0       	ldi	r31, 0x0D	; 13
     3dc:	23 e0       	ldi	r18, 0x03	; 3
     3de:	e1 50       	subi	r30, 0x01	; 1
     3e0:	f0 40       	sbci	r31, 0x00	; 0
     3e2:	20 40       	sbci	r18, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x13a>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x144>
     3e8:	00 00       	nop
     3ea:	bf cf       	rjmp	.-130    	; 0x36a <main+0xc6>

000003ec <getDestPhoneAdd>:
		}
	}
	// Device not found 
	return -1;
	
}
     3ec:	6f 92       	push	r6
     3ee:	7f 92       	push	r7
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	7c 01       	movw	r14, r24
     40a:	8a 01       	movw	r16, r20
     40c:	84 e0       	ldi	r24, 0x04	; 4
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <malloc>
     414:	ec 01       	movw	r28, r24
     416:	d8 01       	movw	r26, r16
     418:	6c 90       	ld	r6, X
     41a:	66 20       	and	r6, r6
     41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	49 c0       	rjmp	.+146    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     420:	68 01       	movw	r12, r16
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	a7 01       	movw	r20, r14
     428:	4a 5f       	subi	r20, 0xFA	; 250
     42a:	5f 4f       	sbci	r21, 0xFF	; 255
     42c:	36 c0       	rjmp	.+108    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     42e:	a1 90       	ld	r10, Z+
     430:	bd 90       	ld	r11, X+
     432:	ab 10       	cpse	r10, r11
     434:	1c c0       	rjmp	.+56     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     436:	e4 17       	cp	r30, r20
     438:	f5 07       	cpc	r31, r21
     43a:	c9 f7       	brne	.-14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     43c:	84 e2       	ldi	r24, 0x24	; 36
     43e:	86 9f       	mul	r24, r22
     440:	d0 01       	movw	r26, r0
     442:	87 9f       	mul	r24, r23
     444:	b0 0d       	add	r27, r0
     446:	11 24       	eor	r1, r1
     448:	11 96       	adiw	r26, 0x01	; 1
     44a:	a0 0f       	add	r26, r16
     44c:	b1 1f       	adc	r27, r17
     44e:	fe 01       	movw	r30, r28
     450:	9e 01       	movw	r18, r28
     452:	2c 5f       	subi	r18, 0xFC	; 252
     454:	3f 4f       	sbci	r19, 0xFF	; 255
     456:	8d 91       	ld	r24, X+
     458:	81 93       	st	Z+, r24
     45a:	2e 17       	cp	r18, r30
     45c:	3f 07       	cpc	r19, r31
     45e:	d9 f7       	brne	.-10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	64 e0       	ldi	r22, 0x04	; 4
     466:	ce 01       	movw	r24, r28
     468:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     46c:	24 c0       	rjmp	.+72     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     46e:	93 94       	inc	r9
     470:	06 96       	adiw	r24, 0x06	; 6
     472:	2a 5f       	subi	r18, 0xFA	; 250
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	98 14       	cp	r9, r8
     478:	49 f0       	breq	.+18     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     47a:	dc 01       	movw	r26, r24
     47c:	53 96       	adiw	r26, 0x13	; 19
     47e:	ec 91       	ld	r30, X
     480:	7e 12       	cpse	r7, r30
     482:	f5 cf       	rjmp	.-22     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     484:	f7 01       	movw	r30, r14
     486:	31 96       	adiw	r30, 0x01	; 1
     488:	d9 01       	movw	r26, r18
     48a:	d1 cf       	rjmp	.-94     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     48c:	6f 5f       	subi	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	b4 e2       	ldi	r27, 0x24	; 36
     492:	cb 0e       	add	r12, r27
     494:	d1 1c       	adc	r13, r1
     496:	66 15       	cp	r22, r6
     498:	60 f4       	brcc	.+24     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     49a:	f6 01       	movw	r30, r12
     49c:	86 80       	ldd	r8, Z+6	; 0x06
     49e:	88 20       	and	r8, r8
     4a0:	a9 f3       	breq	.-22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     4a2:	d7 01       	movw	r26, r14
     4a4:	7c 90       	ld	r7, X
     4a6:	96 01       	movw	r18, r12
     4a8:	2c 5e       	subi	r18, 0xEC	; 236
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
     4ac:	c6 01       	movw	r24, r12
     4ae:	91 2c       	mov	r9, r1
     4b0:	e4 cf       	rjmp	.-56     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	8e 83       	std	Y+6, r24	; 0x06
     4b6:	ce 01       	movw	r24, r28
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	9f 90       	pop	r9
     4ce:	8f 90       	pop	r8
     4d0:	7f 90       	pop	r7
     4d2:	6f 90       	pop	r6
     4d4:	08 95       	ret

000004d6 <writeDestDSN>:
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <writeDestDSN+0xe>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <writeDestDSN+0x10>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	2f ef       	ldi	r18, 0xFF	; 255
     4ec:	29 83       	std	Y+1, r18	; 0x01
     4ee:	32 e0       	ldi	r19, 0x02	; 2
     4f0:	3a 83       	std	Y+2, r19	; 0x02
     4f2:	37 e6       	ldi	r19, 0x67	; 103
     4f4:	3b 83       	std	Y+3, r19	; 0x03
     4f6:	2c 83       	std	Y+4, r18	; 0x04
     4f8:	5d 98       	cbi	0x0b, 5	; 11
     4fa:	8c 01       	movw	r16, r24
     4fc:	7c 01       	movw	r14, r24
     4fe:	24 e0       	ldi	r18, 0x04	; 4
     500:	e2 0e       	add	r14, r18
     502:	f1 1c       	adc	r15, r1
     504:	f8 01       	movw	r30, r16
     506:	81 91       	ld	r24, Z+
     508:	8f 01       	movw	r16, r30
     50a:	8c 83       	std	Y+4, r24	; 0x04
     50c:	9b 81       	ldd	r25, Y+3	; 0x03
     50e:	9f 5f       	subi	r25, 0xFF	; 255
     510:	9b 83       	std	Y+3, r25	; 0x03
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	64 e0       	ldi	r22, 0x04	; 4
     518:	ce 01       	movw	r24, r28
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     520:	0e 15       	cp	r16, r14
     522:	1f 05       	cpc	r17, r15
     524:	79 f7       	brne	.-34     	; 0x504 <writeDestDSN+0x2e>
     526:	0e 94 e6 00 	call	0x1cc	; 0x1cc <skipBuffer>
     52a:	83 ec       	ldi	r24, 0xC3	; 195
     52c:	99 e0       	ldi	r25, 0x09	; 9
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <writeDestDSN+0x58>
     532:	00 c0       	rjmp	.+0      	; 0x534 <writeDestDSN+0x5e>
     534:	00 00       	nop
     536:	5d 9a       	sbi	0x0b, 5	; 11
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	08 95       	ret

0000054e <sendNetworkData>:
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	cd b7       	in	r28, 0x3d	; 61
     55c:	de b7       	in	r29, 0x3e	; 62
     55e:	27 97       	sbiw	r28, 0x07	; 7
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	7c 01       	movw	r14, r24
     56c:	16 2f       	mov	r17, r22
     56e:	fa 01       	movw	r30, r20
     570:	c9 01       	movw	r24, r18
     572:	23 e0       	ldi	r18, 0x03	; 3
     574:	29 83       	std	Y+1, r18	; 0x01
     576:	20 81       	ld	r18, Z
     578:	2a 83       	std	Y+2, r18	; 0x02
     57a:	21 81       	ldd	r18, Z+1	; 0x01
     57c:	2b 83       	std	Y+3, r18	; 0x03
     57e:	22 81       	ldd	r18, Z+2	; 0x02
     580:	2c 83       	std	Y+4, r18	; 0x04
     582:	23 81       	ldd	r18, Z+3	; 0x03
     584:	2d 83       	std	Y+5, r18	; 0x05
     586:	6e 83       	std	Y+6, r22	; 0x06
     588:	0f 83       	std	Y+7, r16	; 0x07
     58a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <writeDestDSN>
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	67 e0       	ldi	r22, 0x07	; 7
     594:	ce 01       	movw	r24, r28
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	61 2f       	mov	r22, r17
     5a2:	c7 01       	movw	r24, r14
     5a4:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     5a8:	27 96       	adiw	r28, 0x07	; 7
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	08 95       	ret

000005c2 <sendAck>:
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	00 d0       	rcall	.+0      	; 0x5c8 <sendAck+0x6>
     5c8:	00 d0       	rcall	.+0      	; 0x5ca <sendAck+0x8>
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <sendAck+0xa>
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	fc 01       	movw	r30, r24
     5d2:	cb 01       	movw	r24, r22
     5d4:	24 e0       	ldi	r18, 0x04	; 4
     5d6:	29 83       	std	Y+1, r18	; 0x01
     5d8:	20 81       	ld	r18, Z
     5da:	2a 83       	std	Y+2, r18	; 0x02
     5dc:	21 81       	ldd	r18, Z+1	; 0x01
     5de:	2b 83       	std	Y+3, r18	; 0x03
     5e0:	22 81       	ldd	r18, Z+2	; 0x02
     5e2:	2c 83       	std	Y+4, r18	; 0x04
     5e4:	23 81       	ldd	r18, Z+3	; 0x03
     5e6:	2d 83       	std	Y+5, r18	; 0x05
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	2e 83       	std	Y+6, r18	; 0x06
     5ec:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <writeDestDSN>
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	65 e0       	ldi	r22, 0x05	; 5
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	ce 01       	movw	r24, r28
     606:	06 96       	adiw	r24, 0x06	; 6
     608:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     60c:	26 96       	adiw	r28, 0x06	; 6
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <broadcastCon>:
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	2b 97       	sbiw	r28, 0x0b	; 11
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	7b 01       	movw	r14, r22
     63a:	5d 98       	cbi	0x0b, 5	; 11
     63c:	9f ef       	ldi	r25, 0xFF	; 255
     63e:	99 83       	std	Y+1, r25	; 0x01
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	9a 83       	std	Y+2, r25	; 0x02
     644:	9d e4       	ldi	r25, 0x4D	; 77
     646:	9b 83       	std	Y+3, r25	; 0x03
     648:	8c 83       	std	Y+4, r24	; 0x04
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	64 e0       	ldi	r22, 0x04	; 4
     650:	ce 01       	movw	r24, r28
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     658:	8b e4       	ldi	r24, 0x4B	; 75
     65a:	9d e1       	ldi	r25, 0x1D	; 29
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <broadcastCon+0x3e>
     660:	00 c0       	rjmp	.+0      	; 0x662 <broadcastCon+0x44>
     662:	00 00       	nop
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     67c:	85 e0       	ldi	r24, 0x05	; 5
     67e:	e6 e0       	ldi	r30, 0x06	; 6
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	de 01       	movw	r26, r28
     684:	15 96       	adiw	r26, 0x05	; 5
     686:	01 90       	ld	r0, Z+
     688:	0d 92       	st	X+, r0
     68a:	8a 95       	dec	r24
     68c:	e1 f7       	brne	.-8      	; 0x686 <broadcastCon+0x68>
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	8a 87       	std	Y+10, r24	; 0x0a
     692:	84 e2       	ldi	r24, 0x24	; 36
     694:	8b 87       	std	Y+11, r24	; 0x0b
     696:	14 e0       	ldi	r17, 0x04	; 4
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	65 e0       	ldi	r22, 0x05	; 5
     69e:	ce 01       	movw	r24, r28
     6a0:	05 96       	adiw	r24, 0x05	; 5
     6a2:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     6ac:	8f 81       	ldd	r24, Y+7	; 0x07
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
     6b0:	8f 83       	std	Y+7, r24	; 0x07
     6b2:	83 ec       	ldi	r24, 0xC3	; 195
     6b4:	99 e0       	ldi	r25, 0x09	; 9
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <broadcastCon+0x98>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <broadcastCon+0x9e>
     6bc:	00 00       	nop
     6be:	11 50       	subi	r17, 0x01	; 1
     6c0:	59 f7       	brne	.-42     	; 0x698 <broadcastCon+0x7a>
     6c2:	83 ed       	ldi	r24, 0xD3	; 211
     6c4:	90 e3       	ldi	r25, 0x30	; 48
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <broadcastCon+0xa8>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <broadcastCon+0xae>
     6cc:	00 00       	nop
     6ce:	5d 9a       	sbi	0x0b, 5	; 11
     6d0:	83 ec       	ldi	r24, 0xC3	; 195
     6d2:	99 e0       	ldi	r25, 0x09	; 9
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <broadcastCon+0xb6>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <broadcastCon+0xbc>
     6da:	00 00       	nop
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	62 e0       	ldi	r22, 0x02	; 2
     6e2:	ce 01       	movw	r24, r28
     6e4:	0a 96       	adiw	r24, 0x0a	; 10
     6e6:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	64 e2       	ldi	r22, 0x24	; 36
     6f0:	c7 01       	movw	r24, r14
     6f2:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     6f6:	2b 96       	adiw	r28, 0x0b	; 11
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	08 95       	ret

0000070e <updateNetworks>:
     70e:	2f 92       	push	r2
     710:	3f 92       	push	r3
     712:	4f 92       	push	r4
     714:	5f 92       	push	r5
     716:	6f 92       	push	r6
     718:	7f 92       	push	r7
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	29 97       	sbiw	r28, 0x09	; 9
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	3c 01       	movw	r6, r24
     744:	7a 83       	std	Y+2, r23	; 0x02
     746:	69 83       	std	Y+1, r22	; 0x01
     748:	7a 01       	movw	r14, r20
     74a:	29 01       	movw	r4, r18
     74c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
     750:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
     754:	86 17       	cp	r24, r22
     756:	97 07       	cpc	r25, r23
     758:	08 f0       	brcs	.+2      	; 0x75c <updateNetworks+0x4e>
     75a:	58 c3       	rjmp	.+1712   	; 0xe0c <__stack+0x50d>
     75c:	08 c0       	rjmp	.+16     	; 0x76e <updateNetworks+0x60>
     75e:	a3 ec       	ldi	r26, 0xC3	; 195
     760:	b9 e0       	ldi	r27, 0x09	; 9
     762:	11 97       	sbiw	r26, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <updateNetworks+0x54>
     766:	00 c0       	rjmp	.+0      	; 0x768 <updateNetworks+0x5a>
     768:	00 00       	nop
     76a:	81 50       	subi	r24, 0x01	; 1
     76c:	29 f4       	brne	.+10     	; 0x778 <updateNetworks+0x6a>
     76e:	29 81       	ldd	r18, Y+1	; 0x01
     770:	3a 81       	ldd	r19, Y+2	; 0x02
     772:	23 2b       	or	r18, r19
     774:	59 f4       	brne	.+22     	; 0x78c <updateNetworks+0x7e>
     776:	1d c0       	rjmp	.+58     	; 0x7b2 <updateNetworks+0xa4>
     778:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <unread0Bytes>
     77c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <unread0Bytes+0x1>
     780:	49 81       	ldd	r20, Y+1	; 0x01
     782:	5a 81       	ldd	r21, Y+2	; 0x02
     784:	24 17       	cp	r18, r20
     786:	35 07       	cpc	r19, r21
     788:	50 f7       	brcc	.-44     	; 0x75e <updateNetworks+0x50>
     78a:	f1 cf       	rjmp	.-30     	; 0x76e <updateNetworks+0x60>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	10 e0       	ldi	r17, 0x00	; 0
     792:	67 01       	movw	r12, r14
     794:	c8 0e       	add	r12, r24
     796:	d9 1e       	adc	r13, r25
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     79e:	d6 01       	movw	r26, r12
     7a0:	8c 93       	st	X, r24
     7a2:	1f 5f       	subi	r17, 0xFF	; 255
     7a4:	81 2f       	mov	r24, r17
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	e9 81       	ldd	r30, Y+1	; 0x01
     7aa:	fa 81       	ldd	r31, Y+2	; 0x02
     7ac:	8e 17       	cp	r24, r30
     7ae:	9f 07       	cpc	r25, r31
     7b0:	80 f3       	brcs	.-32     	; 0x792 <updateNetworks+0x84>
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	69 81       	ldd	r22, Y+1	; 0x01
     7b8:	c7 01       	movw	r24, r14
     7ba:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     7be:	01 30       	cpi	r16, 0x01	; 1
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <updateNetworks+0xb6>
     7c2:	4f c1       	rjmp	.+670    	; 0xa62 <__stack+0x163>
     7c4:	d2 01       	movw	r26, r4
     7c6:	14 96       	adiw	r26, 0x04	; 4
     7c8:	1c 92       	st	X, r1
     7ca:	f3 01       	movw	r30, r6
     7cc:	f0 81       	ld	r31, Z
     7ce:	f9 83       	std	Y+1, r31	; 0x01
     7d0:	f1 11       	cpse	r31, r1
     7d2:	fc c0       	rjmp	.+504    	; 0x9cc <__stack+0xcd>
     7d4:	7e c2       	rjmp	.+1276   	; 0xcd2 <__stack+0x3d3>
     7d6:	ff 24       	eor	r15, r15
     7d8:	f3 94       	inc	r15
     7da:	ee 81       	ldd	r30, Y+6	; 0x06
     7dc:	ff 81       	ldd	r31, Y+7	; 0x07
     7de:	a0 81       	ld	r26, Z
     7e0:	aa 23       	and	r26, r26
     7e2:	d9 f1       	breq	.+118    	; 0x85a <updateNetworks+0x14c>
     7e4:	d2 01       	movw	r26, r4
     7e6:	6c 91       	ld	r22, X
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	1c c0       	rjmp	.+56     	; 0x824 <updateNetworks+0x116>
     7ec:	a8 85       	ldd	r26, Y+8	; 0x08
     7ee:	b9 85       	ldd	r27, Y+9	; 0x09
     7f0:	ed 90       	ld	r14, X+
     7f2:	b9 87       	std	Y+9, r27	; 0x09
     7f4:	a8 87       	std	Y+8, r26	; 0x08
     7f6:	51 91       	ld	r21, Z+
     7f8:	e5 12       	cpse	r14, r21
     7fa:	0e c0       	rjmp	.+28     	; 0x818 <updateNetworks+0x10a>
     7fc:	43 30       	cpi	r20, 0x03	; 3
     7fe:	40 f0       	brcs	.+16     	; 0x810 <updateNetworks+0x102>
     800:	d2 01       	movw	r26, r4
     802:	14 96       	adiw	r26, 0x04	; 4
     804:	5c 91       	ld	r21, X
     806:	14 97       	sbiw	r26, 0x04	; 4
     808:	5f 5f       	subi	r21, 0xFF	; 255
     80a:	14 96       	adiw	r26, 0x04	; 4
     80c:	5c 93       	st	X, r21
     80e:	79 2d       	mov	r23, r9
     810:	4f 5f       	subi	r20, 0xFF	; 255
     812:	44 30       	cpi	r20, 0x04	; 4
     814:	59 f7       	brne	.-42     	; 0x7ec <updateNetworks+0xde>
     816:	00 c0       	rjmp	.+0      	; 0x818 <updateNetworks+0x10a>
     818:	1f 5f       	subi	r17, 0xFF	; 255
     81a:	ee 81       	ldd	r30, Y+6	; 0x06
     81c:	ff 81       	ldd	r31, Y+7	; 0x07
     81e:	a0 81       	ld	r26, Z
     820:	1a 17       	cp	r17, r26
     822:	d8 f4       	brcc	.+54     	; 0x85a <updateNetworks+0x14c>
     824:	fc 01       	movw	r30, r24
     826:	e1 0f       	add	r30, r17
     828:	f1 1d       	adc	r31, r1
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	e6 0d       	add	r30, r6
     834:	f7 1d       	adc	r31, r7
     836:	47 81       	ldd	r20, Z+7	; 0x07
     838:	64 13       	cpse	r22, r20
     83a:	ee cf       	rjmp	.-36     	; 0x818 <updateNetworks+0x10a>
     83c:	d2 01       	movw	r26, r4
     83e:	11 96       	adiw	r26, 0x01	; 1
     840:	f9 01       	movw	r30, r18
     842:	e1 0f       	add	r30, r17
     844:	f1 1d       	adc	r31, r1
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	e6 0d       	add	r30, r6
     850:	f7 1d       	adc	r31, r7
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	b9 87       	std	Y+9, r27	; 0x09
     856:	a8 87       	std	Y+8, r26	; 0x08
     858:	db cf       	rjmp	.-74     	; 0x810 <updateNetworks+0x102>
     85a:	41 e0       	ldi	r20, 0x01	; 1
     85c:	58 2d       	mov	r21, r8
     85e:	77 23       	and	r23, r23
     860:	11 f0       	breq	.+4      	; 0x866 <updateNetworks+0x158>
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	ef 2d       	mov	r30, r15
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	4e 23       	and	r20, r30
     86c:	5f 23       	and	r21, r31
     86e:	45 2b       	or	r20, r21
     870:	a1 f1       	breq	.+104    	; 0x8da <updateNetworks+0x1cc>
     872:	7a 2f       	mov	r23, r26
     874:	44 e2       	ldi	r20, 0x24	; 36
     876:	2b 81       	ldd	r18, Y+3	; 0x03
     878:	3c 81       	ldd	r19, Y+4	; 0x04
     87a:	42 9f       	mul	r20, r18
     87c:	f0 01       	movw	r30, r0
     87e:	43 9f       	mul	r20, r19
     880:	f0 0d       	add	r31, r0
     882:	11 24       	eor	r1, r1
     884:	e6 0d       	add	r30, r6
     886:	f7 1d       	adc	r31, r7
     888:	7f 5f       	subi	r23, 0xFF	; 255
     88a:	75 83       	std	Z+5, r23	; 0x05
     88c:	d2 01       	movw	r26, r4
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	e4 e2       	ldi	r30, 0x24	; 36
     894:	b9 01       	movw	r22, r18
     896:	e6 9f       	mul	r30, r22
     898:	90 01       	movw	r18, r0
     89a:	e7 9f       	mul	r30, r23
     89c:	30 0d       	add	r19, r0
     89e:	11 24       	eor	r1, r1
     8a0:	a3 01       	movw	r20, r6
     8a2:	42 0f       	add	r20, r18
     8a4:	53 1f       	adc	r21, r19
     8a6:	4b 5f       	subi	r20, 0xFB	; 251
     8a8:	5f 4f       	sbci	r21, 0xFF	; 255
     8aa:	5a 83       	std	Y+2, r21	; 0x02
     8ac:	49 83       	std	Y+1, r20	; 0x01
     8ae:	4d 91       	ld	r20, X+
     8b0:	e9 81       	ldd	r30, Y+1	; 0x01
     8b2:	fa 81       	ldd	r31, Y+2	; 0x02
     8b4:	50 81       	ld	r21, Z
     8b6:	f9 01       	movw	r30, r18
     8b8:	64 e0       	ldi	r22, 0x04	; 4
     8ba:	56 9f       	mul	r21, r22
     8bc:	e0 0d       	add	r30, r0
     8be:	f1 1d       	adc	r31, r1
     8c0:	11 24       	eor	r1, r1
     8c2:	e6 0d       	add	r30, r6
     8c4:	f7 1d       	adc	r31, r7
     8c6:	e8 0f       	add	r30, r24
     8c8:	f9 1f       	adc	r31, r25
     8ca:	47 83       	std	Z+7, r20	; 0x07
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	84 30       	cpi	r24, 0x04	; 4
     8d0:	91 05       	cpc	r25, r1
     8d2:	69 f7       	brne	.-38     	; 0x8ae <updateNetworks+0x1a0>
     8d4:	f1 2c       	mov	r15, r1
     8d6:	00 e0       	ldi	r16, 0x00	; 0
     8d8:	83 c0       	rjmp	.+262    	; 0x9e0 <__stack+0xe1>
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	58 2d       	mov	r21, r8
     8de:	ff 20       	and	r15, r15
     8e0:	11 f0       	breq	.+4      	; 0x8e6 <updateNetworks+0x1d8>
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	e7 2f       	mov	r30, r23
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	4e 23       	and	r20, r30
     8ec:	5f 23       	and	r21, r31
     8ee:	45 2b       	or	r20, r21
     8f0:	91 f1       	breq	.+100    	; 0x956 <__stack+0x57>
     8f2:	d2 01       	movw	r26, r4
     8f4:	14 96       	adiw	r26, 0x04	; 4
     8f6:	8c 91       	ld	r24, X
     8f8:	24 e2       	ldi	r18, 0x24	; 36
     8fa:	eb 81       	ldd	r30, Y+3	; 0x03
     8fc:	fc 81       	ldd	r31, Y+4	; 0x04
     8fe:	2e 9f       	mul	r18, r30
     900:	d0 01       	movw	r26, r0
     902:	2f 9f       	mul	r18, r31
     904:	b0 0d       	add	r27, r0
     906:	11 24       	eor	r1, r1
     908:	a6 0d       	add	r26, r6
     90a:	b7 1d       	adc	r27, r7
     90c:	11 96       	adiw	r26, 0x01	; 1
     90e:	9c 91       	ld	r25, X
     910:	11 97       	sbiw	r26, 0x01	; 1
     912:	08 2f       	mov	r16, r24
     914:	10 e0       	ldi	r17, 0x00	; 0
     916:	b2 01       	movw	r22, r4
     918:	34 e0       	ldi	r19, 0x04	; 4
     91a:	83 9f       	mul	r24, r19
     91c:	60 0d       	add	r22, r0
     91e:	71 1d       	adc	r23, r1
     920:	11 24       	eor	r1, r1
     922:	fb 01       	movw	r30, r22
     924:	96 83       	std	Z+6, r25	; 0x06
     926:	12 96       	adiw	r26, 0x02	; 2
     928:	8c 91       	ld	r24, X
     92a:	12 97       	sbiw	r26, 0x02	; 2
     92c:	87 83       	std	Z+7, r24	; 0x07
     92e:	13 96       	adiw	r26, 0x03	; 3
     930:	8c 91       	ld	r24, X
     932:	13 97       	sbiw	r26, 0x03	; 3
     934:	f8 01       	movw	r30, r16
     936:	32 96       	adiw	r30, 0x02	; 2
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e4 0d       	add	r30, r4
     942:	f5 1d       	adc	r31, r5
     944:	80 83       	st	Z, r24
     946:	14 96       	adiw	r26, 0x04	; 4
     948:	8c 91       	ld	r24, X
     94a:	db 01       	movw	r26, r22
     94c:	19 96       	adiw	r26, 0x09	; 9
     94e:	8c 93       	st	X, r24
     950:	f1 2c       	mov	r15, r1
     952:	00 e0       	ldi	r16, 0x00	; 0
     954:	45 c0       	rjmp	.+138    	; 0x9e0 <__stack+0xe1>
     956:	0f 5f       	subi	r16, 0xFF	; 255
     958:	f2 01       	movw	r30, r4
     95a:	44 81       	ldd	r20, Z+4	; 0x04
     95c:	04 17       	cp	r16, r20
     95e:	08 f0       	brcs	.+2      	; 0x962 <__stack+0x63>
     960:	3d c0       	rjmp	.+122    	; 0x9dc <__stack+0xdd>
     962:	40 2f       	mov	r20, r16
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	f2 01       	movw	r30, r4
     968:	64 e0       	ldi	r22, 0x04	; 4
     96a:	06 9f       	mul	r16, r22
     96c:	e0 0d       	add	r30, r0
     96e:	f1 1d       	adc	r31, r1
     970:	11 24       	eor	r1, r1
     972:	e6 81       	ldd	r30, Z+6	; 0x06
     974:	d6 01       	movw	r26, r12
     976:	6c 91       	ld	r22, X
     978:	e6 13       	cpse	r30, r22
     97a:	2f cf       	rjmp	.-418    	; 0x7da <updateNetworks+0xcc>
     97c:	fa 01       	movw	r30, r20
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	e4 0d       	add	r30, r4
     988:	f5 1d       	adc	r31, r5
     98a:	d5 01       	movw	r26, r10
     98c:	1c 91       	ld	r17, X
     98e:	67 81       	ldd	r22, Z+7	; 0x07
     990:	16 13       	cpse	r17, r22
     992:	23 cf       	rjmp	.-442    	; 0x7da <updateNetworks+0xcc>
     994:	fa 01       	movw	r30, r20
     996:	32 96       	adiw	r30, 0x02	; 2
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	e4 0d       	add	r30, r4
     9a2:	f5 1d       	adc	r31, r5
     9a4:	d1 01       	movw	r26, r2
     9a6:	1c 91       	ld	r17, X
     9a8:	60 81       	ld	r22, Z
     9aa:	16 13       	cpse	r17, r22
     9ac:	16 cf       	rjmp	.-468    	; 0x7da <updateNetworks+0xcc>
     9ae:	44 0f       	add	r20, r20
     9b0:	55 1f       	adc	r21, r21
     9b2:	44 0f       	add	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	f2 01       	movw	r30, r4
     9b8:	e4 0f       	add	r30, r20
     9ba:	f5 1f       	adc	r31, r21
     9bc:	51 85       	ldd	r21, Z+9	; 0x09
     9be:	e9 81       	ldd	r30, Y+1	; 0x01
     9c0:	fa 81       	ldd	r31, Y+2	; 0x02
     9c2:	40 81       	ld	r20, Z
     9c4:	54 17       	cp	r21, r20
     9c6:	09 f4       	brne	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	06 cf       	rjmp	.-500    	; 0x7d6 <updateNetworks+0xc8>
     9ca:	07 cf       	rjmp	.-498    	; 0x7da <updateNetworks+0xcc>
     9cc:	e1 2c       	mov	r14, r1
     9ce:	f1 2c       	mov	r15, r1
     9d0:	00 e0       	ldi	r16, 0x00	; 0
     9d2:	81 2c       	mov	r8, r1
     9d4:	99 24       	eor	r9, r9
     9d6:	93 94       	inc	r9
     9d8:	ed 82       	std	Y+5, r14	; 0x05
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <__stack+0xe1>
     9dc:	0f 2d       	mov	r16, r15
     9de:	f7 2e       	mov	r15, r23
     9e0:	fd 81       	ldd	r31, Y+5	; 0x05
     9e2:	ff 5f       	subi	r31, 0xFF	; 255
     9e4:	fd 83       	std	Y+5, r31	; 0x05
     9e6:	d3 01       	movw	r26, r6
     9e8:	8c 91       	ld	r24, X
     9ea:	f8 17       	cp	r31, r24
     9ec:	d0 f5       	brcc	.+116    	; 0xa62 <__stack+0x163>
     9ee:	f2 01       	movw	r30, r4
     9f0:	84 81       	ldd	r24, Z+4	; 0x04
     9f2:	88 23       	and	r24, r24
     9f4:	a9 f3       	breq	.-22     	; 0x9e0 <__stack+0xe1>
     9f6:	3d 81       	ldd	r19, Y+5	; 0x05
     9f8:	23 2f       	mov	r18, r19
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	3c 83       	std	Y+4, r19	; 0x04
     9fe:	2b 83       	std	Y+3, r18	; 0x03
     a00:	22 0f       	add	r18, r18
     a02:	33 1f       	adc	r19, r19
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	4b 81       	ldd	r20, Y+3	; 0x03
     a0e:	5c 81       	ldd	r21, Y+4	; 0x04
     a10:	24 0f       	add	r18, r20
     a12:	35 1f       	adc	r19, r21
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	a4 e2       	ldi	r26, 0x24	; 36
     a18:	a4 9f       	mul	r26, r20
     a1a:	c0 01       	movw	r24, r0
     a1c:	a5 9f       	mul	r26, r21
     a1e:	90 0d       	add	r25, r0
     a20:	11 24       	eor	r1, r1
     a22:	86 0d       	add	r24, r6
     a24:	97 1d       	adc	r25, r7
     a26:	9f 83       	std	Y+7, r25	; 0x07
     a28:	8e 83       	std	Y+6, r24	; 0x06
     a2a:	6c 01       	movw	r12, r24
     a2c:	bf ef       	ldi	r27, 0xFF	; 255
     a2e:	cb 1a       	sub	r12, r27
     a30:	db 0a       	sbc	r13, r27
     a32:	5c 01       	movw	r10, r24
     a34:	e2 e0       	ldi	r30, 0x02	; 2
     a36:	ae 0e       	add	r10, r30
     a38:	b1 1c       	adc	r11, r1
     a3a:	1c 01       	movw	r2, r24
     a3c:	f3 e0       	ldi	r31, 0x03	; 3
     a3e:	2f 0e       	add	r2, r31
     a40:	31 1c       	adc	r3, r1
     a42:	04 96       	adiw	r24, 0x04	; 4
     a44:	9a 83       	std	Y+2, r25	; 0x02
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	4e 81       	ldd	r20, Y+6	; 0x06
     a4a:	5f 81       	ldd	r21, Y+7	; 0x07
     a4c:	4b 5f       	subi	r20, 0xFB	; 251
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	c9 01       	movw	r24, r18
     a52:	2e 5f       	subi	r18, 0xFE	; 254
     a54:	3f 4f       	sbci	r19, 0xFF	; 255
     a56:	7f 2d       	mov	r23, r15
     a58:	f0 2e       	mov	r15, r16
     a5a:	06 2f       	mov	r16, r22
     a5c:	5f 83       	std	Y+7, r21	; 0x07
     a5e:	4e 83       	std	Y+6, r20	; 0x06
     a60:	80 cf       	rjmp	.-256    	; 0x962 <__stack+0x63>
     a62:	f3 01       	movw	r30, r6
     a64:	f0 81       	ld	r31, Z
     a66:	f9 83       	std	Y+1, r31	; 0x01
     a68:	ff 23       	and	r31, r31
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	32 c1       	rjmp	.+612    	; 0xcd2 <__stack+0x3d3>
     a6e:	d2 01       	movw	r26, r4
     a70:	1c 91       	ld	r17, X
     a72:	d3 01       	movw	r26, r6
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	1b 82       	std	Y+3, r1	; 0x03
     a7c:	04 e2       	ldi	r16, 0x24	; 36
     a7e:	ff 24       	eor	r15, r15
     a80:	f3 94       	inc	r15
     a82:	d1 2c       	mov	r13, r1
     a84:	cf 2e       	mov	r12, r31
     a86:	0f c1       	rjmp	.+542    	; 0xca6 <__stack+0x3a7>
     a88:	df 2c       	mov	r13, r15
     a8a:	82 2f       	mov	r24, r18
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	fa 01       	movw	r30, r20
     a90:	e8 0f       	add	r30, r24
     a92:	f9 1f       	adc	r31, r25
     a94:	2f 5f       	subi	r18, 0xFF	; 255
     a96:	84 0d       	add	r24, r4
     a98:	95 1d       	adc	r25, r5
     a9a:	e1 80       	ldd	r14, Z+1	; 0x01
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	e8 12       	cpse	r14, r24
     aa2:	07 c0       	rjmp	.+14     	; 0xab2 <__stack+0x1b3>
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	82 0f       	add	r24, r18
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	08 f0       	brcs	.+2      	; 0xaae <__stack+0x1af>
     aac:	9a c1       	rjmp	.+820    	; 0xde2 <__stack+0x4e3>
     aae:	24 30       	cpi	r18, 0x04	; 4
     ab0:	60 f3       	brcs	.-40     	; 0xa8a <__stack+0x18b>
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	df 12       	cpse	r13, r31
     ab6:	f1 c0       	rjmp	.+482    	; 0xc9a <__stack+0x39b>
     ab8:	d2 01       	movw	r26, r4
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	fc 90       	ld	r15, X
     abe:	14 97       	sbiw	r26, 0x04	; 4
     ac0:	15 96       	adiw	r26, 0x05	; 5
     ac2:	ec 90       	ld	r14, X
     ac4:	43 2f       	mov	r20, r19
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	f3 01       	movw	r30, r6
     aca:	b4 e2       	ldi	r27, 0x24	; 36
     acc:	3b 9f       	mul	r19, r27
     ace:	e0 0d       	add	r30, r0
     ad0:	f1 1d       	adc	r31, r1
     ad2:	11 24       	eor	r1, r1
     ad4:	86 81       	ldd	r24, Z+6	; 0x06
     ad6:	e8 12       	cpse	r14, r24
     ad8:	5e c0       	rjmp	.+188    	; 0xb96 <__stack+0x297>
     ada:	84 e2       	ldi	r24, 0x24	; 36
     adc:	84 9f       	mul	r24, r20
     ade:	f0 01       	movw	r30, r0
     ae0:	85 9f       	mul	r24, r21
     ae2:	f0 0d       	add	r31, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	e6 0d       	add	r30, r6
     ae8:	f7 1d       	adc	r31, r7
     aea:	85 81       	ldd	r24, Z+5	; 0x05
     aec:	f8 12       	cpse	r15, r24
     aee:	53 c0       	rjmp	.+166    	; 0xb96 <__stack+0x297>
     af0:	ff 20       	and	r15, r15
     af2:	09 f4       	brne	.+2      	; 0xaf6 <__stack+0x1f7>
     af4:	7a c1       	rjmp	.+756    	; 0xdea <__stack+0x4eb>
     af6:	e4 e2       	ldi	r30, 0x24	; 36
     af8:	3e 9f       	mul	r19, r30
     afa:	c0 01       	movw	r24, r0
     afc:	11 24       	eor	r1, r1
     afe:	b3 01       	movw	r22, r6
     b00:	68 0f       	add	r22, r24
     b02:	79 1f       	adc	r23, r25
     b04:	5a 82       	std	Y+2, r5	; 0x02
     b06:	49 82       	std	Y+1, r4	; 0x01
     b08:	08 96       	adiw	r24, 0x08	; 8
     b0a:	86 0d       	add	r24, r6
     b0c:	97 1d       	adc	r25, r7
     b0e:	d1 2c       	mov	r13, r1
     b10:	13 c0       	rjmp	.+38     	; 0xb38 <__stack+0x239>
     b12:	01 91       	ld	r16, Z+
     b14:	1d 91       	ld	r17, X+
     b16:	01 13       	cpse	r16, r17
     b18:	3e c0       	rjmp	.+124    	; 0xb96 <__stack+0x297>
     b1a:	2f 5f       	subi	r18, 0xFF	; 255
     b1c:	24 30       	cpi	r18, 0x04	; 4
     b1e:	c9 f7       	brne	.-14     	; 0xb12 <__stack+0x213>
     b20:	d3 94       	inc	r13
     b22:	6c 5f       	subi	r22, 0xFC	; 252
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	a9 81       	ldd	r26, Y+1	; 0x01
     b28:	ba 81       	ldd	r27, Y+2	; 0x02
     b2a:	14 96       	adiw	r26, 0x04	; 4
     b2c:	ba 83       	std	Y+2, r27	; 0x02
     b2e:	a9 83       	std	Y+1, r26	; 0x01
     b30:	04 96       	adiw	r24, 0x04	; 4
     b32:	fd 14       	cp	r15, r13
     b34:	09 f4       	brne	.+2      	; 0xb38 <__stack+0x239>
     b36:	59 c1       	rjmp	.+690    	; 0xdea <__stack+0x4eb>
     b38:	db 01       	movw	r26, r22
     b3a:	17 96       	adiw	r26, 0x07	; 7
     b3c:	ec 91       	ld	r30, X
     b3e:	a9 81       	ldd	r26, Y+1	; 0x01
     b40:	ba 81       	ldd	r27, Y+2	; 0x02
     b42:	16 96       	adiw	r26, 0x06	; 6
     b44:	2c 91       	ld	r18, X
     b46:	16 97       	sbiw	r26, 0x06	; 6
     b48:	e2 13       	cpse	r30, r18
     b4a:	25 c0       	rjmp	.+74     	; 0xb96 <__stack+0x297>
     b4c:	17 96       	adiw	r26, 0x07	; 7
     b4e:	fc 01       	movw	r30, r24
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	df cf       	rjmp	.-66     	; 0xb12 <__stack+0x213>
     b54:	21 91       	ld	r18, Z+
     b56:	9d 91       	ld	r25, X+
     b58:	29 13       	cpse	r18, r25
     b5a:	1d c0       	rjmp	.+58     	; 0xb96 <__stack+0x297>
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	86 30       	cpi	r24, 0x06	; 6
     b60:	c9 f7       	brne	.-14     	; 0xb54 <__stack+0x255>
     b62:	d3 94       	inc	r13
     b64:	0a 5f       	subi	r16, 0xFA	; 250
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	36 96       	adiw	r30, 0x06	; 6
     b6e:	fa 83       	std	Y+2, r31	; 0x02
     b70:	e9 83       	std	Y+1, r30	; 0x01
     b72:	6a 5f       	subi	r22, 0xFA	; 250
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	ed 14       	cp	r14, r13
     b78:	09 f4       	brne	.+2      	; 0xb7c <__stack+0x27d>
     b7a:	50 c1       	rjmp	.+672    	; 0xe1c <__stack+0x51d>
     b7c:	d8 01       	movw	r26, r16
     b7e:	53 96       	adiw	r26, 0x13	; 19
     b80:	9c 91       	ld	r25, X
     b82:	e9 81       	ldd	r30, Y+1	; 0x01
     b84:	fa 81       	ldd	r31, Y+2	; 0x02
     b86:	82 89       	ldd	r24, Z+18	; 0x12
     b88:	98 13       	cpse	r25, r24
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <__stack+0x297>
     b8c:	df 01       	movw	r26, r30
     b8e:	53 96       	adiw	r26, 0x13	; 19
     b90:	fb 01       	movw	r30, r22
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	df cf       	rjmp	.-66     	; 0xb54 <__stack+0x255>
     b96:	84 e2       	ldi	r24, 0x24	; 36
     b98:	84 9f       	mul	r24, r20
     b9a:	f0 01       	movw	r30, r0
     b9c:	85 9f       	mul	r24, r21
     b9e:	f0 0d       	add	r31, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	e6 0d       	add	r30, r6
     ba4:	f7 1d       	adc	r31, r7
     ba6:	f5 82       	std	Z+5, r15	; 0x05
     ba8:	d2 01       	movw	r26, r4
     baa:	15 96       	adiw	r26, 0x05	; 5
     bac:	8c 91       	ld	r24, X
     bae:	15 97       	sbiw	r26, 0x05	; 5
     bb0:	86 83       	std	Z+6, r24	; 0x06
     bb2:	14 96       	adiw	r26, 0x04	; 4
     bb4:	8c 91       	ld	r24, X
     bb6:	88 23       	and	r24, r24
     bb8:	09 f4       	brne	.+2      	; 0xbbc <__stack+0x2bd>
     bba:	44 c0       	rjmp	.+136    	; 0xc44 <__stack+0x345>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	ca 01       	movw	r24, r20
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	48 0f       	add	r20, r24
     bce:	59 1f       	adc	r21, r25
     bd0:	82 2f       	mov	r24, r18
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	82 01       	movw	r16, r4
     bd6:	b4 e0       	ldi	r27, 0x04	; 4
     bd8:	2b 9f       	mul	r18, r27
     bda:	00 0d       	add	r16, r0
     bdc:	11 1d       	adc	r17, r1
     bde:	11 24       	eor	r1, r1
     be0:	d8 01       	movw	r26, r16
     be2:	16 96       	adiw	r26, 0x06	; 6
     be4:	ec 91       	ld	r30, X
     be6:	ba 01       	movw	r22, r20
     be8:	68 0f       	add	r22, r24
     bea:	79 1f       	adc	r23, r25
     bec:	db 01       	movw	r26, r22
     bee:	aa 0f       	add	r26, r26
     bf0:	bb 1f       	adc	r27, r27
     bf2:	aa 0f       	add	r26, r26
     bf4:	bb 1f       	adc	r27, r27
     bf6:	a6 0d       	add	r26, r6
     bf8:	b7 1d       	adc	r27, r7
     bfa:	ba 83       	std	Y+2, r27	; 0x02
     bfc:	a9 83       	std	Y+1, r26	; 0x01
     bfe:	17 96       	adiw	r26, 0x07	; 7
     c00:	ec 93       	st	X, r30
     c02:	f8 01       	movw	r30, r16
     c04:	a7 81       	ldd	r26, Z+7	; 0x07
     c06:	fb 01       	movw	r30, r22
     c08:	32 96       	adiw	r30, 0x02	; 2
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	e6 0d       	add	r30, r6
     c14:	f7 1d       	adc	r31, r7
     c16:	a0 83       	st	Z, r26
     c18:	dc 01       	movw	r26, r24
     c1a:	12 96       	adiw	r26, 0x02	; 2
     c1c:	aa 0f       	add	r26, r26
     c1e:	bb 1f       	adc	r27, r27
     c20:	aa 0f       	add	r26, r26
     c22:	bb 1f       	adc	r27, r27
     c24:	a4 0d       	add	r26, r4
     c26:	b5 1d       	adc	r27, r5
     c28:	8c 91       	ld	r24, X
     c2a:	81 83       	std	Z+1, r24	; 0x01
     c2c:	d8 01       	movw	r26, r16
     c2e:	19 96       	adiw	r26, 0x09	; 9
     c30:	8c 91       	ld	r24, X
     c32:	e9 81       	ldd	r30, Y+1	; 0x01
     c34:	fa 81       	ldd	r31, Y+2	; 0x02
     c36:	82 87       	std	Z+10, r24	; 0x0a
     c38:	2f 5f       	subi	r18, 0xFF	; 255
     c3a:	d2 01       	movw	r26, r4
     c3c:	14 96       	adiw	r26, 0x04	; 4
     c3e:	8c 91       	ld	r24, X
     c40:	28 17       	cp	r18, r24
     c42:	30 f2       	brcs	.-116    	; 0xbd0 <__stack+0x2d1>
     c44:	f2 01       	movw	r30, r4
     c46:	85 81       	ldd	r24, Z+5	; 0x05
     c48:	88 23       	and	r24, r24
     c4a:	09 f4       	brne	.+2      	; 0xc4e <__stack+0x34f>
     c4c:	e7 c0       	rjmp	.+462    	; 0xe1c <__stack+0x51d>
     c4e:	f4 e2       	ldi	r31, 0x24	; 36
     c50:	3f 9f       	mul	r19, r31
     c52:	90 01       	movw	r18, r0
     c54:	11 24       	eor	r1, r1
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	2d 5e       	subi	r18, 0xED	; 237
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <__stack+0x375>
     c5e:	9d 91       	ld	r25, X+
     c60:	91 93       	st	Z+, r25
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	e1 f7       	brne	.-8      	; 0xc5e <__stack+0x35f>
     c66:	4f 5f       	subi	r20, 0xFF	; 255
     c68:	d2 01       	movw	r26, r4
     c6a:	15 96       	adiw	r26, 0x05	; 5
     c6c:	8c 91       	ld	r24, X
     c6e:	48 17       	cp	r20, r24
     c70:	08 f0       	brcs	.+2      	; 0xc74 <__stack+0x375>
     c72:	d4 c0       	rjmp	.+424    	; 0xe1c <__stack+0x51d>
     c74:	84 2f       	mov	r24, r20
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	fc 01       	movw	r30, r24
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	e8 0f       	add	r30, r24
     c80:	f9 1f       	adc	r31, r25
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	df 01       	movw	r26, r30
     c88:	52 96       	adiw	r26, 0x12	; 18
     c8a:	a4 0d       	add	r26, r4
     c8c:	b5 1d       	adc	r27, r5
     c8e:	e2 0f       	add	r30, r18
     c90:	f3 1f       	adc	r31, r19
     c92:	e6 0d       	add	r30, r6
     c94:	f7 1d       	adc	r31, r7
     c96:	86 e0       	ldi	r24, 0x06	; 6
     c98:	e2 cf       	rjmp	.-60     	; 0xc5e <__stack+0x35f>
     c9a:	3f 5f       	subi	r19, 0xFF	; 255
     c9c:	6f 5f       	subi	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	94 96       	adiw	r26, 0x24	; 36
     ca2:	3c 15       	cp	r19, r12
     ca4:	71 f0       	breq	.+28     	; 0xcc2 <__stack+0x3c3>
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	8c 91       	ld	r24, X
     caa:	11 97       	sbiw	r26, 0x01	; 1
     cac:	81 13       	cpse	r24, r17
     cae:	01 cf       	rjmp	.-510    	; 0xab2 <__stack+0x1b3>
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	06 9f       	mul	r16, r22
     cb4:	a0 01       	movw	r20, r0
     cb6:	07 9f       	mul	r16, r23
     cb8:	50 0d       	add	r21, r0
     cba:	11 24       	eor	r1, r1
     cbc:	46 0d       	add	r20, r6
     cbe:	57 1d       	adc	r21, r7
     cc0:	f1 ce       	rjmp	.-542    	; 0xaa4 <__stack+0x1a5>
     cc2:	db 82       	std	Y+3, r13	; 0x03
     cc4:	c9 82       	std	Y+1, r12	; 0x01
     cc6:	d1 10       	cpse	r13, r1
     cc8:	a9 c0       	rjmp	.+338    	; 0xe1c <__stack+0x51d>
     cca:	bc 2d       	mov	r27, r12
     ccc:	b5 30       	cpi	r27, 0x05	; 5
     cce:	09 f4       	brne	.+2      	; 0xcd2 <__stack+0x3d3>
     cd0:	a5 c0       	rjmp	.+330    	; 0xe1c <__stack+0x51d>
     cd2:	49 81       	ldd	r20, Y+1	; 0x01
     cd4:	4f 5f       	subi	r20, 0xFF	; 255
     cd6:	f3 01       	movw	r30, r6
     cd8:	40 83       	st	Z, r20
     cda:	d2 01       	movw	r26, r4
     cdc:	14 96       	adiw	r26, 0x04	; 4
     cde:	2c 91       	ld	r18, X
     ce0:	84 2f       	mov	r24, r20
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	b4 e2       	ldi	r27, 0x24	; 36
     ce6:	4b 9f       	mul	r20, r27
     ce8:	e0 0d       	add	r30, r0
     cea:	f1 1d       	adc	r31, r1
     cec:	11 24       	eor	r1, r1
     cee:	25 83       	std	Z+5, r18	; 0x05
     cf0:	d2 01       	movw	r26, r4
     cf2:	15 96       	adiw	r26, 0x05	; 5
     cf4:	2c 91       	ld	r18, X
     cf6:	15 97       	sbiw	r26, 0x05	; 5
     cf8:	25 83       	std	Z+5, r18	; 0x05
     cfa:	14 96       	adiw	r26, 0x04	; 4
     cfc:	2c 91       	ld	r18, X
     cfe:	22 23       	and	r18, r18
     d00:	09 f4       	brne	.+2      	; 0xd04 <__stack+0x405>
     d02:	44 c0       	rjmp	.+136    	; 0xd8c <__stack+0x48d>
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	9c 01       	movw	r18, r24
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	22 0f       	add	r18, r18
     d12:	33 1f       	adc	r19, r19
     d14:	28 0f       	add	r18, r24
     d16:	39 1f       	adc	r19, r25
     d18:	85 2f       	mov	r24, r21
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	82 01       	movw	r16, r4
     d1e:	b4 e0       	ldi	r27, 0x04	; 4
     d20:	5b 9f       	mul	r21, r27
     d22:	00 0d       	add	r16, r0
     d24:	11 1d       	adc	r17, r1
     d26:	11 24       	eor	r1, r1
     d28:	d8 01       	movw	r26, r16
     d2a:	16 96       	adiw	r26, 0x06	; 6
     d2c:	ec 91       	ld	r30, X
     d2e:	b9 01       	movw	r22, r18
     d30:	68 0f       	add	r22, r24
     d32:	79 1f       	adc	r23, r25
     d34:	db 01       	movw	r26, r22
     d36:	aa 0f       	add	r26, r26
     d38:	bb 1f       	adc	r27, r27
     d3a:	aa 0f       	add	r26, r26
     d3c:	bb 1f       	adc	r27, r27
     d3e:	a6 0d       	add	r26, r6
     d40:	b7 1d       	adc	r27, r7
     d42:	ba 83       	std	Y+2, r27	; 0x02
     d44:	a9 83       	std	Y+1, r26	; 0x01
     d46:	17 96       	adiw	r26, 0x07	; 7
     d48:	ec 93       	st	X, r30
     d4a:	f8 01       	movw	r30, r16
     d4c:	a7 81       	ldd	r26, Z+7	; 0x07
     d4e:	fb 01       	movw	r30, r22
     d50:	32 96       	adiw	r30, 0x02	; 2
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	e6 0d       	add	r30, r6
     d5c:	f7 1d       	adc	r31, r7
     d5e:	a0 83       	st	Z, r26
     d60:	dc 01       	movw	r26, r24
     d62:	12 96       	adiw	r26, 0x02	; 2
     d64:	aa 0f       	add	r26, r26
     d66:	bb 1f       	adc	r27, r27
     d68:	aa 0f       	add	r26, r26
     d6a:	bb 1f       	adc	r27, r27
     d6c:	a4 0d       	add	r26, r4
     d6e:	b5 1d       	adc	r27, r5
     d70:	8c 91       	ld	r24, X
     d72:	81 83       	std	Z+1, r24	; 0x01
     d74:	d8 01       	movw	r26, r16
     d76:	19 96       	adiw	r26, 0x09	; 9
     d78:	8c 91       	ld	r24, X
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	82 87       	std	Z+10, r24	; 0x0a
     d80:	5f 5f       	subi	r21, 0xFF	; 255
     d82:	d2 01       	movw	r26, r4
     d84:	14 96       	adiw	r26, 0x04	; 4
     d86:	8c 91       	ld	r24, X
     d88:	58 17       	cp	r21, r24
     d8a:	30 f2       	brcs	.-116    	; 0xd18 <__stack+0x419>
     d8c:	f2 01       	movw	r30, r4
     d8e:	85 81       	ldd	r24, Z+5	; 0x05
     d90:	88 23       	and	r24, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <__stack+0x497>
     d94:	43 c0       	rjmp	.+134    	; 0xe1c <__stack+0x51d>
     d96:	f4 e2       	ldi	r31, 0x24	; 36
     d98:	4f 9f       	mul	r20, r31
     d9a:	a0 01       	movw	r20, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	4d 5e       	subi	r20, 0xED	; 237
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	0a c0       	rjmp	.+20     	; 0xdba <__stack+0x4bb>
     da6:	9d 91       	ld	r25, X+
     da8:	91 93       	st	Z+, r25
     daa:	81 50       	subi	r24, 0x01	; 1
     dac:	e1 f7       	brne	.-8      	; 0xda6 <__stack+0x4a7>
     dae:	6f 5f       	subi	r22, 0xFF	; 255
     db0:	d2 01       	movw	r26, r4
     db2:	15 96       	adiw	r26, 0x05	; 5
     db4:	8c 91       	ld	r24, X
     db6:	68 17       	cp	r22, r24
     db8:	88 f5       	brcc	.+98     	; 0xe1c <__stack+0x51d>
     dba:	86 2f       	mov	r24, r22
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9c 01       	movw	r18, r24
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	dc 01       	movw	r26, r24
     dce:	52 96       	adiw	r26, 0x12	; 18
     dd0:	a4 0d       	add	r26, r4
     dd2:	b5 1d       	adc	r27, r5
     dd4:	84 0f       	add	r24, r20
     dd6:	95 1f       	adc	r25, r21
     dd8:	f3 01       	movw	r30, r6
     dda:	e8 0f       	add	r30, r24
     ddc:	f9 1f       	adc	r31, r25
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	e2 cf       	rjmp	.-60     	; 0xda6 <__stack+0x4a7>
     de2:	24 30       	cpi	r18, 0x04	; 4
     de4:	08 f4       	brcc	.+2      	; 0xde8 <__stack+0x4e9>
     de6:	50 ce       	rjmp	.-864    	; 0xa88 <__stack+0x189>
     de8:	67 ce       	rjmp	.-818    	; 0xab8 <__stack+0x1b9>
     dea:	ee 20       	and	r14, r14
     dec:	b9 f0       	breq	.+46     	; 0xe1c <__stack+0x51d>
     dee:	b4 e2       	ldi	r27, 0x24	; 36
     df0:	3b 9f       	mul	r19, r27
     df2:	c0 01       	movw	r24, r0
     df4:	11 24       	eor	r1, r1
     df6:	83 01       	movw	r16, r6
     df8:	08 0f       	add	r16, r24
     dfa:	19 1f       	adc	r17, r25
     dfc:	5a 82       	std	Y+2, r5	; 0x02
     dfe:	49 82       	std	Y+1, r4	; 0x01
     e00:	44 96       	adiw	r24, 0x14	; 20
     e02:	b3 01       	movw	r22, r6
     e04:	68 0f       	add	r22, r24
     e06:	79 1f       	adc	r23, r25
     e08:	d1 2c       	mov	r13, r1
     e0a:	b8 ce       	rjmp	.-656    	; 0xb7c <__stack+0x27d>
     e0c:	e3 ec       	ldi	r30, 0xC3	; 195
     e0e:	f9 e0       	ldi	r31, 0x09	; 9
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <__stack+0x511>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <__stack+0x517>
     e16:	00 00       	nop
     e18:	85 e6       	ldi	r24, 0x65	; 101
     e1a:	ae cc       	rjmp	.-1700   	; 0x778 <updateNetworks+0x6a>
     e1c:	29 96       	adiw	r28, 0x09	; 9
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	4f 90       	pop	r4
     e48:	3f 90       	pop	r3
     e4a:	2f 90       	pop	r2
     e4c:	08 95       	ret

00000e4e <handleMessages>:


uint8_t handleMessages(uint8_t UARTPort, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
     e4e:	2f 92       	push	r2
     e50:	3f 92       	push	r3
     e52:	4f 92       	push	r4
     e54:	5f 92       	push	r5
     e56:	6f 92       	push	r6
     e58:	7f 92       	push	r7
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	6d 97       	sbiw	r28, 0x1d	; 29
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	7b 01       	movw	r14, r22
     e84:	59 8f       	std	Y+25, r21	; 0x19
     e86:	48 8f       	std	Y+24, r20	; 0x18
     e88:	49 01       	movw	r8, r18
     e8a:	58 01       	movw	r10, r16
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
     e8c:	6d b6       	in	r6, 0x3d	; 61
     e8e:	7e b6       	in	r7, 0x3e	; 62

uint8_t handleMessages(uint8_t UARTPort, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
	
	uint8_t msgType;
	
	if (UARTPort == 0){
     e90:	81 11       	cpse	r24, r1
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <handleMessages+0x52>
		msgType = getChar(0);		// Message type is stored as the first byte
     e94:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t sourceDSN[4];
	// Message that HUMPRO received over air
	
	
	if (msgType == 0x01){
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	09 f0       	breq	.+2      	; 0xe9e <handleMessages+0x50>
     e9c:	f6 c0       	rjmp	.+492    	; 0x108a <handleMessages+0x23c>
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <handleMessages+0x6c>
	
	if (UARTPort == 0){
		msgType = getChar(0);		// Message type is stored as the first byte
	}
	else{
		getChar(1);
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		getChar(1);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		msgType = getChar(1);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t sourceDSN[4];
	// Message that HUMPRO received over air
	
	
	if (msgType == 0x01){
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <handleMessages+0x6a>
     eb6:	e9 c0       	rjmp	.+466    	; 0x108a <handleMessages+0x23c>
     eb8:	c8 c0       	rjmp	.+400    	; 0x104a <handleMessages+0x1fc>
		// [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte),
		//  msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
		
		if (UARTPort == 0){
     eba:	2d b6       	in	r2, 0x3d	; 61
     ebc:	3e b6       	in	r3, 0x3e	; 62
			uint8_t deviceNumInPath = getChar(0) + 1;		// Increment to this device
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     ec4:	55 24       	eor	r5, r5
     ec6:	53 94       	inc	r5
     ec8:	58 0e       	add	r5, r24
			uint8_t msgPathSize = getChar(0);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     ed0:	98 2e       	mov	r9, r24
			uint8_t msgSize = getChar(0);
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     ed8:	88 2e       	mov	r8, r24
			uint8_t msg[msgSize];
     eda:	2d b7       	in	r18, 0x3d	; 61
     edc:	3e b7       	in	r19, 0x3e	; 62
     ede:	28 1b       	sub	r18, r24
     ee0:	31 09       	sbc	r19, r1
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	3e bf       	out	0x3e, r19	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	2d bf       	out	0x3d, r18	; 61
     eec:	8d b7       	in	r24, 0x3d	; 61
     eee:	9e b7       	in	r25, 0x3e	; 62
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	9f 8b       	std	Y+23, r25	; 0x17
     ef4:	8e 8b       	std	Y+22, r24	; 0x16
			uint8_t msgPath[msgPathSize*4];
     ef6:	e9 2c       	mov	r14, r9
     ef8:	f1 2c       	mov	r15, r1
     efa:	ee 0c       	add	r14, r14
     efc:	ff 1c       	adc	r15, r15
     efe:	ee 0c       	add	r14, r14
     f00:	ff 1c       	adc	r15, r15
     f02:	ad b7       	in	r26, 0x3d	; 61
     f04:	be b7       	in	r27, 0x3e	; 62
     f06:	ae 19       	sub	r26, r14
     f08:	bf 09       	sbc	r27, r15
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	be bf       	out	0x3e, r27	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	ad bf       	out	0x3d, r26	; 61
     f14:	ed b7       	in	r30, 0x3d	; 61
     f16:	fe b7       	in	r31, 0x3e	; 62
     f18:	31 96       	adiw	r30, 0x01	; 1
     f1a:	f9 8f       	std	Y+25, r31	; 0x19
     f1c:	e8 8f       	std	Y+24, r30	; 0x18
     f1e:	6f 01       	movw	r12, r30
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
     f20:	1e 14       	cp	r1, r14
     f22:	1f 04       	cpc	r1, r15
     f24:	0c f0       	brlt	.+2      	; 0xf28 <handleMessages+0xda>
     f26:	08 c3       	rjmp	.+1552   	; 0x1538 <handleMessages+0x6ea>
     f28:	00 e0       	ldi	r16, 0x00	; 0
     f2a:	10 e0       	ldi	r17, 0x00	; 0
     f2c:	41 2c       	mov	r4, r1
				msgPath[i] = getChar(0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f34:	f6 01       	movw	r30, r12
     f36:	e0 0f       	add	r30, r16
     f38:	f1 1f       	adc	r31, r17
     f3a:	80 83       	st	Z, r24
			uint8_t deviceNumInPath = getChar(0) + 1;		// Increment to this device
			uint8_t msgPathSize = getChar(0);
			uint8_t msgSize = getChar(0);
			uint8_t msg[msgSize];
			uint8_t msgPath[msgPathSize*4];
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
     f3c:	43 94       	inc	r4
     f3e:	04 2d       	mov	r16, r4
     f40:	10 e0       	ldi	r17, 0x00	; 0
     f42:	0e 15       	cp	r16, r14
     f44:	1f 05       	cpc	r17, r15
     f46:	9c f3       	brlt	.-26     	; 0xf2e <handleMessages+0xe0>
     f48:	f7 c2       	rjmp	.+1518   	; 0x1538 <handleMessages+0x6ea>
				msgPath[i] = getChar(0);
			}
			
			uint8_t destPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				destPhoneAdd[i] = getChar(0);
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f50:	d8 01       	movw	r26, r16
     f52:	8d 93       	st	X+, r24
     f54:	8d 01       	movw	r16, r26
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
				msgPath[i] = getChar(0);
			}
			
			uint8_t destPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
     f56:	ae 15       	cp	r26, r14
     f58:	bf 05       	cpc	r27, r15
     f5a:	b9 f7       	brne	.-18     	; 0xf4a <handleMessages+0xfc>
     f5c:	8e 01       	movw	r16, r28
     f5e:	0b 5f       	subi	r16, 0xFB	; 251
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	7e 01       	movw	r14, r28
     f64:	bb e0       	ldi	r27, 0x0B	; 11
     f66:	eb 0e       	add	r14, r27
     f68:	f1 1c       	adc	r15, r1
				destPhoneAdd[i] = getChar(0);
			}
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				srcPhoneAdd[i] = getChar(0);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f70:	f8 01       	movw	r30, r16
     f72:	81 93       	st	Z+, r24
     f74:	8f 01       	movw	r16, r30
			for (uint8_t i = 0; i < 6; i ++){
				destPhoneAdd[i] = getChar(0);
			}
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
     f76:	ee 15       	cp	r30, r14
     f78:	ff 05       	cpc	r31, r15
     f7a:	b9 f7       	brne	.-18     	; 0xf6a <handleMessages+0x11c>
				srcPhoneAdd[i] = getChar(0);
			}
			for (uint8_t i = 0; i < msgSize; i++){
     f7c:	88 20       	and	r8, r8
     f7e:	a1 f0       	breq	.+40     	; 0xfa8 <handleMessages+0x15a>
     f80:	0e 89       	ldd	r16, Y+22	; 0x16
     f82:	1f 89       	ldd	r17, Y+23	; 0x17
     f84:	ee 24       	eor	r14, r14
     f86:	ea 94       	dec	r14
     f88:	e8 0c       	add	r14, r8
     f8a:	f1 2c       	mov	r15, r1
     f8c:	ff ef       	ldi	r31, 0xFF	; 255
     f8e:	ef 1a       	sub	r14, r31
     f90:	ff 0a       	sbc	r15, r31
     f92:	e0 0e       	add	r14, r16
     f94:	f1 1e       	adc	r15, r17
				msg[i] = getChar(0);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f9c:	d8 01       	movw	r26, r16
     f9e:	8d 93       	st	X+, r24
     fa0:	8d 01       	movw	r16, r26
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				srcPhoneAdd[i] = getChar(0);
			}
			for (uint8_t i = 0; i < msgSize; i++){
     fa2:	ae 15       	cp	r26, r14
     fa4:	bf 05       	cpc	r27, r15
     fa6:	b9 f7       	brne	.-18     	; 0xf96 <handleMessages+0x148>
				msg[i] = getChar(0);
			}
			
			// Seeing if the this device is the last in the path, if so send message data to esp to be transmitted to the phone
			if (deviceNumInPath == msgPathSize){
     fa8:	59 10       	cpse	r5, r9
     faa:	11 c0       	rjmp	.+34     	; 0xfce <handleMessages+0x180>
				uint8_t espMsg[] = {msgType,destPhoneAdd,srcPhoneAdd,msgSize,msg};
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	89 8b       	std	Y+17, r24	; 0x11
     fb0:	ce 01       	movw	r24, r28
     fb2:	0b 96       	adiw	r24, 0x0b	; 11
     fb4:	8a 8b       	std	Y+18, r24	; 0x12
     fb6:	06 97       	sbiw	r24, 0x06	; 6
     fb8:	8b 8b       	std	Y+19, r24	; 0x13
     fba:	8c 8a       	std	Y+20, r8	; 0x14
     fbc:	be 89       	ldd	r27, Y+22	; 0x16
     fbe:	bd 8b       	std	Y+21, r27	; 0x15
				TXWrite(espMsg,sizeof(espMsg),1);
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	65 e0       	ldi	r22, 0x05	; 5
     fc6:	0c 96       	adiw	r24, 0x0c	; 12
     fc8:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     fcc:	38 c0       	rjmp	.+112    	; 0x103e <handleMessages+0x1f0>
			}
			
			// If not pass along the message to the next NUB device
			else{
				uint8_t msgHeader[] = {msgType,deviceNumInPath,msgPathSize,msgSize};
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 8b       	std	Y+17, r24	; 0x11
     fd2:	5a 8a       	std	Y+18, r5	; 0x12
     fd4:	9b 8a       	std	Y+19, r9	; 0x13
     fd6:	8c 8a       	std	Y+20, r8	; 0x14
				
				writeDestDSN(msgPath[deviceNumInPath + 1]);		// The next devices DSN
     fd8:	e8 8d       	ldd	r30, Y+24	; 0x18
     fda:	f9 8d       	ldd	r31, Y+25	; 0x19
     fdc:	e5 0d       	add	r30, r5
     fde:	f1 1d       	adc	r31, r1
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <writeDestDSN>
				
				// Send [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte),
				//       msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
				
				TXWrite(msgHeader,sizeof(msgHeader),0);
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	64 e0       	ldi	r22, 0x04	; 4
     fee:	ce 01       	movw	r24, r28
     ff0:	41 96       	adiw	r24, 0x11	; 17
     ff2:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				TXWrite(msgPath,msgPathSize*4,0);
     ff6:	69 2d       	mov	r22, r9
     ff8:	66 0f       	add	r22, r22
     ffa:	66 0f       	add	r22, r22
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	88 8d       	ldd	r24, Y+24	; 0x18
    1002:	99 8d       	ldd	r25, Y+25	; 0x19
    1004:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				TXWrite(destPhoneAdd,6,0);			// mac address
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	66 e0       	ldi	r22, 0x06	; 6
    100e:	ce 01       	movw	r24, r28
    1010:	0b 96       	adiw	r24, 0x0b	; 11
    1012:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				TXWrite(srcPhoneAdd,6,0);			// mac address
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	66 e0       	ldi	r22, 0x06	; 6
    101c:	ce 01       	movw	r24, r28
    101e:	05 96       	adiw	r24, 0x05	; 5
    1020:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				
				TXWrite(msg, msgSize,0);
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	68 2d       	mov	r22, r8
    102a:	8e 89       	ldd	r24, Y+22	; 0x16
    102c:	9f 89       	ldd	r25, Y+23	; 0x17
    102e:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
				
				sendAck(myCons->myDSN,sourceDSN);
    1032:	be 01       	movw	r22, r28
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	c5 01       	movw	r24, r10
    103a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <sendAck>
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	3e be       	out	0x3e, r3	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	2d be       	out	0x3d, r2	; 61
    1048:	74 c2       	rjmp	.+1256   	; 0x1532 <handleMessages+0x6e4>
		}
		// If Message from esp
		else{
			// Format 0x02,0x00,msgType,msg length,dest mac, source mac, message
			//                         /Starting here from this point
			uint8_t msgLen = getChar(1);	// Just 1 byte for now
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1050:	7e 01       	movw	r14, r28
    1052:	e5 e0       	ldi	r30, 0x05	; 5
    1054:	ee 0e       	add	r14, r30
    1056:	f1 1c       	adc	r15, r1
			uint8_t destAdd[6];
			uint8_t srcAdd[6];
			uint8_t* destDSN;
			for (uint8_t i = 0; i < 12; i++){
    1058:	10 e0       	ldi	r17, 0x00	; 0
				if (i < 6){
    105a:	16 30       	cpi	r17, 0x06	; 6
    105c:	30 f4       	brcc	.+12     	; 0x106a <handleMessages+0x21c>
					destAdd[i] = getChar(1);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1064:	d7 01       	movw	r26, r14
    1066:	8c 93       	st	X, r24
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <handleMessages+0x222>
				}
				else{
					srcAdd[i-6] = getChar(1);
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
			//                         /Starting here from this point
			uint8_t msgLen = getChar(1);	// Just 1 byte for now
			uint8_t destAdd[6];
			uint8_t srcAdd[6];
			uint8_t* destDSN;
			for (uint8_t i = 0; i < 12; i++){
    1070:	1f 5f       	subi	r17, 0xFF	; 255
    1072:	bf ef       	ldi	r27, 0xFF	; 255
    1074:	eb 1a       	sub	r14, r27
    1076:	fb 0a       	sbc	r15, r27
    1078:	1c 30       	cpi	r17, 0x0C	; 12
    107a:	79 f7       	brne	.-34     	; 0x105a <handleMessages+0x20c>
				else{
					srcAdd[i-6] = getChar(1);
				}
			}
			
			destDSN = getDestPhoneAdd(destAdd,myCons->myDSN,networkPtr2);
    107c:	a4 01       	movw	r20, r8
    107e:	b5 01       	movw	r22, r10
    1080:	ce 01       	movw	r24, r28
    1082:	05 96       	adiw	r24, 0x05	; 5
    1084:	0e 94 f6 01 	call	0x3ec	; 0x3ec <getDestPhoneAdd>
    1088:	54 c2       	rjmp	.+1192   	; 0x1532 <handleMessages+0x6e4>
			
		}
		
	}
	if (msgType == 0x03){												// Network adjustment
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	01 f5       	brne	.+64     	; 0x10ce <handleMessages+0x280>
		
		sourceDSN[0] = (uint8_t) getChar(0);
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1094:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = (uint8_t) getChar(0);
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    109c:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = (uint8_t) getChar(0);
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10a4:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = (uint8_t) getChar(0);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10ac:	8c 83       	std	Y+4, r24	; 0x04
		uint16_t networkSize = getChar(0);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		uint8_t newCon = getChar(0);
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		// Received message format: {msgType,myDSN[0],myDSN[1],myDSN[2],myDSN[3],networkSize,newCon,networkPtr};
		
		uint8_t sendToNeighbors = 1;
		
		updateNetworks(networkPtr,sizeOfNetwork,networkPtr2,myCons,newCon);
    10ba:	08 2f       	mov	r16, r24
    10bc:	95 01       	movw	r18, r10
    10be:	a4 01       	movw	r20, r8
    10c0:	68 8d       	ldd	r22, Y+24	; 0x18
    10c2:	79 8d       	ldd	r23, Y+25	; 0x19
    10c4:	c7 01       	movw	r24, r14
    10c6:	0e 94 87 03 	call	0x70e	; 0x70e <updateNetworks>
			}
			
			return 1;
		}
		else{
			return 0;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	4c c2       	rjmp	.+1176   	; 0x1566 <handleMessages+0x718>
		}
		
	}
	
	// Acknowledgment received
	if(msgType == 0x04){
    10ce:	84 30       	cpi	r24, 0x04	; 4
    10d0:	49 f4       	brne	.+18     	; 0x10e4 <handleMessages+0x296>
		TXWrite(0x16,1,0);
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	86 e1       	ldi	r24, 0x16	; 22
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
		return 0x04;													// Will change later when checking connections
    10e0:	84 e0       	ldi	r24, 0x04	; 4
    10e2:	41 c2       	rjmp	.+1154   	; 0x1566 <handleMessages+0x718>
	}
	
	// Trying to connect
	if(msgType == 0x05){
    10e4:	85 30       	cpi	r24, 0x05	; 5
    10e6:	09 f0       	breq	.+2      	; 0x10ea <handleMessages+0x29c>
    10e8:	1b c2       	rjmp	.+1078   	; 0x1520 <handleMessages+0x6d2>
		
		// Just sent myData, add to structure and send structure
		uint8_t sizeOfMessage;
		uint8_t deviceFound = 0;
		sizeOfMessage = getChar(0);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10f0:	8d 8f       	std	Y+29, r24	; 0x1d
		sourceDSN[0] = getChar(0);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10f8:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = getChar(0);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1100:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = getChar(0);
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1108:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = getChar(0);
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1110:	8c 83       	std	Y+4, r24	; 0x04
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) & (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
    1112:	f7 01       	movw	r30, r14
    1114:	80 81       	ld	r24, Z
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	d5 01       	movw	r26, r10
    111a:	14 96       	adiw	r26, 0x04	; 4
    111c:	2c 91       	ld	r18, X
    111e:	23 30       	cpi	r18, 0x03	; 3
    1120:	08 f0       	brcs	.+2      	; 0x1124 <handleMessages+0x2d6>
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	99 23       	and	r25, r25
    1126:	09 f4       	brne	.+2      	; 0x112a <handleMessages+0x2dc>
    1128:	05 c2       	rjmp	.+1034   	; 0x1534 <handleMessages+0x6e6>
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	85 30       	cpi	r24, 0x05	; 5
    112e:	08 f0       	brcs	.+2      	; 0x1132 <handleMessages+0x2e4>
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	99 23       	and	r25, r25
    1134:	09 f4       	brne	.+2      	; 0x1138 <handleMessages+0x2ea>
    1136:	fe c1       	rjmp	.+1020   	; 0x1534 <handleMessages+0x6e6>
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    1138:	81 11       	cpse	r24, r1
    113a:	2c c0       	rjmp	.+88     	; 0x1194 <handleMessages+0x346>
    113c:	6b c0       	rjmp	.+214    	; 0x1214 <handleMessages+0x3c6>
					}
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
    113e:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1140:	01 30       	cpi	r16, 0x01	; 1
    1142:	11 f5       	brne	.+68     	; 0x1188 <handleMessages+0x33a>
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    1144:	41 14       	cp	r4, r1
    1146:	51 04       	cpc	r5, r1
    1148:	f9 f0       	breq	.+62     	; 0x1188 <handleMessages+0x33a>
						*(networkPtr2 + 1 + DEVICESIZE*deviceNum +  j*sizeof(uint8_t) + 4) = getChar(0);
    114a:	cc 0c       	add	r12, r12
    114c:	dd 1c       	adc	r13, r13
    114e:	c6 01       	movw	r24, r12
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	c8 0e       	add	r12, r24
    115e:	d9 1e       	adc	r13, r25
    1160:	86 01       	movw	r16, r12
    1162:	09 5e       	subi	r16, 0xE9	; 233
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	08 0d       	add	r16, r8
    1168:	19 1d       	adc	r17, r9
    116a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    116c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    116e:	c2 0e       	add	r12, r18
    1170:	d3 1e       	adc	r13, r19
    1172:	c8 0c       	add	r12, r8
    1174:	d9 1c       	adc	r13, r9
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    117c:	d8 01       	movw	r26, r16
    117e:	8d 93       	st	X+, r24
    1180:	8d 01       	movw	r16, r26
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    1182:	ca 16       	cp	r12, r26
    1184:	db 06       	cpc	r13, r27
    1186:	b9 f7       	brne	.-18     	; 0x1176 <handleMessages+0x328>
		sourceDSN[2] = getChar(0);
		sourceDSN[3] = getChar(0);
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) & (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    1188:	33 94       	inc	r3
    118a:	f7 01       	movw	r30, r14
    118c:	80 81       	ld	r24, Z
    118e:	38 16       	cp	r3, r24
    1190:	78 f0       	brcs	.+30     	; 0x11b0 <handleMessages+0x362>
    1192:	3d c0       	rjmp	.+122    	; 0x120e <handleMessages+0x3c0>
    1194:	31 2c       	mov	r3, r1
    1196:	1a 8e       	std	Y+26, r1	; 0x1a
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1198:	0f 2e       	mov	r0, r31
    119a:	f4 e2       	ldi	r31, 0x24	; 36
    119c:	2f 2e       	mov	r2, r31
    119e:	f0 2d       	mov	r31, r0
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    11a0:	0d 8d       	ldd	r16, Y+29	; 0x1d
    11a2:	40 2e       	mov	r4, r16
    11a4:	51 2c       	mov	r5, r1
    11a6:	92 01       	movw	r18, r4
    11a8:	29 5e       	subi	r18, 0xE9	; 233
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	3c 8f       	std	Y+28, r19	; 0x1c
    11ae:	2b 8f       	std	Y+27, r18	; 0x1b
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) & (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    11b0:	c3 2c       	mov	r12, r3
    11b2:	d1 2c       	mov	r13, r1
    11b4:	99 81       	ldd	r25, Y+1	; 0x01
    11b6:	f7 01       	movw	r30, r14
    11b8:	23 9c       	mul	r2, r3
    11ba:	e0 0d       	add	r30, r0
    11bc:	f1 1d       	adc	r31, r1
    11be:	11 24       	eor	r1, r1
    11c0:	81 81       	ldd	r24, Z+1	; 0x01
    11c2:	98 13       	cpse	r25, r24
    11c4:	bc cf       	rjmp	.-136    	; 0x113e <handleMessages+0x2f0>
    11c6:	2c 9c       	mul	r2, r12
    11c8:	f0 01       	movw	r30, r0
    11ca:	2d 9c       	mul	r2, r13
    11cc:	f0 0d       	add	r31, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	ee 0d       	add	r30, r14
    11d2:	ff 1d       	adc	r31, r15
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	98 13       	cpse	r25, r24
    11da:	b1 cf       	rjmp	.-158    	; 0x113e <handleMessages+0x2f0>
    11dc:	2c 9c       	mul	r2, r12
    11de:	f0 01       	movw	r30, r0
    11e0:	2d 9c       	mul	r2, r13
    11e2:	f0 0d       	add	r31, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	ee 0d       	add	r30, r14
    11e8:	ff 1d       	adc	r31, r15
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	98 13       	cpse	r25, r24
    11f0:	a6 cf       	rjmp	.-180    	; 0x113e <handleMessages+0x2f0>
    11f2:	2c 9c       	mul	r2, r12
    11f4:	f0 01       	movw	r30, r0
    11f6:	2d 9c       	mul	r2, r13
    11f8:	f0 0d       	add	r31, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	ee 0d       	add	r30, r14
    11fe:	ff 1d       	adc	r31, r15
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	98 13       	cpse	r25, r24
    1206:	9b cf       	rjmp	.-202    	; 0x113e <handleMessages+0x2f0>
    1208:	01 e0       	ldi	r16, 0x01	; 1
    120a:	0a 8f       	std	Y+26, r16	; 0x1a
    120c:	9b cf       	rjmp	.-202    	; 0x1144 <handleMessages+0x2f6>
					}
					
				}
			}
			// Adding device data to the next empty place in the network
			if (deviceFound == 0){
    120e:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1210:	01 11       	cpse	r16, r1
    1212:	97 c0       	rjmp	.+302    	; 0x1342 <handleMessages+0x4f4>
    1214:	2d b7       	in	r18, 0x3d	; 61
    1216:	3e b7       	in	r19, 0x3e	; 62
    1218:	3f 8b       	std	Y+23, r19	; 0x17
    121a:	2e 8b       	std	Y+22, r18	; 0x16
				uint8_t message[sizeOfMessage];
    121c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    121e:	20 2e       	mov	r2, r16
    1220:	31 2c       	mov	r3, r1
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	fc 01       	movw	r30, r24
    122a:	ee 0f       	add	r30, r30
    122c:	ff 1f       	adc	r31, r31
    122e:	ee 0f       	add	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	8e 0f       	add	r24, r30
    1238:	9f 1f       	adc	r25, r31
    123a:	f4 01       	movw	r30, r8
    123c:	e8 0f       	add	r30, r24
    123e:	f9 1f       	adc	r31, r25
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	83 8b       	std	Z+19, r24	; 0x13
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
    1244:	d7 01       	movw	r26, r14
    1246:	8c 91       	ld	r24, X
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	fc 01       	movw	r30, r24
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	8e 0f       	add	r24, r30
    125e:	9f 1f       	adc	r25, r31
    1260:	f4 01       	movw	r30, r8
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	84 8b       	std	Z+20, r24	; 0x14
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
    126a:	8c 91       	ld	r24, X
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	fc 01       	movw	r30, r24
    1274:	ee 0f       	add	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	8e 0f       	add	r24, r30
    1282:	9f 1f       	adc	r25, r31
    1284:	f4 01       	movw	r30, r8
    1286:	e8 0f       	add	r30, r24
    1288:	f9 1f       	adc	r31, r25
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	85 8b       	std	Z+21, r24	; 0x15
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
    128e:	8c 91       	ld	r24, X
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	fc 01       	movw	r30, r24
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	8e 0f       	add	r24, r30
    12a6:	9f 1f       	adc	r25, r31
    12a8:	f4 01       	movw	r30, r8
    12aa:	e8 0f       	add	r30, r24
    12ac:	f9 1f       	adc	r31, r25
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	86 8b       	std	Z+22, r24	; 0x16
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    12b2:	21 14       	cp	r2, r1
    12b4:	31 04       	cpc	r3, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <handleMessages+0x46c>
    12b8:	47 c1       	rjmp	.+654    	; 0x1548 <handleMessages+0x6fa>
    12ba:	c1 2c       	mov	r12, r1
    12bc:	d1 2c       	mov	r13, r1
    12be:	e3 ec       	ldi	r30, 0xC3	; 195
    12c0:	f9 e0       	ldi	r31, 0x09	; 9
    12c2:	31 97       	sbiw	r30, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <handleMessages+0x474>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <handleMessages+0x47a>
    12c8:	00 00       	nop
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
    12ca:	d7 01       	movw	r26, r14
    12cc:	0c 91       	ld	r16, X
    12ce:	10 e0       	ldi	r17, 0x00	; 0
    12d0:	00 0f       	add	r16, r16
    12d2:	11 1f       	adc	r17, r17
    12d4:	c8 01       	movw	r24, r16
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	08 0f       	add	r16, r24
    12e4:	19 1f       	adc	r17, r25
    12e6:	09 5e       	subi	r16, 0xE9	; 233
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	0c 0d       	add	r16, r12
    12ec:	1d 1d       	adc	r17, r13
    12ee:	08 0d       	add	r16, r8
    12f0:	19 1d       	adc	r17, r9
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    12f8:	f8 01       	movw	r30, r16
    12fa:	80 83       	st	Z, r24
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    12fc:	ff ef       	ldi	r31, 0xFF	; 255
    12fe:	cf 1a       	sub	r12, r31
    1300:	df 0a       	sbc	r13, r31
    1302:	2c 14       	cp	r2, r12
    1304:	3d 04       	cpc	r3, r13
    1306:	d9 f6       	brne	.-74     	; 0x12be <handleMessages+0x470>
    1308:	1f c1       	rjmp	.+574    	; 0x1548 <handleMessages+0x6fa>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] = myCons->myDSN[j];
    130a:	6d 91       	ld	r22, X+
    130c:	f9 01       	movw	r30, r18
    130e:	70 81       	ld	r23, Z
    1310:	fa 01       	movw	r30, r20
    1312:	04 e0       	ldi	r16, 0x04	; 4
    1314:	70 9f       	mul	r23, r16
    1316:	e0 0d       	add	r30, r0
    1318:	f1 1d       	adc	r31, r1
    131a:	11 24       	eor	r1, r1
    131c:	ee 0d       	add	r30, r14
    131e:	ff 1d       	adc	r31, r15
    1320:	e8 0f       	add	r30, r24
    1322:	f9 1f       	adc	r31, r25
    1324:	67 83       	std	Z+7, r22	; 0x07
    1326:	01 96       	adiw	r24, 0x01	; 1
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	91 05       	cpc	r25, r1
    132c:	71 f7       	brne	.-36     	; 0x130a <handleMessages+0x4bc>
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] = myCons->myDSN[j];
				}
				networkPtr->numOfDevices++;
    132e:	1f 5f       	subi	r17, 0xFF	; 255
    1330:	d7 01       	movw	r26, r14
    1332:	1c 93       	st	X, r17
    1334:	8e 88       	ldd	r8, Y+22	; 0x16
    1336:	9f 88       	ldd	r9, Y+23	; 0x17
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	9e be       	out	0x3e, r9	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	8d be       	out	0x3d, r8	; 61
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    1342:	d7 01       	movw	r26, r14
    1344:	5c 91       	ld	r21, X
    1346:	55 23       	and	r21, r21
    1348:	09 f4       	brne	.+2      	; 0x134c <handleMessages+0x4fe>
    134a:	de c0       	rjmp	.+444    	; 0x1508 <handleMessages+0x6ba>
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    134c:	69 81       	ldd	r22, Y+1	; 0x01
    134e:	27 01       	movw	r4, r14
    1350:	7a 81       	ldd	r23, Y+2	; 0x02
    1352:	1b 81       	ldd	r17, Y+3	; 0x03
    1354:	0c 81       	ldd	r16, Y+4	; 0x04
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	c0 c0       	rjmp	.+384    	; 0x14dc <handleMessages+0x68e>
    135c:	94 2f       	mov	r25, r20
    135e:	05 c0       	rjmp	.+10     	; 0x136a <handleMessages+0x51c>
    1360:	94 2f       	mov	r25, r20
    1362:	03 c0       	rjmp	.+6      	; 0x136a <handleMessages+0x51c>
    1364:	94 2f       	mov	r25, r20
    1366:	01 c0       	rjmp	.+2      	; 0x136a <handleMessages+0x51c>
    1368:	94 2f       	mov	r25, r20
					if (i >= 3){
						deviceFound = 1;
					}
				}
				if (deviceFound == 1){
    136a:	41 30       	cpi	r20, 0x01	; 1
    136c:	09 f0       	breq	.+2      	; 0x1370 <handleMessages+0x522>
    136e:	b1 c0       	rjmp	.+354    	; 0x14d2 <handleMessages+0x684>
    1370:	b5 01       	movw	r22, r10
    1372:	ae 01       	movw	r20, r28
    1374:	4f 5f       	subi	r20, 0xFF	; 255
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
						deviceFound = 1;
					}
				}
				if (deviceFound == 1){
					for (uint8_t i = 0; i < 4; i++){
						networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
    137c:	28 2e       	mov	r2, r24
    137e:	31 2c       	mov	r3, r1
    1380:	b4 e2       	ldi	r27, 0x24	; 36
    1382:	8b 9f       	mul	r24, r27
    1384:	80 01       	movw	r16, r0
    1386:	11 24       	eor	r1, r1
    1388:	d7 01       	movw	r26, r14
    138a:	a0 0f       	add	r26, r16
    138c:	b1 1f       	adc	r27, r17
    138e:	6d 01       	movw	r12, r26
    1390:	e5 e0       	ldi	r30, 0x05	; 5
    1392:	ce 0e       	add	r12, r30
    1394:	d1 1c       	adc	r13, r1
    1396:	3f 8a       	std	Y+23, r3	; 0x17
    1398:	2e 8a       	std	Y+22, r2	; 0x16
    139a:	db 01       	movw	r26, r22
    139c:	ed 91       	ld	r30, X+
    139e:	bd 01       	movw	r22, r26
    13a0:	d6 01       	movw	r26, r12
    13a2:	fc 91       	ld	r31, X
    13a4:	d8 01       	movw	r26, r16
    13a6:	94 e0       	ldi	r25, 0x04	; 4
    13a8:	f9 9f       	mul	r31, r25
    13aa:	a0 0d       	add	r26, r0
    13ac:	b1 1d       	adc	r27, r1
    13ae:	11 24       	eor	r1, r1
    13b0:	ae 0d       	add	r26, r14
    13b2:	bf 1d       	adc	r27, r15
    13b4:	a2 0f       	add	r26, r18
    13b6:	b3 1f       	adc	r27, r19
    13b8:	17 96       	adiw	r26, 0x07	; 7
    13ba:	ec 93       	st	X, r30
						myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
    13bc:	d5 01       	movw	r26, r10
    13be:	14 96       	adiw	r26, 0x04	; 4
    13c0:	ec 91       	ld	r30, X
    13c2:	da 01       	movw	r26, r20
    13c4:	9d 90       	ld	r9, X+
    13c6:	ad 01       	movw	r20, r26
    13c8:	d5 01       	movw	r26, r10
    13ca:	f4 e0       	ldi	r31, 0x04	; 4
    13cc:	ef 9f       	mul	r30, r31
    13ce:	a0 0d       	add	r26, r0
    13d0:	b1 1d       	adc	r27, r1
    13d2:	11 24       	eor	r1, r1
    13d4:	a2 0f       	add	r26, r18
    13d6:	b3 1f       	adc	r27, r19
    13d8:	16 96       	adiw	r26, 0x06	; 6
    13da:	9c 92       	st	X, r9
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
					if (i >= 3){
						deviceFound = 1;
					}
				}
				if (deviceFound == 1){
					for (uint8_t i = 0; i < 4; i++){
    13e0:	24 30       	cpi	r18, 0x04	; 4
    13e2:	31 05       	cpc	r19, r1
    13e4:	c1 f6       	brne	.-80     	; 0x1396 <handleMessages+0x548>
						networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
						myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
					}
					myCons->myNumOfNubCon ++;
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	9e 0f       	add	r25, r30
    13ea:	d5 01       	movw	r26, r10
    13ec:	14 96       	adiw	r26, 0x04	; 4
    13ee:	9c 93       	st	X, r25
					networkPtr->device[deviceNum].numOfNubCon ++;
    13f0:	94 e2       	ldi	r25, 0x24	; 36
    13f2:	92 9d       	mul	r25, r2
    13f4:	d0 01       	movw	r26, r0
    13f6:	93 9d       	mul	r25, r3
    13f8:	b0 0d       	add	r27, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	ae 0d       	add	r26, r14
    13fe:	bf 1d       	adc	r27, r15
    1400:	15 96       	adiw	r26, 0x05	; 5
    1402:	9c 91       	ld	r25, X
    1404:	15 97       	sbiw	r26, 0x05	; 5
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    1408:	15 96       	adiw	r26, 0x05	; 5
    140a:	9c 93       	st	X, r25
					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    140c:	d7 01       	movw	r26, r14
    140e:	5c 91       	ld	r21, X
    1410:	55 23       	and	r21, r21
    1412:	09 f4       	brne	.+2      	; 0x1416 <handleMessages+0x5c8>
    1414:	79 c0       	rjmp	.+242    	; 0x1508 <handleMessages+0x6ba>
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    1416:	f5 01       	movw	r30, r10
    1418:	60 81       	ld	r22, Z
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	41 c0       	rjmp	.+130    	; 0x14a2 <handleMessages+0x654>
    1420:	24 2f       	mov	r18, r20
    1422:	05 c0       	rjmp	.+10     	; 0x142e <handleMessages+0x5e0>
    1424:	24 2f       	mov	r18, r20
    1426:	03 c0       	rjmp	.+6      	; 0x142e <handleMessages+0x5e0>
    1428:	24 2f       	mov	r18, r20
    142a:	01 c0       	rjmp	.+2      	; 0x142e <handleMessages+0x5e0>
    142c:	24 2f       	mov	r18, r20
								deviceFound = 1;
							}
						}
						
						
						if (deviceFound == 1){
    142e:	41 30       	cpi	r20, 0x01	; 1
    1430:	89 f5       	brne	.+98     	; 0x1494 <handleMessages+0x646>
    1432:	d7 01       	movw	r26, r14
    1434:	f4 e2       	ldi	r31, 0x24	; 36
    1436:	8f 9f       	mul	r24, r31
    1438:	a0 0d       	add	r26, r0
    143a:	b1 1d       	adc	r27, r1
    143c:	11 24       	eor	r1, r1
    143e:	11 96       	adiw	r26, 0x01	; 1
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
						}
						
						
						if (deviceFound == 1){
							for (uint16_t j = 0; j < 4; j++){
								networkPtr->device[myDeviceNum].nubConnections[myCons->myNumOfNubCon - 1][j] = networkPtr->device[deviceNum].deviceDSN[j];
    1444:	49 2f       	mov	r20, r25
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	04 e2       	ldi	r16, 0x24	; 36
    144a:	90 9f       	mul	r25, r16
    144c:	c0 01       	movw	r24, r0
    144e:	11 24       	eor	r1, r1
    1450:	6d 91       	ld	r22, X+
    1452:	f5 01       	movw	r30, r10
    1454:	74 81       	ldd	r23, Z+4	; 0x04
    1456:	e7 2f       	mov	r30, r23
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	31 97       	sbiw	r30, 0x01	; 1
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	e8 0f       	add	r30, r24
    1466:	f9 1f       	adc	r31, r25
    1468:	ee 0d       	add	r30, r14
    146a:	ff 1d       	adc	r31, r15
    146c:	e2 0f       	add	r30, r18
    146e:	f3 1f       	adc	r31, r19
    1470:	67 83       	std	Z+7, r22	; 0x07
							}
						}
						
						
						if (deviceFound == 1){
							for (uint16_t j = 0; j < 4; j++){
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	24 30       	cpi	r18, 0x04	; 4
    1478:	31 05       	cpc	r19, r1
    147a:	51 f7       	brne	.-44     	; 0x1450 <handleMessages+0x602>
								networkPtr->device[myDeviceNum].nubConnections[myCons->myNumOfNubCon - 1][j] = networkPtr->device[deviceNum].deviceDSN[j];
								
							}
							
							networkPtr->device[myDeviceNum].numOfNubCon ++;
    147c:	84 e2       	ldi	r24, 0x24	; 36
    147e:	84 9f       	mul	r24, r20
    1480:	f0 01       	movw	r30, r0
    1482:	85 9f       	mul	r24, r21
    1484:	f0 0d       	add	r31, r0
    1486:	11 24       	eor	r1, r1
    1488:	ee 0d       	add	r30, r14
    148a:	ff 1d       	adc	r31, r15
    148c:	85 81       	ldd	r24, Z+5	; 0x05
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	85 83       	std	Z+5, r24	; 0x05
							break;
    1492:	3a c0       	rjmp	.+116    	; 0x1508 <handleMessages+0x6ba>
					networkPtr->device[deviceNum].numOfNubCon ++;
					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    1494:	9f 5f       	subi	r25, 0xFF	; 255
    1496:	f4 e2       	ldi	r31, 0x24	; 36
    1498:	4f 0e       	add	r4, r31
    149a:	51 1c       	adc	r5, r1
    149c:	95 17       	cp	r25, r21
    149e:	a1 f1       	breq	.+104    	; 0x1508 <handleMessages+0x6ba>
    14a0:	42 2f       	mov	r20, r18
    14a2:	f2 01       	movw	r30, r4
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    14a4:	21 81       	ldd	r18, Z+1	; 0x01
    14a6:	62 13       	cpse	r22, r18
    14a8:	bb cf       	rjmp	.-138    	; 0x1420 <handleMessages+0x5d2>
    14aa:	32 81       	ldd	r19, Z+2	; 0x02
    14ac:	d5 01       	movw	r26, r10
    14ae:	11 96       	adiw	r26, 0x01	; 1
    14b0:	2c 91       	ld	r18, X
    14b2:	11 97       	sbiw	r26, 0x01	; 1
    14b4:	32 13       	cpse	r19, r18
    14b6:	b6 cf       	rjmp	.-148    	; 0x1424 <handleMessages+0x5d6>
    14b8:	33 81       	ldd	r19, Z+3	; 0x03
    14ba:	12 96       	adiw	r26, 0x02	; 2
    14bc:	2c 91       	ld	r18, X
    14be:	12 97       	sbiw	r26, 0x02	; 2
    14c0:	32 13       	cpse	r19, r18
    14c2:	b2 cf       	rjmp	.-156    	; 0x1428 <handleMessages+0x5da>
    14c4:	34 81       	ldd	r19, Z+4	; 0x04
    14c6:	13 96       	adiw	r26, 0x03	; 3
    14c8:	2c 91       	ld	r18, X
    14ca:	32 17       	cp	r19, r18
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <handleMessages+0x682>
    14ce:	b1 cf       	rjmp	.-158    	; 0x1432 <handleMessages+0x5e4>
    14d0:	ad cf       	rjmp	.-166    	; 0x142c <handleMessages+0x5de>
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    14d2:	8f 5f       	subi	r24, 0xFF	; 255
    14d4:	94 96       	adiw	r26, 0x24	; 36
    14d6:	85 17       	cp	r24, r21
    14d8:	b9 f0       	breq	.+46     	; 0x1508 <handleMessages+0x6ba>
    14da:	49 2f       	mov	r20, r25
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    14dc:	11 96       	adiw	r26, 0x01	; 1
    14de:	9c 91       	ld	r25, X
    14e0:	11 97       	sbiw	r26, 0x01	; 1
    14e2:	69 13       	cpse	r22, r25
    14e4:	3b cf       	rjmp	.-394    	; 0x135c <handleMessages+0x50e>
    14e6:	12 96       	adiw	r26, 0x02	; 2
    14e8:	9c 91       	ld	r25, X
    14ea:	12 97       	sbiw	r26, 0x02	; 2
    14ec:	97 13       	cpse	r25, r23
    14ee:	38 cf       	rjmp	.-400    	; 0x1360 <handleMessages+0x512>
    14f0:	13 96       	adiw	r26, 0x03	; 3
    14f2:	9c 91       	ld	r25, X
    14f4:	13 97       	sbiw	r26, 0x03	; 3
    14f6:	91 13       	cpse	r25, r17
    14f8:	35 cf       	rjmp	.-406    	; 0x1364 <handleMessages+0x516>
    14fa:	14 96       	adiw	r26, 0x04	; 4
    14fc:	9c 91       	ld	r25, X
    14fe:	14 97       	sbiw	r26, 0x04	; 4
    1500:	09 17       	cp	r16, r25
    1502:	09 f4       	brne	.+2      	; 0x1506 <handleMessages+0x6b8>
    1504:	35 cf       	rjmp	.-406    	; 0x1370 <handleMessages+0x522>
    1506:	30 cf       	rjmp	.-416    	; 0x1368 <handleMessages+0x51a>
					break;
				}
			}

			
			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
    1508:	01 e0       	ldi	r16, 0x01	; 1
    150a:	9e 01       	movw	r18, r28
    150c:	2f 5f       	subi	r18, 0xFF	; 255
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	a5 01       	movw	r20, r10
    1512:	68 8d       	ldd	r22, Y+24	; 0x18
    1514:	79 8d       	ldd	r23, Y+25	; 0x19
    1516:	c7 01       	movw	r24, r14
    1518:	0e 94 a7 02 	call	0x54e	; 0x54e <sendNetworkData>
			return 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	23 c0       	rjmp	.+70     	; 0x1566 <handleMessages+0x718>
		}
	}
	
	
	// Ack from Humpro after command is sent
	if (msgType == 0x06){
    1520:	86 30       	cpi	r24, 0x06	; 6
    1522:	39 f4       	brne	.+14     	; 0x1532 <handleMessages+0x6e4>
		uint8_t regNum		= (uint8_t) getChar(0);
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		uint8_t regValue	= (uint8_t) getChar(0);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		return regValue;
    1530:	1a c0       	rjmp	.+52     	; 0x1566 <handleMessages+0x718>
	}
	// Message from Humpro
	
}
    1532:	19 c0       	rjmp	.+50     	; 0x1566 <handleMessages+0x718>
			
			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
			return 1;
		}
		else{
			return 0;
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	17 c0       	rjmp	.+46     	; 0x1566 <handleMessages+0x718>
    1538:	8e 01       	movw	r16, r28
    153a:	05 5f       	subi	r16, 0xF5	; 245
    153c:	1f 4f       	sbci	r17, 0xFF	; 255
    153e:	7e 01       	movw	r14, r28
    1540:	b1 e1       	ldi	r27, 0x11	; 17
    1542:	eb 0e       	add	r14, r27
    1544:	f1 1c       	adc	r15, r1
    1546:	01 cd       	rjmp	.-1534   	; 0xf4a <handleMessages+0xfc>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] = myCons->myDSN[j];
    1548:	f7 01       	movw	r30, r14
    154a:	10 81       	ld	r17, Z
    154c:	d5 01       	movw	r26, r10
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	f4 e2       	ldi	r31, 0x24	; 36
    1554:	1f 9f       	mul	r17, r31
    1556:	a0 01       	movw	r20, r0
    1558:	11 24       	eor	r1, r1
    155a:	97 01       	movw	r18, r14
    155c:	24 0f       	add	r18, r20
    155e:	35 1f       	adc	r19, r21
    1560:	2b 5f       	subi	r18, 0xFB	; 251
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	d2 ce       	rjmp	.-604    	; 0x130a <handleMessages+0x4bc>
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	7e be       	out	0x3e, r7	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	6d be       	out	0x3d, r6	; 61
    1570:	6d 96       	adiw	r28, 0x1d	; 29
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	5f 90       	pop	r5
    159a:	4f 90       	pop	r4
    159c:	3f 90       	pop	r3
    159e:	2f 90       	pop	r2
    15a0:	08 95       	ret

000015a2 <USART_setup>:

// Setting up USART for communication between HUMPRO900 module and the MCU
void USART_setup(unsigned int ubrr){
	
	// UART 0
	UBRR0H = (unsigned char)(ubrr>>8);			// Setting baud rate
    15a2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
    15a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A = (1<<UDRE0)|(1<<U2X0);
    15aa:	42 e2       	ldi	r20, 0x22	; 34
    15ac:	40 93 c0 00 	sts	0x00C0, r20	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0)|(1<<TXEN0);				// Enabling Tx & Rx
    15b0:	38 e9       	ldi	r19, 0x98	; 152
    15b2:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    15b6:	2e e0       	ldi	r18, 0x0E	; 14
    15b8:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// UART 1
	UBRR1H = (unsigned char)(ubrr>>8);			// Setting baud rate
    15bc:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = (unsigned char)ubrr;
    15c0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1A = (1<<UDRE1)|(1<<U2X0);
    15c4:	40 93 c8 00 	sts	0x00C8, r20	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
	UCSR1B = (1<<RXEN1)|(1<<RXCIE1)|(1<<TXEN1);				// Enabling Tx & Rx
    15c8:	30 93 c9 00 	sts	0x00C9, r19	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	UCSR1C = (1<<USBS1)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    15cc:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
    15d0:	08 95       	ret

000015d2 <setupTransceiver>:
}



// Setting up ports for HUMPRO900 transceiver
uint8_t * setupTransceiver(){
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	60 97       	sbiw	r28, 0x10	; 16
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
	
	sei();		// Enabling interrupts
    15ea:	78 94       	sei
	DDRB |= (1 << DDB7);	//PD4 PWR High for normal op, low for low power operation (power down)
    15ec:	27 9a       	sbi	0x04, 7	; 4
	//DDRC &= ~(1 << DDC3);	//PC3 CRESP_BAR
	DDRC &= ~(1 << DDC4);	//PC4 CTS_BAR (high when busy, low when module is ready)
    15ee:	3c 98       	cbi	0x07, 4	; 7
	DDRB |= (1 << DDB6);	//PC5 Reset, resets when low
    15f0:	26 9a       	sbi	0x04, 6	; 4
	
	
	//DDRD &= ~(1 << DDD0);	//PD2 Buffer empty status (high when buffer is empty) input
	DDRD |= (1 << DDD3);	//PD3 "PUSH button" PULL LOW
    15f2:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD5);	//PD5 CMD_BAR (high for data transmit, low for commands)
    15f4:	55 9a       	sbi	0x0a, 5	; 10
	
	PORTD &= ~(1<< PORTD3);
    15f6:	5b 98       	cbi	0x0b, 3	; 11
	PORTB &= ~(1 << PORTB6);		// Reset norm operation
    15f8:	2e 98       	cbi	0x05, 6	; 5
    15fa:	87 ea       	ldi	r24, 0xA7	; 167
    15fc:	91 e6       	ldi	r25, 0x61	; 97
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <setupTransceiver+0x2c>
    1602:	00 c0       	rjmp	.+0      	; 0x1604 <setupTransceiver+0x32>
    1604:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1 <<PORTB6);
    1606:	2e 9a       	sbi	0x05, 6	; 5
    1608:	9f e3       	ldi	r25, 0x3F	; 63
    160a:	ed e0       	ldi	r30, 0x0D	; 13
    160c:	f3 e0       	ldi	r31, 0x03	; 3
    160e:	91 50       	subi	r25, 0x01	; 1
    1610:	e0 40       	sbci	r30, 0x00	; 0
    1612:	f0 40       	sbci	r31, 0x00	; 0
    1614:	e1 f7       	brne	.-8      	; 0x160e <setupTransceiver+0x3c>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <setupTransceiver+0x46>
    1618:	00 00       	nop
	_delay_ms(1000);
	rx0ReadPos = rx0WritePos;	// Ignoring reset message
    161a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    161e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    1622:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    1626:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	
	
	PORTD &= ~(1 << PORTD5);	// Command mode
    162a:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t addMode[4]	= {0xFF,0x02,0x4F,0x04};		// Setting address mode as DSN (Volatile address)
	uint8_t showVer[4]	= {0xFF,0x02,0x0A,0x00};		// Do not show version at start up
	uint8_t CMDHold[4]	= {0xFF,0x02,0x6E,0x00};		// If CMD_BAR is low, wait until it goes high to send to mcu
	uint8_t compat[4]	= {0xFF,0x02,0x70,0x00};		// Compatibility mode to enable broadcast function for DSN
	uint8_t autoAdd[4]	= {0xFF,0x02,0x71,0x04};		// Auto addressing for DNS mode
	uint8_t myDSN3[4]	= {0xFF,0x02,0xFE,0x34};				// Read command for preprogrammed DNS values, DSN3 is MSB
    162c:	2f ef       	ldi	r18, 0xFF	; 255
    162e:	29 83       	std	Y+1, r18	; 0x01
    1630:	92 e0       	ldi	r25, 0x02	; 2
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	8e ef       	ldi	r24, 0xFE	; 254
    1636:	8b 83       	std	Y+3, r24	; 0x03
    1638:	34 e3       	ldi	r19, 0x34	; 52
    163a:	3c 83       	std	Y+4, r19	; 0x04
	uint8_t myDSN2[4]	= {0xFF,0x02,0xFE,0x35};
    163c:	2d 83       	std	Y+5, r18	; 0x05
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8f 83       	std	Y+7, r24	; 0x07
    1642:	35 e3       	ldi	r19, 0x35	; 53
    1644:	38 87       	std	Y+8, r19	; 0x08
	uint8_t myDSN1[4]	= {0xFF,0x02,0xFE,0x36};
    1646:	29 87       	std	Y+9, r18	; 0x09
    1648:	9a 87       	std	Y+10, r25	; 0x0a
    164a:	8b 87       	std	Y+11, r24	; 0x0b
    164c:	36 e3       	ldi	r19, 0x36	; 54
    164e:	3c 87       	std	Y+12, r19	; 0x0c
	uint8_t myDSN0[4]	= {0xFF,0x02,0xFE,0x37};
    1650:	2d 87       	std	Y+13, r18	; 0x0d
    1652:	9e 87       	std	Y+14, r25	; 0x0e
    1654:	8f 87       	std	Y+15, r24	; 0x0f
    1656:	87 e3       	ldi	r24, 0x37	; 55
    1658:	88 8b       	std	Y+16, r24	; 0x10
	//getChar(0);
	//TX0Write(autoAdd[0],4);
	
	
	// Getting local DNS info (third char returned)
	uint8_t *myDSNVal = malloc(4*sizeof(uint8_t));
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <malloc>
    1662:	8c 01       	movw	r16, r24
	
	TXWrite(myDSN3,4,0);
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	64 e0       	ldi	r22, 0x04	; 4
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1674:	87 ea       	ldi	r24, 0xA7	; 167
    1676:	91 e6       	ldi	r25, 0x61	; 97
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <setupTransceiver+0xa6>
    167c:	00 c0       	rjmp	.+0      	; 0x167e <setupTransceiver+0xac>
    167e:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1680:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    1684:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	91 05       	cpc	r25, r1
    168c:	ec f3       	brlt	.-6      	; 0x1688 <setupTransceiver+0xb6>
	
	rx0ReadPos = rx0WritePos -1;		// Ignoring other bytes received, only care about DSN value
    168e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    1692:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    169c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>

	myDSNVal[0] = getChar(0);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    16a8:	f8 01       	movw	r30, r16
    16aa:	80 83       	st	Z, r24
	
	
	TXWrite(myDSN2,4,0);
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	64 e0       	ldi	r22, 0x04	; 4
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	ce 01       	movw	r24, r28
    16b6:	05 96       	adiw	r24, 0x05	; 5
    16b8:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    16bc:	87 ea       	ldi	r24, 0xA7	; 167
    16be:	91 e6       	ldi	r25, 0x61	; 97
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <setupTransceiver+0xee>
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <setupTransceiver+0xf4>
    16c6:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    16c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    16cc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	91 05       	cpc	r25, r1
    16d4:	ec f3       	brlt	.-6      	; 0x16d0 <setupTransceiver+0xfe>
		
	rx0ReadPos = rx0WritePos -1;
    16d6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    16da:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    16e4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	myDSNVal[1] = getChar(0);
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    16f0:	f8 01       	movw	r30, r16
    16f2:	81 83       	std	Z+1, r24	; 0x01
	
	
	TXWrite(myDSN1,4,0);
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	64 e0       	ldi	r22, 0x04	; 4
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	ce 01       	movw	r24, r28
    16fe:	09 96       	adiw	r24, 0x09	; 9
    1700:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1704:	87 ea       	ldi	r24, 0xA7	; 167
    1706:	91 e6       	ldi	r25, 0x61	; 97
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <setupTransceiver+0x136>
    170c:	00 c0       	rjmp	.+0      	; 0x170e <setupTransceiver+0x13c>
    170e:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1710:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    1714:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	91 05       	cpc	r25, r1
    171c:	ec f3       	brlt	.-6      	; 0x1718 <setupTransceiver+0x146>
	rx0ReadPos = rx0WritePos -1;
    171e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    1722:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    172c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	myDSNVal[2] = getChar(0);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1738:	f8 01       	movw	r30, r16
    173a:	82 83       	std	Z+2, r24	; 0x02
	
	
	TXWrite(myDSN0,4,0);
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	64 e0       	ldi	r22, 0x04	; 4
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	ce 01       	movw	r24, r28
    1746:	0d 96       	adiw	r24, 0x0d	; 13
    1748:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    174c:	87 ea       	ldi	r24, 0xA7	; 167
    174e:	91 e6       	ldi	r25, 0x61	; 97
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <setupTransceiver+0x17e>
    1754:	00 c0       	rjmp	.+0      	; 0x1756 <setupTransceiver+0x184>
    1756:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1758:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    175c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	ec f3       	brlt	.-6      	; 0x1760 <setupTransceiver+0x18e>
	rx0ReadPos = rx0WritePos -1;
    1766:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    176a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    1774:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	myDSNVal[3] = getChar(0);
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1780:	f8 01       	movw	r30, r16
    1782:	83 83       	std	Z+3, r24	; 0x03
    1784:	ff eb       	ldi	r31, 0xBF	; 191
    1786:	27 e2       	ldi	r18, 0x27	; 39
    1788:	89 e0       	ldi	r24, 0x09	; 9
    178a:	f1 50       	subi	r31, 0x01	; 1
    178c:	20 40       	sbci	r18, 0x00	; 0
    178e:	80 40       	sbci	r24, 0x00	; 0
    1790:	e1 f7       	brne	.-8      	; 0x178a <setupTransceiver+0x1b8>
    1792:	00 c0       	rjmp	.+0      	; 0x1794 <setupTransceiver+0x1c2>
    1794:	00 00       	nop
	
	_delay_ms(3000);
	
	TXWrite(myDSNVal,4,0);
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	64 e0       	ldi	r22, 0x04	; 4
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	c8 01       	movw	r24, r16
    17a0:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    17a4:	9f e3       	ldi	r25, 0x3F	; 63
    17a6:	ed e0       	ldi	r30, 0x0D	; 13
    17a8:	f3 e0       	ldi	r31, 0x03	; 3
    17aa:	91 50       	subi	r25, 0x01	; 1
    17ac:	e0 40       	sbci	r30, 0x00	; 0
    17ae:	f0 40       	sbci	r31, 0x00	; 0
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <setupTransceiver+0x1d8>
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <setupTransceiver+0x1e2>
    17b4:	00 00       	nop
	_delay_ms(1000);
	PORTD |= (1 << PORTD5);	// Data transmit mode
    17b6:	5d 9a       	sbi	0x0b, 5	; 11
	
	//PORTC |= (1 << PORTC5);
	
	return myDSNVal;
	
}
    17b8:	c8 01       	movw	r24, r16
    17ba:	60 96       	adiw	r28, 0x10	; 16
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <malloc>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	91 05       	cpc	r25, r1
    17dc:	10 f4       	brcc	.+4      	; 0x17e2 <malloc+0x12>
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <__flp>
    17e6:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <__flp+0x1>
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	a0 e0       	ldi	r26, 0x00	; 0
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	30 97       	sbiw	r30, 0x00	; 0
    17f4:	19 f1       	breq	.+70     	; 0x183c <malloc+0x6c>
    17f6:	40 81       	ld	r20, Z
    17f8:	51 81       	ldd	r21, Z+1	; 0x01
    17fa:	02 81       	ldd	r16, Z+2	; 0x02
    17fc:	13 81       	ldd	r17, Z+3	; 0x03
    17fe:	48 17       	cp	r20, r24
    1800:	59 07       	cpc	r21, r25
    1802:	c8 f0       	brcs	.+50     	; 0x1836 <malloc+0x66>
    1804:	84 17       	cp	r24, r20
    1806:	95 07       	cpc	r25, r21
    1808:	69 f4       	brne	.+26     	; 0x1824 <malloc+0x54>
    180a:	10 97       	sbiw	r26, 0x00	; 0
    180c:	31 f0       	breq	.+12     	; 0x181a <malloc+0x4a>
    180e:	12 96       	adiw	r26, 0x02	; 2
    1810:	0c 93       	st	X, r16
    1812:	12 97       	sbiw	r26, 0x02	; 2
    1814:	13 96       	adiw	r26, 0x03	; 3
    1816:	1c 93       	st	X, r17
    1818:	27 c0       	rjmp	.+78     	; 0x1868 <malloc+0x98>
    181a:	00 93 16 03 	sts	0x0316, r16	; 0x800316 <__flp>
    181e:	10 93 17 03 	sts	0x0317, r17	; 0x800317 <__flp+0x1>
    1822:	22 c0       	rjmp	.+68     	; 0x1868 <malloc+0x98>
    1824:	21 15       	cp	r18, r1
    1826:	31 05       	cpc	r19, r1
    1828:	19 f0       	breq	.+6      	; 0x1830 <malloc+0x60>
    182a:	42 17       	cp	r20, r18
    182c:	53 07       	cpc	r21, r19
    182e:	18 f4       	brcc	.+6      	; 0x1836 <malloc+0x66>
    1830:	9a 01       	movw	r18, r20
    1832:	bd 01       	movw	r22, r26
    1834:	ef 01       	movw	r28, r30
    1836:	df 01       	movw	r26, r30
    1838:	f8 01       	movw	r30, r16
    183a:	db cf       	rjmp	.-74     	; 0x17f2 <malloc+0x22>
    183c:	21 15       	cp	r18, r1
    183e:	31 05       	cpc	r19, r1
    1840:	f9 f0       	breq	.+62     	; 0x1880 <malloc+0xb0>
    1842:	28 1b       	sub	r18, r24
    1844:	39 0b       	sbc	r19, r25
    1846:	24 30       	cpi	r18, 0x04	; 4
    1848:	31 05       	cpc	r19, r1
    184a:	80 f4       	brcc	.+32     	; 0x186c <malloc+0x9c>
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	61 15       	cp	r22, r1
    1852:	71 05       	cpc	r23, r1
    1854:	21 f0       	breq	.+8      	; 0x185e <malloc+0x8e>
    1856:	fb 01       	movw	r30, r22
    1858:	93 83       	std	Z+3, r25	; 0x03
    185a:	82 83       	std	Z+2, r24	; 0x02
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <malloc+0x96>
    185e:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <__flp+0x1>
    1862:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <__flp>
    1866:	fe 01       	movw	r30, r28
    1868:	32 96       	adiw	r30, 0x02	; 2
    186a:	44 c0       	rjmp	.+136    	; 0x18f4 <malloc+0x124>
    186c:	fe 01       	movw	r30, r28
    186e:	e2 0f       	add	r30, r18
    1870:	f3 1f       	adc	r31, r19
    1872:	81 93       	st	Z+, r24
    1874:	91 93       	st	Z+, r25
    1876:	22 50       	subi	r18, 0x02	; 2
    1878:	31 09       	sbc	r19, r1
    187a:	39 83       	std	Y+1, r19	; 0x01
    187c:	28 83       	st	Y, r18
    187e:	3a c0       	rjmp	.+116    	; 0x18f4 <malloc+0x124>
    1880:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    1884:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    1888:	23 2b       	or	r18, r19
    188a:	41 f4       	brne	.+16     	; 0x189c <malloc+0xcc>
    188c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1890:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1894:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <__brkval+0x1>
    1898:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__brkval>
    189c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    18a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    18a4:	21 15       	cp	r18, r1
    18a6:	31 05       	cpc	r19, r1
    18a8:	41 f4       	brne	.+16     	; 0x18ba <malloc+0xea>
    18aa:	2d b7       	in	r18, 0x3d	; 61
    18ac:	3e b7       	in	r19, 0x3e	; 62
    18ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    18b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    18b6:	24 1b       	sub	r18, r20
    18b8:	35 0b       	sbc	r19, r21
    18ba:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <__brkval>
    18be:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <__brkval+0x1>
    18c2:	e2 17       	cp	r30, r18
    18c4:	f3 07       	cpc	r31, r19
    18c6:	a0 f4       	brcc	.+40     	; 0x18f0 <malloc+0x120>
    18c8:	2e 1b       	sub	r18, r30
    18ca:	3f 0b       	sbc	r19, r31
    18cc:	28 17       	cp	r18, r24
    18ce:	39 07       	cpc	r19, r25
    18d0:	78 f0       	brcs	.+30     	; 0x18f0 <malloc+0x120>
    18d2:	ac 01       	movw	r20, r24
    18d4:	4e 5f       	subi	r20, 0xFE	; 254
    18d6:	5f 4f       	sbci	r21, 0xFF	; 255
    18d8:	24 17       	cp	r18, r20
    18da:	35 07       	cpc	r19, r21
    18dc:	48 f0       	brcs	.+18     	; 0x18f0 <malloc+0x120>
    18de:	4e 0f       	add	r20, r30
    18e0:	5f 1f       	adc	r21, r31
    18e2:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <__brkval+0x1>
    18e6:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <__brkval>
    18ea:	81 93       	st	Z+, r24
    18ec:	91 93       	st	Z+, r25
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <malloc+0x124>
    18f0:	e0 e0       	ldi	r30, 0x00	; 0
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	cf 01       	movw	r24, r30
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	08 95       	ret

00001900 <free>:
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	09 f4       	brne	.+2      	; 0x190a <free+0xa>
    1908:	81 c0       	rjmp	.+258    	; 0x1a0c <free+0x10c>
    190a:	fc 01       	movw	r30, r24
    190c:	32 97       	sbiw	r30, 0x02	; 2
    190e:	13 82       	std	Z+3, r1	; 0x03
    1910:	12 82       	std	Z+2, r1	; 0x02
    1912:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <__flp>
    1916:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <__flp+0x1>
    191a:	10 97       	sbiw	r26, 0x00	; 0
    191c:	81 f4       	brne	.+32     	; 0x193e <free+0x3e>
    191e:	20 81       	ld	r18, Z
    1920:	31 81       	ldd	r19, Z+1	; 0x01
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    192a:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    192e:	28 17       	cp	r18, r24
    1930:	39 07       	cpc	r19, r25
    1932:	51 f5       	brne	.+84     	; 0x1988 <free+0x88>
    1934:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__brkval+0x1>
    1938:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__brkval>
    193c:	67 c0       	rjmp	.+206    	; 0x1a0c <free+0x10c>
    193e:	ed 01       	movw	r28, r26
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	ce 17       	cp	r28, r30
    1946:	df 07       	cpc	r29, r31
    1948:	40 f4       	brcc	.+16     	; 0x195a <free+0x5a>
    194a:	4a 81       	ldd	r20, Y+2	; 0x02
    194c:	5b 81       	ldd	r21, Y+3	; 0x03
    194e:	9e 01       	movw	r18, r28
    1950:	41 15       	cp	r20, r1
    1952:	51 05       	cpc	r21, r1
    1954:	f1 f0       	breq	.+60     	; 0x1992 <free+0x92>
    1956:	ea 01       	movw	r28, r20
    1958:	f5 cf       	rjmp	.-22     	; 0x1944 <free+0x44>
    195a:	d3 83       	std	Z+3, r29	; 0x03
    195c:	c2 83       	std	Z+2, r28	; 0x02
    195e:	40 81       	ld	r20, Z
    1960:	51 81       	ldd	r21, Z+1	; 0x01
    1962:	84 0f       	add	r24, r20
    1964:	95 1f       	adc	r25, r21
    1966:	c8 17       	cp	r28, r24
    1968:	d9 07       	cpc	r29, r25
    196a:	59 f4       	brne	.+22     	; 0x1982 <free+0x82>
    196c:	88 81       	ld	r24, Y
    196e:	99 81       	ldd	r25, Y+1	; 0x01
    1970:	84 0f       	add	r24, r20
    1972:	95 1f       	adc	r25, r21
    1974:	02 96       	adiw	r24, 0x02	; 2
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	93 83       	std	Z+3, r25	; 0x03
    1980:	82 83       	std	Z+2, r24	; 0x02
    1982:	21 15       	cp	r18, r1
    1984:	31 05       	cpc	r19, r1
    1986:	29 f4       	brne	.+10     	; 0x1992 <free+0x92>
    1988:	f0 93 17 03 	sts	0x0317, r31	; 0x800317 <__flp+0x1>
    198c:	e0 93 16 03 	sts	0x0316, r30	; 0x800316 <__flp>
    1990:	3d c0       	rjmp	.+122    	; 0x1a0c <free+0x10c>
    1992:	e9 01       	movw	r28, r18
    1994:	fb 83       	std	Y+3, r31	; 0x03
    1996:	ea 83       	std	Y+2, r30	; 0x02
    1998:	49 91       	ld	r20, Y+
    199a:	59 91       	ld	r21, Y+
    199c:	c4 0f       	add	r28, r20
    199e:	d5 1f       	adc	r29, r21
    19a0:	ec 17       	cp	r30, r28
    19a2:	fd 07       	cpc	r31, r29
    19a4:	61 f4       	brne	.+24     	; 0x19be <free+0xbe>
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	84 0f       	add	r24, r20
    19ac:	95 1f       	adc	r25, r21
    19ae:	02 96       	adiw	r24, 0x02	; 2
    19b0:	e9 01       	movw	r28, r18
    19b2:	99 83       	std	Y+1, r25	; 0x01
    19b4:	88 83       	st	Y, r24
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	9b 83       	std	Y+3, r25	; 0x03
    19bc:	8a 83       	std	Y+2, r24	; 0x02
    19be:	e0 e0       	ldi	r30, 0x00	; 0
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	12 96       	adiw	r26, 0x02	; 2
    19c4:	8d 91       	ld	r24, X+
    19c6:	9c 91       	ld	r25, X
    19c8:	13 97       	sbiw	r26, 0x03	; 3
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	19 f0       	breq	.+6      	; 0x19d4 <free+0xd4>
    19ce:	fd 01       	movw	r30, r26
    19d0:	dc 01       	movw	r26, r24
    19d2:	f7 cf       	rjmp	.-18     	; 0x19c2 <free+0xc2>
    19d4:	8d 91       	ld	r24, X+
    19d6:	9c 91       	ld	r25, X
    19d8:	11 97       	sbiw	r26, 0x01	; 1
    19da:	9d 01       	movw	r18, r26
    19dc:	2e 5f       	subi	r18, 0xFE	; 254
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	82 0f       	add	r24, r18
    19e2:	93 1f       	adc	r25, r19
    19e4:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    19e8:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    19ec:	28 17       	cp	r18, r24
    19ee:	39 07       	cpc	r19, r25
    19f0:	69 f4       	brne	.+26     	; 0x1a0c <free+0x10c>
    19f2:	30 97       	sbiw	r30, 0x00	; 0
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <free+0x100>
    19f6:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__flp+0x1>
    19fa:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__flp>
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <free+0x104>
    1a00:	13 82       	std	Z+3, r1	; 0x03
    1a02:	12 82       	std	Z+2, r1	; 0x02
    1a04:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <__brkval+0x1>
    1a08:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <__brkval>
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <_exit>:
    1a12:	f8 94       	cli

00001a14 <__stop_program>:
    1a14:	ff cf       	rjmp	.-2      	; 0x1a14 <__stop_program>
