
nub_long_range_328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001f40  00001fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  00800120  00800120  00001ff4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003831  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ba  00000000  00000000  000059cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d0  00000000  00000000  00006a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  00008158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a73  00000000  00000000  00008660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003353  00000000  00000000  000090d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  0000c426  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_28>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e0 e4       	ldi	r30, 0x40	; 64
      c8:	ff e1       	ldi	r31, 0x1F	; 31
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 32       	cpi	r26, 0x20	; 32
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	a0 e2       	ldi	r26, 0x20	; 32
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	aa 32       	cpi	r26, 0x2A	; 42
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 38 01 	call	0x270	; 0x270 <main>
      ea:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TXWrite>:
		return 1;
	}
	else{
		return 0;
	}
}
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	66 23       	and	r22, r22
     100:	31 f1       	breq	.+76     	; 0x14e <TXWrite+0x5c>
     102:	61 50       	subi	r22, 0x01	; 1
     104:	e8 2e       	mov	r14, r24
     106:	f9 2e       	mov	r15, r25
     108:	a8 ec       	ldi	r26, 0xC8	; 200
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	0e ec       	ldi	r16, 0xCE	; 206
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	e0 ec       	ldi	r30, 0xC0	; 192
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	26 ec       	ldi	r18, 0xC6	; 198
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	01 c0       	rjmp	.+2      	; 0x11c <TXWrite+0x2a>
     11a:	68 2f       	mov	r22, r24
     11c:	41 15       	cp	r20, r1
     11e:	51 05       	cpc	r21, r1
     120:	41 f4       	brne	.+16     	; 0x132 <TXWrite+0x40>
     122:	80 81       	ld	r24, Z
     124:	85 ff       	sbrs	r24, 5
     126:	fd cf       	rjmp	.-6      	; 0x122 <TXWrite+0x30>
     128:	e7 01       	movw	r28, r14
     12a:	88 81       	ld	r24, Y
     12c:	e9 01       	movw	r28, r18
     12e:	88 83       	st	Y, r24
     130:	07 c0       	rjmp	.+14     	; 0x140 <TXWrite+0x4e>
     132:	8c 91       	ld	r24, X
     134:	85 ff       	sbrs	r24, 5
     136:	fd cf       	rjmp	.-6      	; 0x132 <TXWrite+0x40>
     138:	e7 01       	movw	r28, r14
     13a:	88 81       	ld	r24, Y
     13c:	e8 01       	movw	r28, r16
     13e:	88 83       	st	Y, r24
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	86 0f       	add	r24, r22
     144:	df ef       	ldi	r29, 0xFF	; 255
     146:	ed 1a       	sub	r14, r29
     148:	fd 0a       	sbc	r15, r29
     14a:	61 11       	cpse	r22, r1
     14c:	e6 cf       	rjmp	.-52     	; 0x11a <TXWrite+0x28>
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <getChar>:
     15c:	81 11       	cpse	r24, r1
     15e:	14 c0       	rjmp	.+40     	; 0x188 <getChar+0x2c>
     160:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rx0ReadPos>
     164:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
     168:	98 17       	cp	r25, r24
     16a:	11 f1       	breq	.+68     	; 0x1b0 <getChar+0x54>
     16c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unread0Bytes>
     170:	81 50       	subi	r24, 0x01	; 1
     172:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <unread0Bytes>
     176:	e9 2f       	mov	r30, r25
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	ea 5d       	subi	r30, 0xDA	; 218
     17c:	fd 4f       	sbci	r31, 0xFD	; 253
     17e:	80 81       	ld	r24, Z
     180:	9f 5f       	subi	r25, 0xFF	; 255
     182:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <rx0ReadPos>
     186:	08 95       	ret
     188:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <rx1ReadPos>
     18c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx1WritePos>
     190:	98 17       	cp	r25, r24
     192:	81 f0       	breq	.+32     	; 0x1b4 <getChar+0x58>
     194:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     19e:	e9 2f       	mov	r30, r25
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	ea 5d       	subi	r30, 0xDA	; 218
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	80 81       	ld	r24, Z
     1a8:	9f 5f       	subi	r25, 0xFF	; 255
     1aa:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <rx1ReadPos>
     1ae:	08 95       	ret
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	08 95       	ret
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	08 95       	ret

000001b8 <skipBuffer>:
     1b8:	81 11       	cpse	r24, r1
     1ba:	07 c0       	rjmp	.+14     	; 0x1ca <skipBuffer+0x12>
     1bc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <unread0Bytes>
     1c0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
     1c4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx0ReadPos>
     1c8:	08 95       	ret
     1ca:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     1ce:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx1WritePos>
     1d2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <rx1ReadPos>
     1d6:	08 95       	ret

000001d8 <Bytes0UnRead>:
     1d8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unread0Bytes>
     1dc:	08 95       	ret

000001de <Bytes1UnRead>:
     1de:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     1e2:	08 95       	ret

000001e4 <__vector_18>:




// Interrupt for receiving UART data from RX 0
ISR(USART0_RX_vect){
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	8f 93       	push	r24
     1f0:	9f 93       	push	r25
     1f2:	ef 93       	push	r30
     1f4:	ff 93       	push	r31
	unread0Bytes++;
     1f6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unread0Bytes>
     1fa:	8f 5f       	subi	r24, 0xFF	; 255
     1fc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <unread0Bytes>
	rx0Buffer[rx0WritePos] = UDR0;
     200:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
     204:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     208:	e8 2f       	mov	r30, r24
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ea 5d       	subi	r30, 0xDA	; 218
     20e:	fd 4f       	sbci	r31, 0xFD	; 253
     210:	90 83       	st	Z, r25
	rx0WritePos++;
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rx0WritePos>
	{
		rx0WritePos = 0;
	}
	
	
}
     218:	ff 91       	pop	r31
     21a:	ef 91       	pop	r30
     21c:	9f 91       	pop	r25
     21e:	8f 91       	pop	r24
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_28>:

ISR(USART1_RX_vect){
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	ef 93       	push	r30
     23a:	ff 93       	push	r31
	unread1Bytes++;
     23c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     240:	8f 5f       	subi	r24, 0xFF	; 255
     242:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	rx1Buffer[rx1WritePos] = UDR1;
     246:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <rx1WritePos>
     24a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     24e:	e8 2f       	mov	r30, r24
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ea 5d       	subi	r30, 0xDA	; 218
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	90 83       	st	Z, r25
	rx1WritePos++;
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx1WritePos>
	
	if(rx1WritePos >= RX1_BUFFER_SIZE)
	{
		rx1WritePos = 0;
	}
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	9f 91       	pop	r25
     264:	8f 91       	pop	r24
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <main>:
};



int main(void)
{
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	c9 5d       	subi	r28, 0xD9	; 217
     27a:	d1 09       	sbc	r29, r1
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
	
	DDRE |= (1 << DDE1);
     286:	69 9a       	sbi	0x0d, 1	; 13
	PORTE |= (1 << LED);
     288:	71 9a       	sbi	0x0e, 1	; 14
	USART_setup(MYUBRR);
     28a:	8c e0       	ldi	r24, 0x0C	; 12
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <USART_setup>
	sei();		// Enabling interrupts 
     292:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     294:	87 ea       	ldi	r24, 0xA7	; 167
     296:	91 e6       	ldi	r25, 0x61	; 97
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x28>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x2e>
     29e:	00 00       	nop
	uint8_t *networkPtr2 = &network;
	struct myConData *myConsptr, myCons;
	myConsptr = &myCons;
	uint16_t networkSize = sizeof(network);
	
	myDSN = setupTransceiver();
     2a0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <setupTransceiver>
     2a4:	fe 01       	movw	r30, r28
     2a6:	31 96       	adiw	r30, 0x01	; 1
     2a8:	9e 01       	movw	r18, r28
     2aa:	2a 54       	subi	r18, 0x4A	; 74
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
	
	
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
     2ae:	11 92       	st	Z+, r1
	myDSN = setupTransceiver();
	
	
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
     2b0:	e2 17       	cp	r30, r18
     2b2:	f3 07       	cpc	r31, r19
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x3e>
     2b6:	9e 01       	movw	r18, r28
     2b8:	2a 54       	subi	r18, 0x4A	; 74
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	68 2f       	mov	r22, r24
     2be:	79 2f       	mov	r23, r25
     2c0:	de 01       	movw	r26, r28
     2c2:	12 96       	adiw	r26, 0x02	; 2
     2c4:	ce 01       	movw	r24, r28
     2c6:	06 96       	adiw	r24, 0x06	; 6
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	// Mostly test stuff ////////////////////////////////////////////////
	for(int i = 0; i < 4; i++){
		myCons.myDSN[i] = myDSN[i];
     2c8:	fb 01       	movw	r30, r22
     2ca:	40 81       	ld	r20, Z
     2cc:	f9 01       	movw	r30, r18
     2ce:	41 93       	st	Z+, r20
     2d0:	9f 01       	movw	r18, r30
		network.device[0].deviceDSN[i] = myDSN[i];
     2d2:	fb 01       	movw	r30, r22
     2d4:	41 91       	ld	r20, Z+
     2d6:	bf 01       	movw	r22, r30
     2d8:	4d 93       	st	X+, r20
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	// Mostly test stuff ////////////////////////////////////////////////
	for(int i = 0; i < 4; i++){
     2da:	a8 17       	cp	r26, r24
     2dc:	b9 07       	cpc	r27, r25
     2de:	a1 f7       	brne	.-24     	; 0x2c8 <main+0x58>
     2e0:	e6 eb       	ldi	r30, 0xB6	; 182
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	72 96       	adiw	r30, 0x12	; 18
     2ea:	de 01       	movw	r26, r28
     2ec:	54 96       	adiw	r26, 0x14	; 20
     2ee:	86 eb       	ldi	r24, 0xB6	; 182
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	8c 0f       	add	r24, r28
     2f4:	9d 1f       	adc	r25, r29
     2f6:	48 96       	adiw	r24, 0x18	; 24
		//network.device[2].nubConnections[0][i] = network.device[1].deviceDSN[i];
		
	}
	
	for(int i = 0; i <6; i++){
		myCons.myPhoneConnections[0][i] = 0x11;	// Just giving it a default value, 
     2f8:	21 e1       	ldi	r18, 0x11	; 17
     2fa:	21 93       	st	Z+, r18
		network.device[0].phoneConnections[0][i] = myCons.myPhoneConnections[0][i];
     2fc:	2d 93       	st	X+, r18
		
		//network.device[2].nubConnections[0][i] = network.device[1].deviceDSN[i];
		
	}
	
	for(int i = 0; i <6; i++){
     2fe:	e8 17       	cp	r30, r24
     300:	f9 07       	cpc	r31, r25
     302:	d9 f7       	brne	.-10     	; 0x2fa <main+0x8a>
		//network.device[1].phoneConnections[0][i] = 0x33;
		//network.device[2].phoneConnections[0][i] = 0x44;
	}
	
	
	myConsptr->myNumOfNubCon = 0;
     304:	c6 54       	subi	r28, 0x46	; 70
     306:	df 4f       	sbci	r29, 0xFF	; 255
     308:	18 82       	st	Y, r1
     30a:	ca 5b       	subi	r28, 0xBA	; 186
     30c:	d0 40       	sbci	r29, 0x00	; 0
	myCons.myNumOfPhoneCon = 1;
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	c5 54       	subi	r28, 0x45	; 69
     312:	df 4f       	sbci	r29, 0xFF	; 255
     314:	88 83       	st	Y, r24
     316:	cb 5b       	subi	r28, 0xBB	; 187
     318:	d0 40       	sbci	r29, 0x00	; 0
	network.numOfDevices = 1;
     31a:	89 83       	std	Y+1, r24	; 0x01
	network.device[0].numOfNubCon = myCons.myNumOfNubCon;	
     31c:	1e 82       	std	Y+6, r1	; 0x06
	network.device[0].numOfPhoneCon = myCons.myNumOfPhoneCon;	
     31e:	8f 83       	std	Y+7, r24	; 0x07
	//network.device[2].numOfPhoneCon = 1;
	uint8_t output = 0;
	//////////////////////////////////////////////////////////////////
	
	uint8_t firstCon = 1;
	skipBuffer(0);
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
	//network.device[1].numOfPhoneCon = 1;
	//network.device[2].numOfPhoneCon = 1;
	uint8_t output = 0;
	//////////////////////////////////////////////////////////////////
	
	uint8_t firstCon = 1;
     326:	ff 24       	eor	r15, r15
     328:	f3 94       	inc	r15
	
	uint8_t i = 0;
	uint8_t UARTPort;
    while (1){		
		
		if (firstCon == 1){
     32a:	f1 e0       	ldi	r31, 0x01	; 1
     32c:	ff 12       	cpse	r15, r31
     32e:	0f c0       	rjmp	.+30     	; 0x34e <main+0xde>
			
			broadcastCon(0x00,myConsptr);
     330:	be 01       	movw	r22, r28
     332:	6a 54       	subi	r22, 0x4A	; 74
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 01 04 	call	0x802	; 0x802 <broadcastCon>
     33c:	2f e5       	ldi	r18, 0x5F	; 95
     33e:	83 ee       	ldi	r24, 0xE3	; 227
     340:	96 e1       	ldi	r25, 0x16	; 22
     342:	21 50       	subi	r18, 0x01	; 1
     344:	80 40       	sbci	r24, 0x00	; 0
     346:	90 40       	sbci	r25, 0x00	; 0
     348:	e1 f7       	brne	.-8      	; 0x342 <main+0xd2>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0xdc>
     34c:	00 00       	nop
			
			_delay_ms(7500);
		}
		
		
		if(Bytes0UnRead() > 0){
     34e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Bytes0UnRead>
     352:	88 23       	and	r24, r24
     354:	b1 f0       	breq	.+44     	; 0x382 <main+0x112>
			UARTPort = 0;
			
			output = handleMessages(UARTPort,networkPtr,networkSize,networkPtr2,myConsptr);
     356:	8e 01       	movw	r16, r28
     358:	0a 54       	subi	r16, 0x4A	; 74
     35a:	1f 4f       	sbci	r17, 0xFF	; 255
     35c:	9e 01       	movw	r18, r28
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	3f 4f       	sbci	r19, 0xFF	; 255
     362:	45 eb       	ldi	r20, 0xB5	; 181
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	b9 01       	movw	r22, r18
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 07 08 	call	0x100e	; 0x100e <handleMessages>
			if (output == 3 || output == 5){
     36e:	83 30       	cpi	r24, 0x03	; 3
     370:	21 f0       	breq	.+8      	; 0x37a <main+0x10a>
     372:	85 30       	cpi	r24, 0x05	; 5
     374:	19 f4       	brne	.+6      	; 0x37c <main+0x10c>
				firstCon = 0;
     376:	f1 2c       	mov	r15, r1
     378:	01 c0       	rjmp	.+2      	; 0x37c <main+0x10c>
     37a:	f1 2c       	mov	r15, r1
			}
			
			skipBuffer(0);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
		}
		
		if(Bytes1UnRead() > 0){
     382:	0e 94 ef 00 	call	0x1de	; 0x1de <Bytes1UnRead>
     386:	88 23       	and	r24, r24
     388:	79 f0       	breq	.+30     	; 0x3a8 <main+0x138>
			UARTPort = 1;
			//TXWrite("AAAAAAAAAAAAAAAAAAAA",20,1);
			//TXWrite(networkPtr,networkSize,1);
			//TXWrite("AAAAAAAAAAAAAAAAAAAA",20,1);
			handleMessages(UARTPort,networkPtr,networkSize,networkPtr2,myConsptr);
     38a:	8e 01       	movw	r16, r28
     38c:	0a 54       	subi	r16, 0x4A	; 74
     38e:	1f 4f       	sbci	r17, 0xFF	; 255
     390:	9e 01       	movw	r18, r28
     392:	2f 5f       	subi	r18, 0xFF	; 255
     394:	3f 4f       	sbci	r19, 0xFF	; 255
     396:	45 eb       	ldi	r20, 0xB5	; 181
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	b9 01       	movw	r22, r18
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 07 08 	call	0x100e	; 0x100e <handleMessages>
			skipBuffer(1);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
     3a8:	e7 ea       	ldi	r30, 0xA7	; 167
     3aa:	f1 e6       	ldi	r31, 0x61	; 97
     3ac:	31 97       	sbiw	r30, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x13c>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x142>
     3b2:	00 00       	nop
     3b4:	ba cf       	rjmp	.-140    	; 0x32a <main+0xba>

000003b6 <getDestPhoneAdd>:
		}
	}
	// Device not found 
	return -1;
	
}
     3b6:	6f 92       	push	r6
     3b8:	7f 92       	push	r7
     3ba:	8f 92       	push	r8
     3bc:	9f 92       	push	r9
     3be:	af 92       	push	r10
     3c0:	bf 92       	push	r11
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	8c 01       	movw	r16, r24
     3d4:	ea 01       	movw	r28, r20
     3d6:	84 e0       	ldi	r24, 0x04	; 4
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <malloc>
     3de:	68 80       	ld	r6, Y
     3e0:	66 20       	and	r6, r6
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <getDestPhoneAdd+0x30>
     3e4:	46 c0       	rjmp	.+140    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     3e6:	6e 01       	movw	r12, r28
     3e8:	e1 2c       	mov	r14, r1
     3ea:	f1 2c       	mov	r15, r1
     3ec:	b8 01       	movw	r22, r16
     3ee:	6a 5f       	subi	r22, 0xFA	; 250
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	32 c0       	rjmp	.+100    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     3f4:	a1 90       	ld	r10, Z+
     3f6:	bd 90       	ld	r11, X+
     3f8:	ab 10       	cpse	r10, r11
     3fa:	16 c0       	rjmp	.+44     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3fc:	e6 17       	cp	r30, r22
     3fe:	f7 07       	cpc	r31, r23
     400:	c9 f7       	brne	.-14     	; 0x3f4 <getDestPhoneAdd+0x3e>
     402:	24 e2       	ldi	r18, 0x24	; 36
     404:	2e 9d       	mul	r18, r14
     406:	d0 01       	movw	r26, r0
     408:	2f 9d       	mul	r18, r15
     40a:	b0 0d       	add	r27, r0
     40c:	11 24       	eor	r1, r1
     40e:	11 96       	adiw	r26, 0x01	; 1
     410:	ac 0f       	add	r26, r28
     412:	bd 1f       	adc	r27, r29
     414:	fc 01       	movw	r30, r24
     416:	ac 01       	movw	r20, r24
     418:	4c 5f       	subi	r20, 0xFC	; 252
     41a:	5f 4f       	sbci	r21, 0xFF	; 255
     41c:	2d 91       	ld	r18, X+
     41e:	21 93       	st	Z+, r18
     420:	4e 17       	cp	r20, r30
     422:	5f 07       	cpc	r21, r31
     424:	d9 f7       	brne	.-10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     426:	29 c0       	rjmp	.+82     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     428:	93 94       	inc	r9
     42a:	2a 5f       	subi	r18, 0xFA	; 250
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	4a 5f       	subi	r20, 0xFA	; 250
     430:	5f 4f       	sbci	r21, 0xFF	; 255
     432:	98 14       	cp	r9, r8
     434:	49 f0       	breq	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     436:	d9 01       	movw	r26, r18
     438:	53 96       	adiw	r26, 0x13	; 19
     43a:	ec 91       	ld	r30, X
     43c:	7e 12       	cpse	r7, r30
     43e:	f4 cf       	rjmp	.-24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     440:	f8 01       	movw	r30, r16
     442:	31 96       	adiw	r30, 0x01	; 1
     444:	da 01       	movw	r26, r20
     446:	d6 cf       	rjmp	.-84     	; 0x3f4 <getDestPhoneAdd+0x3e>
     448:	bf ef       	ldi	r27, 0xFF	; 255
     44a:	eb 1a       	sub	r14, r27
     44c:	fb 0a       	sbc	r15, r27
     44e:	e4 e2       	ldi	r30, 0x24	; 36
     450:	ce 0e       	add	r12, r30
     452:	d1 1c       	adc	r13, r1
     454:	e6 14       	cp	r14, r6
     456:	68 f4       	brcc	.+26     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     458:	d6 01       	movw	r26, r12
     45a:	16 96       	adiw	r26, 0x06	; 6
     45c:	8c 90       	ld	r8, X
     45e:	88 20       	and	r8, r8
     460:	99 f3       	breq	.-26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     462:	f8 01       	movw	r30, r16
     464:	70 80       	ld	r7, Z
     466:	a6 01       	movw	r20, r12
     468:	4c 5e       	subi	r20, 0xEC	; 236
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	96 01       	movw	r18, r12
     46e:	91 2c       	mov	r9, r1
     470:	e2 cf       	rjmp	.-60     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	dc 01       	movw	r26, r24
     476:	16 96       	adiw	r26, 0x06	; 6
     478:	2c 93       	st	X, r18
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	bf 90       	pop	r11
     48c:	af 90       	pop	r10
     48e:	9f 90       	pop	r9
     490:	8f 90       	pop	r8
     492:	7f 90       	pop	r7
     494:	6f 90       	pop	r6
     496:	08 95       	ret

00000498 <writeDestDSN>:
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <writeDestDSN+0xe>
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <writeDestDSN+0x10>
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	29 83       	std	Y+1, r18	; 0x01
     4b0:	32 e0       	ldi	r19, 0x02	; 2
     4b2:	3a 83       	std	Y+2, r19	; 0x02
     4b4:	37 e6       	ldi	r19, 0x67	; 103
     4b6:	3b 83       	std	Y+3, r19	; 0x03
     4b8:	2c 83       	std	Y+4, r18	; 0x04
     4ba:	5d 98       	cbi	0x0b, 5	; 11
     4bc:	8c 01       	movw	r16, r24
     4be:	7c 01       	movw	r14, r24
     4c0:	24 e0       	ldi	r18, 0x04	; 4
     4c2:	e2 0e       	add	r14, r18
     4c4:	f1 1c       	adc	r15, r1
     4c6:	f8 01       	movw	r30, r16
     4c8:	81 91       	ld	r24, Z+
     4ca:	8f 01       	movw	r16, r30
     4cc:	8c 83       	std	Y+4, r24	; 0x04
     4ce:	9b 81       	ldd	r25, Y+3	; 0x03
     4d0:	9f 5f       	subi	r25, 0xFF	; 255
     4d2:	9b 83       	std	Y+3, r25	; 0x03
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	64 e0       	ldi	r22, 0x04	; 4
     4da:	ce 01       	movw	r24, r28
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     4e2:	0e 15       	cp	r16, r14
     4e4:	1f 05       	cpc	r17, r15
     4e6:	79 f7       	brne	.-34     	; 0x4c6 <writeDestDSN+0x2e>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
     4ee:	83 ec       	ldi	r24, 0xC3	; 195
     4f0:	99 e0       	ldi	r25, 0x09	; 9
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <writeDestDSN+0x5a>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <writeDestDSN+0x60>
     4f8:	00 00       	nop
     4fa:	5d 9a       	sbi	0x0b, 5	; 11
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	08 95       	ret

00000512 <buildMsgPath>:
     512:	2f 92       	push	r2
     514:	3f 92       	push	r3
     516:	4f 92       	push	r4
     518:	5f 92       	push	r5
     51a:	6f 92       	push	r6
     51c:	7f 92       	push	r7
     51e:	8f 92       	push	r8
     520:	9f 92       	push	r9
     522:	af 92       	push	r10
     524:	bf 92       	push	r11
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	00 d0       	rcall	.+0      	; 0x538 <buildMsgPath+0x26>
     538:	00 d0       	rcall	.+0      	; 0x53a <buildMsgPath+0x28>
     53a:	1f 92       	push	r1
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	7c 01       	movw	r14, r24
     542:	7a 83       	std	Y+2, r23	; 0x02
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	8a 01       	movw	r16, r20
     548:	8d e0       	ldi	r24, 0x0D	; 13
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <malloc>
     550:	1c 01       	movw	r2, r24
     552:	d8 01       	movw	r26, r16
     554:	14 96       	adiw	r26, 0x04	; 4
     556:	5c 91       	ld	r21, X
     558:	55 23       	and	r21, r21
     55a:	51 f1       	breq	.+84     	; 0x5b0 <buildMsgPath+0x9e>
     55c:	f7 01       	movw	r30, r14
     55e:	60 81       	ld	r22, Z
     560:	98 01       	movw	r18, r16
     562:	f8 01       	movw	r30, r16
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	dd 24       	eor	r13, r13
     56a:	d3 94       	inc	r13
     56c:	89 80       	ldd	r8, Y+1	; 0x01
     56e:	9a 80       	ldd	r9, Y+2	; 0x02
     570:	05 c0       	rjmp	.+10     	; 0x57c <buildMsgPath+0x6a>
     572:	7d 2d       	mov	r23, r13
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	34 96       	adiw	r30, 0x04	; 4
     578:	85 17       	cp	r24, r21
     57a:	b1 f0       	breq	.+44     	; 0x5a8 <buildMsgPath+0x96>
     57c:	96 81       	ldd	r25, Z+6	; 0x06
     57e:	96 13       	cpse	r25, r22
     580:	f9 cf       	rjmp	.-14     	; 0x574 <buildMsgPath+0x62>
     582:	d7 01       	movw	r26, r14
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	4c 91       	ld	r20, X
     588:	11 97       	sbiw	r26, 0x01	; 1
     58a:	97 81       	ldd	r25, Z+7	; 0x07
     58c:	49 13       	cpse	r20, r25
     58e:	f2 cf       	rjmp	.-28     	; 0x574 <buildMsgPath+0x62>
     590:	12 96       	adiw	r26, 0x02	; 2
     592:	4c 91       	ld	r20, X
     594:	12 97       	sbiw	r26, 0x02	; 2
     596:	90 85       	ldd	r25, Z+8	; 0x08
     598:	49 13       	cpse	r20, r25
     59a:	ec cf       	rjmp	.-40     	; 0x574 <buildMsgPath+0x62>
     59c:	13 96       	adiw	r26, 0x03	; 3
     59e:	4c 91       	ld	r20, X
     5a0:	91 85       	ldd	r25, Z+9	; 0x09
     5a2:	49 17       	cp	r20, r25
     5a4:	31 f3       	breq	.-52     	; 0x572 <buildMsgPath+0x60>
     5a6:	e6 cf       	rjmp	.-52     	; 0x574 <buildMsgPath+0x62>
     5a8:	9a 82       	std	Y+2, r9	; 0x02
     5aa:	89 82       	std	Y+1, r8	; 0x01
     5ac:	71 30       	cpi	r23, 0x01	; 1
     5ae:	a1 f0       	breq	.+40     	; 0x5d8 <buildMsgPath+0xc6>
     5b0:	e9 81       	ldd	r30, Y+1	; 0x01
     5b2:	fa 81       	ldd	r31, Y+2	; 0x02
     5b4:	40 80       	ld	r4, Z
     5b6:	44 20       	and	r4, r4
     5b8:	09 f4       	brne	.+2      	; 0x5bc <buildMsgPath+0xaa>
     5ba:	70 c0       	rjmp	.+224    	; 0x69c <buildMsgPath+0x18a>
     5bc:	5f 01       	movw	r10, r30
     5be:	ff ef       	ldi	r31, 0xFF	; 255
     5c0:	af 1a       	sub	r10, r31
     5c2:	bf 0a       	sbc	r11, r31
     5c4:	51 2c       	mov	r5, r1
     5c6:	68 01       	movw	r12, r16
     5c8:	74 e0       	ldi	r23, 0x04	; 4
     5ca:	c7 0e       	add	r12, r23
     5cc:	d1 1c       	adc	r13, r1
     5ce:	3a 82       	std	Y+2, r3	; 0x02
     5d0:	29 82       	std	Y+1, r2	; 0x01
     5d2:	34 2c       	mov	r3, r4
     5d4:	45 2c       	mov	r4, r5
     5d6:	4f c0       	rjmp	.+158    	; 0x676 <buildMsgPath+0x164>
     5d8:	d1 01       	movw	r26, r2
     5da:	0c 5f       	subi	r16, 0xFC	; 252
     5dc:	1f 4f       	sbci	r17, 0xFF	; 255
     5de:	a7 01       	movw	r20, r14
     5e0:	f9 01       	movw	r30, r18
     5e2:	81 91       	ld	r24, Z+
     5e4:	9f 01       	movw	r18, r30
     5e6:	8d 93       	st	X+, r24
     5e8:	fa 01       	movw	r30, r20
     5ea:	81 91       	ld	r24, Z+
     5ec:	af 01       	movw	r20, r30
     5ee:	13 96       	adiw	r26, 0x03	; 3
     5f0:	8c 93       	st	X, r24
     5f2:	13 97       	sbiw	r26, 0x03	; 3
     5f4:	20 17       	cp	r18, r16
     5f6:	31 07       	cpc	r19, r17
     5f8:	99 f7       	brne	.-26     	; 0x5e0 <buildMsgPath+0xce>
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	d1 01       	movw	r26, r2
     5fe:	1c 96       	adiw	r26, 0x0c	; 12
     600:	8c 93       	st	X, r24
     602:	4c c0       	rjmp	.+152    	; 0x69c <buildMsgPath+0x18a>
     604:	ab 81       	ldd	r26, Y+3	; 0x03
     606:	bc 81       	ldd	r27, Y+4	; 0x04
     608:	2d 90       	ld	r2, X+
     60a:	bc 83       	std	Y+4, r27	; 0x04
     60c:	ab 83       	std	Y+3, r26	; 0x03
     60e:	d4 01       	movw	r26, r8
     610:	7d 91       	ld	r23, X+
     612:	4d 01       	movw	r8, r26
     614:	27 16       	cp	r2, r23
     616:	19 f0       	breq	.+6      	; 0x61e <buildMsgPath+0x10c>
     618:	b0 81       	ld	r27, Z
     61a:	2b 12       	cpse	r2, r27
     61c:	07 c0       	rjmp	.+14     	; 0x62c <buildMsgPath+0x11a>
     61e:	63 30       	cpi	r22, 0x03	; 3
     620:	08 f0       	brcs	.+2      	; 0x624 <buildMsgPath+0x112>
     622:	63 94       	inc	r6
     624:	6f 5f       	subi	r22, 0xFF	; 255
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	64 30       	cpi	r22, 0x04	; 4
     62a:	61 f7       	brne	.-40     	; 0x604 <buildMsgPath+0xf2>
     62c:	73 94       	inc	r7
     62e:	04 96       	adiw	r24, 0x04	; 4
     630:	75 14       	cp	r7, r5
     632:	59 f1       	breq	.+86     	; 0x68a <buildMsgPath+0x178>
     634:	a7 01       	movw	r20, r14
     636:	98 01       	movw	r18, r16
     638:	f8 01       	movw	r30, r16
     63a:	47 01       	movw	r8, r14
     63c:	9c 83       	std	Y+4, r25	; 0x04
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	e0 cf       	rjmp	.-64     	; 0x604 <buildMsgPath+0xf2>
     644:	d9 01       	movw	r26, r18
     646:	8d 91       	ld	r24, X+
     648:	9d 01       	movw	r18, r26
     64a:	81 93       	st	Z+, r24
     64c:	d4 01       	movw	r26, r8
     64e:	8d 91       	ld	r24, X+
     650:	4d 01       	movw	r8, r26
     652:	83 83       	std	Z+3, r24	; 0x03
     654:	da 01       	movw	r26, r20
     656:	8d 91       	ld	r24, X+
     658:	ad 01       	movw	r20, r26
     65a:	87 83       	std	Z+7, r24	; 0x07
     65c:	c2 16       	cp	r12, r18
     65e:	d3 06       	cpc	r13, r19
     660:	89 f7       	brne	.-30     	; 0x644 <buildMsgPath+0x132>
     662:	73 e0       	ldi	r23, 0x03	; 3
     664:	e9 81       	ldd	r30, Y+1	; 0x01
     666:	fa 81       	ldd	r31, Y+2	; 0x02
     668:	74 87       	std	Z+12, r23	; 0x0c
     66a:	43 94       	inc	r4
     66c:	84 e2       	ldi	r24, 0x24	; 36
     66e:	a8 0e       	add	r10, r24
     670:	b1 1c       	adc	r11, r1
     672:	43 14       	cp	r4, r3
     674:	89 f0       	breq	.+34     	; 0x698 <buildMsgPath+0x186>
     676:	d5 01       	movw	r26, r10
     678:	14 96       	adiw	r26, 0x04	; 4
     67a:	5c 90       	ld	r5, X
     67c:	55 20       	and	r5, r5
     67e:	a9 f3       	breq	.-22     	; 0x66a <buildMsgPath+0x158>
     680:	c5 01       	movw	r24, r10
     682:	06 96       	adiw	r24, 0x06	; 6
     684:	71 2c       	mov	r7, r1
     686:	61 2c       	mov	r6, r1
     688:	d5 cf       	rjmp	.-86     	; 0x634 <buildMsgPath+0x122>
     68a:	b2 e0       	ldi	r27, 0x02	; 2
     68c:	6b 12       	cpse	r6, r27
     68e:	ed cf       	rjmp	.-38     	; 0x66a <buildMsgPath+0x158>
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	45 01       	movw	r8, r10
     696:	d6 cf       	rjmp	.-84     	; 0x644 <buildMsgPath+0x132>
     698:	29 80       	ldd	r2, Y+1	; 0x01
     69a:	3a 80       	ldd	r3, Y+2	; 0x02
     69c:	c1 01       	movw	r24, r2
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	bf 90       	pop	r11
     6ba:	af 90       	pop	r10
     6bc:	9f 90       	pop	r9
     6be:	8f 90       	pop	r8
     6c0:	7f 90       	pop	r7
     6c2:	6f 90       	pop	r6
     6c4:	5f 90       	pop	r5
     6c6:	4f 90       	pop	r4
     6c8:	3f 90       	pop	r3
     6ca:	2f 90       	pop	r2
     6cc:	08 95       	ret

000006ce <sendMessageSimple>:
     6ce:	6f 92       	push	r6
     6d0:	7f 92       	push	r7
     6d2:	8f 92       	push	r8
     6d4:	9f 92       	push	r9
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	28 97       	sbiw	r28, 0x08	; 8
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	b8 2e       	mov	r11, r24
     6fa:	3a 01       	movw	r6, r20
     6fc:	49 01       	movw	r8, r18
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	6a 83       	std	Y+2, r22	; 0x02
     704:	bb 82       	std	Y+3, r11	; 0x03
     706:	f6 01       	movw	r30, r12
     708:	80 81       	ld	r24, Z
     70a:	8c 83       	std	Y+4, r24	; 0x04
     70c:	8a e0       	ldi	r24, 0x0A	; 10
     70e:	8d 83       	std	Y+5, r24	; 0x05
     710:	1e 82       	std	Y+6, r1	; 0x06
     712:	82 e1       	ldi	r24, 0x12	; 18
     714:	8f 83       	std	Y+7, r24	; 0x07
     716:	80 ef       	ldi	r24, 0xF0	; 240
     718:	88 87       	std	Y+8, r24	; 0x08
     71a:	ce 01       	movw	r24, r28
     71c:	05 96       	adiw	r24, 0x05	; 5
     71e:	0e 94 4c 02 	call	0x498	; 0x498 <writeDestDSN>
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	64 e0       	ldi	r22, 0x04	; 4
     728:	ce 01       	movw	r24, r28
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     730:	6b 2d       	mov	r22, r11
     732:	66 0f       	add	r22, r22
     734:	66 0f       	add	r22, r22
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	c3 01       	movw	r24, r6
     73c:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	66 e0       	ldi	r22, 0x06	; 6
     746:	c4 01       	movw	r24, r8
     748:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	66 e0       	ldi	r22, 0x06	; 6
     752:	c8 01       	movw	r24, r16
     754:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	f6 01       	movw	r30, r12
     75e:	60 81       	ld	r22, Z
     760:	c7 01       	movw	r24, r14
     762:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     766:	28 96       	adiw	r28, 0x08	; 8
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	9f 90       	pop	r9
     786:	8f 90       	pop	r8
     788:	7f 90       	pop	r7
     78a:	6f 90       	pop	r6
     78c:	08 95       	ret

0000078e <sendNetworkData>:
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	27 97       	sbiw	r28, 0x07	; 7
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	7c 01       	movw	r14, r24
     7ac:	16 2f       	mov	r17, r22
     7ae:	fa 01       	movw	r30, r20
     7b0:	c9 01       	movw	r24, r18
     7b2:	23 e0       	ldi	r18, 0x03	; 3
     7b4:	29 83       	std	Y+1, r18	; 0x01
     7b6:	20 81       	ld	r18, Z
     7b8:	2a 83       	std	Y+2, r18	; 0x02
     7ba:	21 81       	ldd	r18, Z+1	; 0x01
     7bc:	2b 83       	std	Y+3, r18	; 0x03
     7be:	22 81       	ldd	r18, Z+2	; 0x02
     7c0:	2c 83       	std	Y+4, r18	; 0x04
     7c2:	23 81       	ldd	r18, Z+3	; 0x03
     7c4:	2d 83       	std	Y+5, r18	; 0x05
     7c6:	6e 83       	std	Y+6, r22	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	0e 94 4c 02 	call	0x498	; 0x498 <writeDestDSN>
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	67 e0       	ldi	r22, 0x07	; 7
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	61 2f       	mov	r22, r17
     7e2:	c7 01       	movw	r24, r14
     7e4:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     7e8:	27 96       	adiw	r28, 0x07	; 7
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	08 95       	ret

00000802 <broadcastCon>:
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	2b 97       	sbiw	r28, 0x0b	; 11
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	7b 01       	movw	r14, r22
     81e:	5d 98       	cbi	0x0b, 5	; 11
     820:	9f ef       	ldi	r25, 0xFF	; 255
     822:	99 83       	std	Y+1, r25	; 0x01
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	9a 83       	std	Y+2, r25	; 0x02
     828:	9d e4       	ldi	r25, 0x4D	; 77
     82a:	9b 83       	std	Y+3, r25	; 0x03
     82c:	8c 83       	std	Y+4, r24	; 0x04
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	64 e0       	ldi	r22, 0x04	; 4
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     83c:	8b e4       	ldi	r24, 0x4B	; 75
     83e:	9d e1       	ldi	r25, 0x1D	; 29
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <broadcastCon+0x3e>
     844:	00 c0       	rjmp	.+0      	; 0x846 <broadcastCon+0x44>
     846:	00 00       	nop
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     860:	85 e0       	ldi	r24, 0x05	; 5
     862:	e6 e0       	ldi	r30, 0x06	; 6
     864:	f1 e0       	ldi	r31, 0x01	; 1
     866:	de 01       	movw	r26, r28
     868:	15 96       	adiw	r26, 0x05	; 5
     86a:	01 90       	ld	r0, Z+
     86c:	0d 92       	st	X+, r0
     86e:	8a 95       	dec	r24
     870:	e1 f7       	brne	.-8      	; 0x86a <broadcastCon+0x68>
     872:	85 e0       	ldi	r24, 0x05	; 5
     874:	8a 87       	std	Y+10, r24	; 0x0a
     876:	84 e2       	ldi	r24, 0x24	; 36
     878:	8b 87       	std	Y+11, r24	; 0x0b
     87a:	14 e0       	ldi	r17, 0x04	; 4
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	65 e0       	ldi	r22, 0x05	; 5
     882:	ce 01       	movw	r24, r28
     884:	05 96       	adiw	r24, 0x05	; 5
     886:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     890:	8f 81       	ldd	r24, Y+7	; 0x07
     892:	8f 5f       	subi	r24, 0xFF	; 255
     894:	8f 83       	std	Y+7, r24	; 0x07
     896:	83 ec       	ldi	r24, 0xC3	; 195
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <broadcastCon+0x98>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <broadcastCon+0x9e>
     8a0:	00 00       	nop
     8a2:	11 50       	subi	r17, 0x01	; 1
     8a4:	59 f7       	brne	.-42     	; 0x87c <broadcastCon+0x7a>
     8a6:	83 ed       	ldi	r24, 0xD3	; 211
     8a8:	90 e3       	ldi	r25, 0x30	; 48
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <broadcastCon+0xa8>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <broadcastCon+0xae>
     8b0:	00 00       	nop
     8b2:	5d 9a       	sbi	0x0b, 5	; 11
     8b4:	83 ec       	ldi	r24, 0xC3	; 195
     8b6:	99 e0       	ldi	r25, 0x09	; 9
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <broadcastCon+0xb6>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <broadcastCon+0xbc>
     8be:	00 00       	nop
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	ce 01       	movw	r24, r28
     8c8:	0a 96       	adiw	r24, 0x0a	; 10
     8ca:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	64 e2       	ldi	r22, 0x24	; 36
     8d4:	c7 01       	movw	r24, r14
     8d6:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     8da:	83 ec       	ldi	r24, 0xC3	; 195
     8dc:	99 e0       	ldi	r25, 0x09	; 9
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <broadcastCon+0xdc>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <broadcastCon+0xe2>
     8e4:	00 00       	nop
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <skipBuffer>
     8ec:	2b 96       	adiw	r28, 0x0b	; 11
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	08 95       	ret

00000904 <updateNetworks>:
     904:	2f 92       	push	r2
     906:	3f 92       	push	r3
     908:	4f 92       	push	r4
     90a:	5f 92       	push	r5
     90c:	6f 92       	push	r6
     90e:	7f 92       	push	r7
     910:	8f 92       	push	r8
     912:	9f 92       	push	r9
     914:	af 92       	push	r10
     916:	bf 92       	push	r11
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	2b 97       	sbiw	r28, 0x0b	; 11
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	2c 01       	movw	r4, r24
     93a:	5b 01       	movw	r10, r22
     93c:	7a 01       	movw	r14, r20
     93e:	3a 83       	std	Y+2, r19	; 0x02
     940:	29 83       	std	Y+1, r18	; 0x01
     942:	67 2b       	or	r22, r23
     944:	89 f0       	breq	.+34     	; 0x968 <updateNetworks+0x64>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	67 01       	movw	r12, r14
     94e:	c8 0e       	add	r12, r24
     950:	d9 1e       	adc	r13, r25
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     958:	d6 01       	movw	r26, r12
     95a:	8c 93       	st	X, r24
     95c:	1f 5f       	subi	r17, 0xFF	; 255
     95e:	81 2f       	mov	r24, r17
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	8a 15       	cp	r24, r10
     964:	9b 05       	cpc	r25, r11
     966:	90 f3       	brcs	.-28     	; 0x94c <updateNetworks+0x48>
     968:	01 30       	cpi	r16, 0x01	; 1
     96a:	09 f0       	breq	.+2      	; 0x96e <updateNetworks+0x6a>
     96c:	3b c1       	rjmp	.+630    	; 0xbe4 <updateNetworks+0x2e0>
     96e:	d2 01       	movw	r26, r4
     970:	ec 90       	ld	r14, X
     972:	ee 20       	and	r14, r14
     974:	09 f4       	brne	.+2      	; 0x978 <updateNetworks+0x74>
     976:	72 c2       	rjmp	.+1252   	; 0xe5c <updateNetworks+0x558>
     978:	81 2c       	mov	r8, r1
     97a:	91 2c       	mov	r9, r1
     97c:	31 2c       	mov	r3, r1
     97e:	1e 82       	std	Y+6, r1	; 0x06
     980:	b1 e0       	ldi	r27, 0x01	; 1
     982:	bf 83       	std	Y+7, r27	; 0x07
     984:	22 24       	eor	r2, r2
     986:	23 94       	inc	r2
     988:	8d 82       	std	Y+5, r8	; 0x05
     98a:	69 80       	ldd	r6, Y+1	; 0x01
     98c:	7a 80       	ldd	r7, Y+2	; 0x02
     98e:	f3 01       	movw	r30, r6
     990:	84 80       	ldd	r8, Z+4	; 0x04
     992:	10 e0       	ldi	r17, 0x00	; 0
     994:	bd 80       	ldd	r11, Y+5	; 0x05
     996:	ab 2c       	mov	r10, r11
     998:	b1 2c       	mov	r11, r1
     99a:	bc 82       	std	Y+4, r11	; 0x04
     99c:	ab 82       	std	Y+3, r10	; 0x03
     99e:	72 01       	movw	r14, r4
     9a0:	24 e2       	ldi	r18, 0x24	; 36
     9a2:	3d 81       	ldd	r19, Y+5	; 0x05
     9a4:	23 9f       	mul	r18, r19
     9a6:	e0 0c       	add	r14, r0
     9a8:	f1 1c       	adc	r15, r1
     9aa:	11 24       	eor	r1, r1
     9ac:	d7 01       	movw	r26, r14
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	a7 01       	movw	r20, r14
     9b2:	4e 5f       	subi	r20, 0xFE	; 254
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	67 01       	movw	r12, r14
     9b8:	63 e0       	ldi	r22, 0x03	; 3
     9ba:	c6 0e       	add	r12, r22
     9bc:	d1 1c       	adc	r13, r1
     9be:	57 01       	movw	r10, r14
     9c0:	74 e0       	ldi	r23, 0x04	; 4
     9c2:	a7 0e       	add	r10, r23
     9c4:	b1 1c       	adc	r11, r1
     9c6:	85 e0       	ldi	r24, 0x05	; 5
     9c8:	e8 0e       	add	r14, r24
     9ca:	f1 1c       	adc	r15, r1
     9cc:	2b 81       	ldd	r18, Y+3	; 0x03
     9ce:	3c 81       	ldd	r19, Y+4	; 0x04
     9d0:	22 0f       	add	r18, r18
     9d2:	33 1f       	adc	r19, r19
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	22 0f       	add	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	eb 81       	ldd	r30, Y+3	; 0x03
     9de:	fc 81       	ldd	r31, Y+4	; 0x04
     9e0:	2e 0f       	add	r18, r30
     9e2:	3f 1f       	adc	r19, r31
     9e4:	79 86       	std	Y+9, r7	; 0x09
     9e6:	68 86       	std	Y+8, r6	; 0x08
     9e8:	7f 80       	ldd	r7, Y+7	; 0x07
     9ea:	6b 81       	ldd	r22, Y+3	; 0x03
     9ec:	7c 81       	ldd	r23, Y+4	; 0x04
     9ee:	7a 83       	std	Y+2, r23	; 0x02
     9f0:	69 83       	std	Y+1, r22	; 0x01
     9f2:	0c 91       	ld	r16, X
     9f4:	81 2f       	mov	r24, r17
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	e8 85       	ldd	r30, Y+8	; 0x08
     9fa:	f9 85       	ldd	r31, Y+9	; 0x09
     9fc:	74 e0       	ldi	r23, 0x04	; 4
     9fe:	17 9f       	mul	r17, r23
     a00:	e0 0d       	add	r30, r0
     a02:	f1 1d       	adc	r31, r1
     a04:	11 24       	eor	r1, r1
     a06:	66 81       	ldd	r22, Z+6	; 0x06
     a08:	60 13       	cpse	r22, r16
     a0a:	cb c2       	rjmp	.+1430   	; 0xfa2 <updateNetworks+0x69e>
     a0c:	fc 01       	movw	r30, r24
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	68 85       	ldd	r22, Y+8	; 0x08
     a18:	79 85       	ldd	r23, Y+9	; 0x09
     a1a:	e6 0f       	add	r30, r22
     a1c:	f7 1f       	adc	r31, r23
     a1e:	77 81       	ldd	r23, Z+7	; 0x07
     a20:	fa 01       	movw	r30, r20
     a22:	60 81       	ld	r22, Z
     a24:	76 13       	cpse	r23, r22
     a26:	bd c2       	rjmp	.+1402   	; 0xfa2 <updateNetworks+0x69e>
     a28:	fc 01       	movw	r30, r24
     a2a:	32 96       	adiw	r30, 0x02	; 2
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	68 85       	ldd	r22, Y+8	; 0x08
     a36:	79 85       	ldd	r23, Y+9	; 0x09
     a38:	e6 0f       	add	r30, r22
     a3a:	f7 1f       	adc	r31, r23
     a3c:	70 81       	ld	r23, Z
     a3e:	f6 01       	movw	r30, r12
     a40:	60 81       	ld	r22, Z
     a42:	76 13       	cpse	r23, r22
     a44:	ae c2       	rjmp	.+1372   	; 0xfa2 <updateNetworks+0x69e>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	e8 85       	ldd	r30, Y+8	; 0x08
     a50:	f9 85       	ldd	r31, Y+9	; 0x09
     a52:	e8 0f       	add	r30, r24
     a54:	f9 1f       	adc	r31, r25
     a56:	91 85       	ldd	r25, Z+9	; 0x09
     a58:	f5 01       	movw	r30, r10
     a5a:	80 81       	ld	r24, Z
     a5c:	98 13       	cpse	r25, r24
     a5e:	a1 c2       	rjmp	.+1346   	; 0xfa2 <updateNetworks+0x69e>
     a60:	37 2c       	mov	r3, r7
     a62:	9f c2       	rjmp	.+1342   	; 0xfa2 <updateNetworks+0x69e>
     a64:	86 2f       	mov	r24, r22
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	f9 01       	movw	r30, r18
     a6a:	e8 0f       	add	r30, r24
     a6c:	f9 1f       	adc	r31, r25
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	e4 0d       	add	r30, r4
     a78:	f5 1d       	adc	r31, r5
     a7a:	a8 85       	ldd	r26, Y+8	; 0x08
     a7c:	b9 85       	ldd	r27, Y+9	; 0x09
     a7e:	6c 90       	ld	r6, X
     a80:	e7 81       	ldd	r30, Z+7	; 0x07
     a82:	6e 12       	cpse	r6, r30
     a84:	2f c0       	rjmp	.+94     	; 0xae4 <updateNetworks+0x1e0>
     a86:	f9 01       	movw	r30, r18
     a88:	e8 0f       	add	r30, r24
     a8a:	f9 1f       	adc	r31, r25
     a8c:	32 96       	adiw	r30, 0x02	; 2
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e4 0d       	add	r30, r4
     a98:	f5 1d       	adc	r31, r5
     a9a:	f0 81       	ld	r31, Z
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	ec 91       	ld	r30, X
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	fe 13       	cpse	r31, r30
     aa4:	1f c0       	rjmp	.+62     	; 0xae4 <updateNetworks+0x1e0>
     aa6:	f9 01       	movw	r30, r18
     aa8:	e8 0f       	add	r30, r24
     aaa:	f9 1f       	adc	r31, r25
     aac:	32 96       	adiw	r30, 0x02	; 2
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	e4 0d       	add	r30, r4
     ab8:	f5 1d       	adc	r31, r5
     aba:	f1 81       	ldd	r31, Z+1	; 0x01
     abc:	12 96       	adiw	r26, 0x02	; 2
     abe:	ec 91       	ld	r30, X
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	fe 13       	cpse	r31, r30
     ac4:	0f c0       	rjmp	.+30     	; 0xae4 <updateNetworks+0x1e0>
     ac6:	f9 01       	movw	r30, r18
     ac8:	e8 0f       	add	r30, r24
     aca:	f9 1f       	adc	r31, r25
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	e4 0d       	add	r30, r4
     ad6:	f5 1d       	adc	r31, r5
     ad8:	13 96       	adiw	r26, 0x03	; 3
     ada:	9c 91       	ld	r25, X
     adc:	82 85       	ldd	r24, Z+10	; 0x0a
     ade:	98 13       	cpse	r25, r24
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <updateNetworks+0x1e0>
     ae2:	92 2c       	mov	r9, r2
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	76 17       	cp	r23, r22
     ae8:	08 f0       	brcs	.+2      	; 0xaec <updateNetworks+0x1e8>
     aea:	bc cf       	rjmp	.-136    	; 0xa64 <updateNetworks+0x160>
     aec:	e8 85       	ldd	r30, Y+8	; 0x08
     aee:	f9 85       	ldd	r31, Y+9	; 0x09
     af0:	aa 85       	ldd	r26, Y+10	; 0x0a
     af2:	bb 85       	ldd	r27, Y+11	; 0x0b
     af4:	33 20       	and	r3, r3
     af6:	99 f1       	breq	.+102    	; 0xb5e <updateNetworks+0x25a>
     af8:	91 10       	cpse	r9, r1
     afa:	63 c0       	rjmp	.+198    	; 0xbc2 <updateNetworks+0x2be>
     afc:	3f 01       	movw	r6, r30
     afe:	14 e2       	ldi	r17, 0x24	; 36
     b00:	a9 80       	ldd	r10, Y+1	; 0x01
     b02:	ba 80       	ldd	r11, Y+2	; 0x02
     b04:	1a 9d       	mul	r17, r10
     b06:	f0 01       	movw	r30, r0
     b08:	1b 9d       	mul	r17, r11
     b0a:	f0 0d       	add	r31, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	e4 0d       	add	r30, r4
     b10:	f5 1d       	adc	r31, r5
     b12:	7f 5f       	subi	r23, 0xFF	; 255
     b14:	75 83       	std	Z+5, r23	; 0x05
     b16:	d3 01       	movw	r26, r6
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	44 e2       	ldi	r20, 0x24	; 36
     b1e:	4a 9d       	mul	r20, r10
     b20:	90 01       	movw	r18, r0
     b22:	4b 9d       	mul	r20, r11
     b24:	30 0d       	add	r19, r0
     b26:	11 24       	eor	r1, r1
     b28:	af 01       	movw	r20, r30
     b2a:	4b 5f       	subi	r20, 0xFB	; 251
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	6d 91       	ld	r22, X+
     b30:	fa 01       	movw	r30, r20
     b32:	70 81       	ld	r23, Z
     b34:	f9 01       	movw	r30, r18
     b36:	14 e0       	ldi	r17, 0x04	; 4
     b38:	71 9f       	mul	r23, r17
     b3a:	e0 0d       	add	r30, r0
     b3c:	f1 1d       	adc	r31, r1
     b3e:	11 24       	eor	r1, r1
     b40:	e4 0d       	add	r30, r4
     b42:	f5 1d       	adc	r31, r5
     b44:	e8 0f       	add	r30, r24
     b46:	f9 1f       	adc	r31, r25
     b48:	67 83       	std	Z+7, r22	; 0x07
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	91 05       	cpc	r25, r1
     b50:	71 f7       	brne	.-36     	; 0xb2e <updateNetworks+0x22a>
     b52:	68 84       	ldd	r6, Y+8	; 0x08
     b54:	79 84       	ldd	r7, Y+9	; 0x09
     b56:	31 2c       	mov	r3, r1
     b58:	21 e0       	ldi	r18, 0x01	; 1
     b5a:	2e 83       	std	Y+6, r18	; 0x06
     b5c:	38 c0       	rjmp	.+112    	; 0xbce <updateNetworks+0x2ca>
     b5e:	99 20       	and	r9, r9
     b60:	81 f1       	breq	.+96     	; 0xbc2 <updateNetworks+0x2be>
     b62:	68 84       	ldd	r6, Y+8	; 0x08
     b64:	79 84       	ldd	r7, Y+9	; 0x09
     b66:	68 2d       	mov	r22, r8
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	d3 01       	movw	r26, r6
     b6c:	34 e0       	ldi	r19, 0x04	; 4
     b6e:	83 9e       	mul	r8, r19
     b70:	a0 0d       	add	r26, r0
     b72:	b1 1d       	adc	r27, r1
     b74:	11 24       	eor	r1, r1
     b76:	16 96       	adiw	r26, 0x06	; 6
     b78:	0c 93       	st	X, r16
     b7a:	16 97       	sbiw	r26, 0x06	; 6
     b7c:	e4 e2       	ldi	r30, 0x24	; 36
     b7e:	49 81       	ldd	r20, Y+1	; 0x01
     b80:	5a 81       	ldd	r21, Y+2	; 0x02
     b82:	e4 9f       	mul	r30, r20
     b84:	c0 01       	movw	r24, r0
     b86:	e5 9f       	mul	r30, r21
     b88:	90 0d       	add	r25, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	84 0d       	add	r24, r4
     b8e:	95 1d       	adc	r25, r5
     b90:	fc 01       	movw	r30, r24
     b92:	22 81       	ldd	r18, Z+2	; 0x02
     b94:	17 96       	adiw	r26, 0x07	; 7
     b96:	2c 93       	st	X, r18
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	23 81       	ldd	r18, Z+3	; 0x03
     b9c:	fb 01       	movw	r30, r22
     b9e:	32 96       	adiw	r30, 0x02	; 2
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	e6 0d       	add	r30, r6
     baa:	f7 1d       	adc	r31, r7
     bac:	20 83       	st	Z, r18
     bae:	fc 01       	movw	r30, r24
     bb0:	84 81       	ldd	r24, Z+4	; 0x04
     bb2:	19 96       	adiw	r26, 0x09	; 9
     bb4:	8c 93       	st	X, r24
     bb6:	83 94       	inc	r8
     bb8:	d3 01       	movw	r26, r6
     bba:	14 96       	adiw	r26, 0x04	; 4
     bbc:	8c 92       	st	X, r8
     bbe:	91 2c       	mov	r9, r1
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <updateNetworks+0x2ca>
     bc2:	1f 5f       	subi	r17, 0xFF	; 255
     bc4:	81 16       	cp	r8, r17
     bc6:	08 f0       	brcs	.+2      	; 0xbca <updateNetworks+0x2c6>
     bc8:	10 cf       	rjmp	.-480    	; 0x9ea <updateNetworks+0xe6>
     bca:	68 84       	ldd	r6, Y+8	; 0x08
     bcc:	79 84       	ldd	r7, Y+9	; 0x09
     bce:	bd 81       	ldd	r27, Y+5	; 0x05
     bd0:	bf 5f       	subi	r27, 0xFF	; 255
     bd2:	bd 83       	std	Y+5, r27	; 0x05
     bd4:	f2 01       	movw	r30, r4
     bd6:	80 81       	ld	r24, Z
     bd8:	b8 17       	cp	r27, r24
     bda:	08 f4       	brcc	.+2      	; 0xbde <updateNetworks+0x2da>
     bdc:	d8 ce       	rjmp	.-592    	; 0x98e <updateNetworks+0x8a>
     bde:	7a 82       	std	Y+2, r7	; 0x02
     be0:	69 82       	std	Y+1, r6	; 0x01
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <updateNetworks+0x2e2>
     be4:	1e 82       	std	Y+6, r1	; 0x06
     be6:	d2 01       	movw	r26, r4
     be8:	ec 90       	ld	r14, X
     bea:	ee 20       	and	r14, r14
     bec:	09 f4       	brne	.+2      	; 0xbf0 <updateNetworks+0x2ec>
     bee:	3d c1       	rjmp	.+634    	; 0xe6a <updateNetworks+0x566>
     bf0:	e9 81       	ldd	r30, Y+1	; 0x01
     bf2:	fa 81       	ldd	r31, Y+2	; 0x02
     bf4:	10 81       	ld	r17, Z
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	d1 2c       	mov	r13, r1
     bfe:	04 e2       	ldi	r16, 0x24	; 36
     c00:	ff 24       	eor	r15, r15
     c02:	f3 94       	inc	r15
     c04:	81 2f       	mov	r24, r17
     c06:	1d 2d       	mov	r17, r13
     c08:	4f 01       	movw	r8, r30
     c0a:	d8 2e       	mov	r13, r24
     c0c:	15 c1       	rjmp	.+554    	; 0xe38 <updateNetworks+0x534>
     c0e:	1f 2d       	mov	r17, r15
     c10:	82 2f       	mov	r24, r18
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	fa 01       	movw	r30, r20
     c16:	e8 0f       	add	r30, r24
     c18:	f9 1f       	adc	r31, r25
     c1a:	2f 5f       	subi	r18, 0xFF	; 255
     c1c:	88 0d       	add	r24, r8
     c1e:	99 1d       	adc	r25, r9
     c20:	c1 80       	ldd	r12, Z+1	; 0x01
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	c8 12       	cpse	r12, r24
     c28:	07 c0       	rjmp	.+14     	; 0xc38 <updateNetworks+0x334>
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	82 0f       	add	r24, r18
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	08 f0       	brcs	.+2      	; 0xc34 <updateNetworks+0x330>
     c32:	bd c1       	rjmp	.+890    	; 0xfae <updateNetworks+0x6aa>
     c34:	24 30       	cpi	r18, 0x04	; 4
     c36:	60 f3       	brcs	.-40     	; 0xc10 <updateNetworks+0x30c>
     c38:	11 30       	cpi	r17, 0x01	; 1
     c3a:	09 f0       	breq	.+2      	; 0xc3e <updateNetworks+0x33a>
     c3c:	f7 c0       	rjmp	.+494    	; 0xe2c <updateNetworks+0x528>
     c3e:	9a 82       	std	Y+2, r9	; 0x02
     c40:	89 82       	std	Y+1, r8	; 0x01
     c42:	a9 81       	ldd	r26, Y+1	; 0x01
     c44:	ba 81       	ldd	r27, Y+2	; 0x02
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	ec 90       	ld	r14, X
     c4a:	14 97       	sbiw	r26, 0x04	; 4
     c4c:	15 96       	adiw	r26, 0x05	; 5
     c4e:	8c 91       	ld	r24, X
     c50:	03 2f       	mov	r16, r19
     c52:	10 e0       	ldi	r17, 0x00	; 0
     c54:	f2 01       	movw	r30, r4
     c56:	b4 e2       	ldi	r27, 0x24	; 36
     c58:	3b 9f       	mul	r19, r27
     c5a:	e0 0d       	add	r30, r0
     c5c:	f1 1d       	adc	r31, r1
     c5e:	11 24       	eor	r1, r1
     c60:	96 81       	ldd	r25, Z+6	; 0x06
     c62:	89 13       	cpse	r24, r25
     c64:	5b c0       	rjmp	.+182    	; 0xd1c <updateNetworks+0x418>
     c66:	94 e2       	ldi	r25, 0x24	; 36
     c68:	90 9f       	mul	r25, r16
     c6a:	f0 01       	movw	r30, r0
     c6c:	91 9f       	mul	r25, r17
     c6e:	f0 0d       	add	r31, r0
     c70:	11 24       	eor	r1, r1
     c72:	e4 0d       	add	r30, r4
     c74:	f5 1d       	adc	r31, r5
     c76:	95 81       	ldd	r25, Z+5	; 0x05
     c78:	e9 12       	cpse	r14, r25
     c7a:	50 c0       	rjmp	.+160    	; 0xd1c <updateNetworks+0x418>
     c7c:	ee 20       	and	r14, r14
     c7e:	09 f4       	brne	.+2      	; 0xc82 <updateNetworks+0x37e>
     c80:	9c c1       	rjmp	.+824    	; 0xfba <updateNetworks+0x6b6>
     c82:	e4 e2       	ldi	r30, 0x24	; 36
     c84:	3e 9f       	mul	r19, r30
     c86:	a0 01       	movw	r20, r0
     c88:	11 24       	eor	r1, r1
     c8a:	b2 01       	movw	r22, r4
     c8c:	64 0f       	add	r22, r20
     c8e:	75 1f       	adc	r23, r21
     c90:	a9 80       	ldd	r10, Y+1	; 0x01
     c92:	ba 80       	ldd	r11, Y+2	; 0x02
     c94:	48 5f       	subi	r20, 0xF8	; 248
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	44 0d       	add	r20, r4
     c9a:	55 1d       	adc	r21, r5
     c9c:	d1 2c       	mov	r13, r1
     c9e:	11 c0       	rjmp	.+34     	; 0xcc2 <updateNetworks+0x3be>
     ca0:	f1 90       	ld	r15, Z+
     ca2:	2d 91       	ld	r18, X+
     ca4:	f2 12       	cpse	r15, r18
     ca6:	37 c0       	rjmp	.+110    	; 0xd16 <updateNetworks+0x412>
     ca8:	91 50       	subi	r25, 0x01	; 1
     caa:	d1 f7       	brne	.-12     	; 0xca0 <updateNetworks+0x39c>
     cac:	d3 94       	inc	r13
     cae:	6c 5f       	subi	r22, 0xFC	; 252
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	b4 e0       	ldi	r27, 0x04	; 4
     cb4:	ab 0e       	add	r10, r27
     cb6:	b1 1c       	adc	r11, r1
     cb8:	4c 5f       	subi	r20, 0xFC	; 252
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	ed 14       	cp	r14, r13
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <updateNetworks+0x3be>
     cc0:	7c c1       	rjmp	.+760    	; 0xfba <updateNetworks+0x6b6>
     cc2:	fb 01       	movw	r30, r22
     cc4:	27 81       	ldd	r18, Z+7	; 0x07
     cc6:	d5 01       	movw	r26, r10
     cc8:	16 96       	adiw	r26, 0x06	; 6
     cca:	9c 91       	ld	r25, X
     ccc:	16 97       	sbiw	r26, 0x06	; 6
     cce:	29 13       	cpse	r18, r25
     cd0:	23 c0       	rjmp	.+70     	; 0xd18 <updateNetworks+0x414>
     cd2:	17 96       	adiw	r26, 0x07	; 7
     cd4:	fa 01       	movw	r30, r20
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	e3 cf       	rjmp	.-58     	; 0xca0 <updateNetworks+0x39c>
     cda:	f1 90       	ld	r15, Z+
     cdc:	2d 91       	ld	r18, X+
     cde:	f2 12       	cpse	r15, r18
     ce0:	1c c0       	rjmp	.+56     	; 0xd1a <updateNetworks+0x416>
     ce2:	9f 5f       	subi	r25, 0xFF	; 255
     ce4:	96 30       	cpi	r25, 0x06	; 6
     ce6:	c9 f7       	brne	.-14     	; 0xcda <updateNetworks+0x3d6>
     ce8:	d3 94       	inc	r13
     cea:	6a 5f       	subi	r22, 0xFA	; 250
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	b6 e0       	ldi	r27, 0x06	; 6
     cf0:	ab 0e       	add	r10, r27
     cf2:	b1 1c       	adc	r11, r1
     cf4:	4a 5f       	subi	r20, 0xFA	; 250
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	8d 15       	cp	r24, r13
     cfa:	09 f4       	brne	.+2      	; 0xcfe <updateNetworks+0x3fa>
     cfc:	44 c1       	rjmp	.+648    	; 0xf86 <updateNetworks+0x682>
     cfe:	f5 01       	movw	r30, r10
     d00:	22 89       	ldd	r18, Z+18	; 0x12
     d02:	db 01       	movw	r26, r22
     d04:	53 96       	adiw	r26, 0x13	; 19
     d06:	9c 91       	ld	r25, X
     d08:	29 13       	cpse	r18, r25
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <updateNetworks+0x418>
     d0c:	d5 01       	movw	r26, r10
     d0e:	53 96       	adiw	r26, 0x13	; 19
     d10:	fa 01       	movw	r30, r20
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	e2 cf       	rjmp	.-60     	; 0xcda <updateNetworks+0x3d6>
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <updateNetworks+0x418>
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <updateNetworks+0x418>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <updateNetworks+0x418>
     d1c:	84 e2       	ldi	r24, 0x24	; 36
     d1e:	80 9f       	mul	r24, r16
     d20:	f0 01       	movw	r30, r0
     d22:	81 9f       	mul	r24, r17
     d24:	f0 0d       	add	r31, r0
     d26:	11 24       	eor	r1, r1
     d28:	e4 0d       	add	r30, r4
     d2a:	f5 1d       	adc	r31, r5
     d2c:	e5 82       	std	Z+5, r14	; 0x05
     d2e:	a9 81       	ldd	r26, Y+1	; 0x01
     d30:	ba 81       	ldd	r27, Y+2	; 0x02
     d32:	15 96       	adiw	r26, 0x05	; 5
     d34:	8c 91       	ld	r24, X
     d36:	15 97       	sbiw	r26, 0x05	; 5
     d38:	86 83       	std	Z+6, r24	; 0x06
     d3a:	14 96       	adiw	r26, 0x04	; 4
     d3c:	8c 91       	ld	r24, X
     d3e:	88 23       	and	r24, r24
     d40:	09 f4       	brne	.+2      	; 0xd44 <updateNetworks+0x440>
     d42:	45 c0       	rjmp	.+138    	; 0xdce <updateNetworks+0x4ca>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	c8 01       	movw	r24, r16
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	08 0f       	add	r16, r24
     d56:	19 1f       	adc	r17, r25
     d58:	82 2f       	mov	r24, r18
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	e9 80       	ldd	r14, Y+1	; 0x01
     d5e:	fa 80       	ldd	r15, Y+2	; 0x02
     d60:	b4 e0       	ldi	r27, 0x04	; 4
     d62:	2b 9f       	mul	r18, r27
     d64:	e0 0c       	add	r14, r0
     d66:	f1 1c       	adc	r15, r1
     d68:	11 24       	eor	r1, r1
     d6a:	d7 01       	movw	r26, r14
     d6c:	16 96       	adiw	r26, 0x06	; 6
     d6e:	ec 91       	ld	r30, X
     d70:	a8 01       	movw	r20, r16
     d72:	48 0f       	add	r20, r24
     d74:	59 1f       	adc	r21, r25
     d76:	ba 01       	movw	r22, r20
     d78:	66 0f       	add	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	64 0d       	add	r22, r4
     d82:	75 1d       	adc	r23, r5
     d84:	db 01       	movw	r26, r22
     d86:	17 96       	adiw	r26, 0x07	; 7
     d88:	ec 93       	st	X, r30
     d8a:	f7 01       	movw	r30, r14
     d8c:	a7 81       	ldd	r26, Z+7	; 0x07
     d8e:	fa 01       	movw	r30, r20
     d90:	32 96       	adiw	r30, 0x02	; 2
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	e4 0d       	add	r30, r4
     d9c:	f5 1d       	adc	r31, r5
     d9e:	a0 83       	st	Z, r26
     da0:	dc 01       	movw	r26, r24
     da2:	12 96       	adiw	r26, 0x02	; 2
     da4:	aa 0f       	add	r26, r26
     da6:	bb 1f       	adc	r27, r27
     da8:	aa 0f       	add	r26, r26
     daa:	bb 1f       	adc	r27, r27
     dac:	a9 80       	ldd	r10, Y+1	; 0x01
     dae:	ba 80       	ldd	r11, Y+2	; 0x02
     db0:	aa 0d       	add	r26, r10
     db2:	bb 1d       	adc	r27, r11
     db4:	8c 91       	ld	r24, X
     db6:	81 83       	std	Z+1, r24	; 0x01
     db8:	d7 01       	movw	r26, r14
     dba:	19 96       	adiw	r26, 0x09	; 9
     dbc:	8c 91       	ld	r24, X
     dbe:	fb 01       	movw	r30, r22
     dc0:	82 87       	std	Z+10, r24	; 0x0a
     dc2:	2f 5f       	subi	r18, 0xFF	; 255
     dc4:	d5 01       	movw	r26, r10
     dc6:	14 96       	adiw	r26, 0x04	; 4
     dc8:	8c 91       	ld	r24, X
     dca:	28 17       	cp	r18, r24
     dcc:	28 f2       	brcs	.-118    	; 0xd58 <updateNetworks+0x454>
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	85 81       	ldd	r24, Z+5	; 0x05
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <updateNetworks+0x4d6>
     dd8:	d8 c0       	rjmp	.+432    	; 0xf8a <updateNetworks+0x686>
     dda:	f4 e2       	ldi	r31, 0x24	; 36
     ddc:	3f 9f       	mul	r19, r31
     dde:	90 01       	movw	r18, r0
     de0:	11 24       	eor	r1, r1
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	2d 5e       	subi	r18, 0xED	; 237
     de6:	3f 4f       	sbci	r19, 0xFF	; 255
     de8:	0c c0       	rjmp	.+24     	; 0xe02 <updateNetworks+0x4fe>
     dea:	9d 91       	ld	r25, X+
     dec:	91 93       	st	Z+, r25
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	e1 f7       	brne	.-8      	; 0xdea <updateNetworks+0x4e6>
     df2:	4f 5f       	subi	r20, 0xFF	; 255
     df4:	a9 81       	ldd	r26, Y+1	; 0x01
     df6:	ba 81       	ldd	r27, Y+2	; 0x02
     df8:	15 96       	adiw	r26, 0x05	; 5
     dfa:	8c 91       	ld	r24, X
     dfc:	48 17       	cp	r20, r24
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <updateNetworks+0x4fe>
     e00:	c6 c0       	rjmp	.+396    	; 0xf8e <updateNetworks+0x68a>
     e02:	84 2f       	mov	r24, r20
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	fc 01       	movw	r30, r24
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	e8 0f       	add	r30, r24
     e0e:	f9 1f       	adc	r31, r25
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	df 01       	movw	r26, r30
     e16:	52 96       	adiw	r26, 0x12	; 18
     e18:	a9 80       	ldd	r10, Y+1	; 0x01
     e1a:	ba 80       	ldd	r11, Y+2	; 0x02
     e1c:	aa 0d       	add	r26, r10
     e1e:	bb 1d       	adc	r27, r11
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	e4 0d       	add	r30, r4
     e26:	f5 1d       	adc	r31, r5
     e28:	86 e0       	ldi	r24, 0x06	; 6
     e2a:	df cf       	rjmp	.-66     	; 0xdea <updateNetworks+0x4e6>
     e2c:	3f 5f       	subi	r19, 0xFF	; 255
     e2e:	6f 5f       	subi	r22, 0xFF	; 255
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	94 96       	adiw	r26, 0x24	; 36
     e34:	3e 15       	cp	r19, r14
     e36:	71 f0       	breq	.+28     	; 0xe54 <updateNetworks+0x550>
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	8c 91       	ld	r24, X
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	8d 11       	cpse	r24, r13
     e40:	fb ce       	rjmp	.-522    	; 0xc38 <updateNetworks+0x334>
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	06 9f       	mul	r16, r22
     e46:	a0 01       	movw	r20, r0
     e48:	07 9f       	mul	r16, r23
     e4a:	50 0d       	add	r21, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	44 0d       	add	r20, r4
     e50:	55 1d       	adc	r21, r5
     e52:	eb ce       	rjmp	.-554    	; 0xc2a <updateNetworks+0x326>
     e54:	9a 82       	std	Y+2, r9	; 0x02
     e56:	89 82       	std	Y+1, r8	; 0x01
     e58:	11 11       	cpse	r17, r1
     e5a:	9b c0       	rjmp	.+310    	; 0xf92 <updateNetworks+0x68e>
     e5c:	0f 2e       	mov	r0, r31
     e5e:	f5 e0       	ldi	r31, 0x05	; 5
     e60:	bf 2e       	mov	r11, r31
     e62:	f0 2d       	mov	r31, r0
     e64:	eb 14       	cp	r14, r11
     e66:	09 f4       	brne	.+2      	; 0xe6a <updateNetworks+0x566>
     e68:	96 c0       	rjmp	.+300    	; 0xf96 <updateNetworks+0x692>
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	4e 0d       	add	r20, r14
     e6e:	d2 01       	movw	r26, r4
     e70:	4c 93       	st	X, r20
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	24 81       	ldd	r18, Z+4	; 0x04
     e78:	84 2f       	mov	r24, r20
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	f2 01       	movw	r30, r4
     e7e:	14 e2       	ldi	r17, 0x24	; 36
     e80:	41 9f       	mul	r20, r17
     e82:	e0 0d       	add	r30, r0
     e84:	f1 1d       	adc	r31, r1
     e86:	11 24       	eor	r1, r1
     e88:	25 83       	std	Z+5, r18	; 0x05
     e8a:	a9 81       	ldd	r26, Y+1	; 0x01
     e8c:	ba 81       	ldd	r27, Y+2	; 0x02
     e8e:	15 96       	adiw	r26, 0x05	; 5
     e90:	2c 91       	ld	r18, X
     e92:	15 97       	sbiw	r26, 0x05	; 5
     e94:	25 83       	std	Z+5, r18	; 0x05
     e96:	14 96       	adiw	r26, 0x04	; 4
     e98:	2c 91       	ld	r18, X
     e9a:	22 23       	and	r18, r18
     e9c:	09 f4       	brne	.+2      	; 0xea0 <updateNetworks+0x59c>
     e9e:	45 c0       	rjmp	.+138    	; 0xf2a <updateNetworks+0x626>
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	9c 01       	movw	r18, r24
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	28 0f       	add	r18, r24
     eb2:	39 1f       	adc	r19, r25
     eb4:	85 2f       	mov	r24, r21
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	e9 80       	ldd	r14, Y+1	; 0x01
     eba:	fa 80       	ldd	r15, Y+2	; 0x02
     ebc:	b4 e0       	ldi	r27, 0x04	; 4
     ebe:	5b 9f       	mul	r21, r27
     ec0:	e0 0c       	add	r14, r0
     ec2:	f1 1c       	adc	r15, r1
     ec4:	11 24       	eor	r1, r1
     ec6:	d7 01       	movw	r26, r14
     ec8:	16 96       	adiw	r26, 0x06	; 6
     eca:	ec 91       	ld	r30, X
     ecc:	b9 01       	movw	r22, r18
     ece:	68 0f       	add	r22, r24
     ed0:	79 1f       	adc	r23, r25
     ed2:	8b 01       	movw	r16, r22
     ed4:	00 0f       	add	r16, r16
     ed6:	11 1f       	adc	r17, r17
     ed8:	00 0f       	add	r16, r16
     eda:	11 1f       	adc	r17, r17
     edc:	04 0d       	add	r16, r4
     ede:	15 1d       	adc	r17, r5
     ee0:	d8 01       	movw	r26, r16
     ee2:	17 96       	adiw	r26, 0x07	; 7
     ee4:	ec 93       	st	X, r30
     ee6:	f7 01       	movw	r30, r14
     ee8:	a7 81       	ldd	r26, Z+7	; 0x07
     eea:	fb 01       	movw	r30, r22
     eec:	32 96       	adiw	r30, 0x02	; 2
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	e4 0d       	add	r30, r4
     ef8:	f5 1d       	adc	r31, r5
     efa:	a0 83       	st	Z, r26
     efc:	dc 01       	movw	r26, r24
     efe:	12 96       	adiw	r26, 0x02	; 2
     f00:	aa 0f       	add	r26, r26
     f02:	bb 1f       	adc	r27, r27
     f04:	aa 0f       	add	r26, r26
     f06:	bb 1f       	adc	r27, r27
     f08:	a9 80       	ldd	r10, Y+1	; 0x01
     f0a:	ba 80       	ldd	r11, Y+2	; 0x02
     f0c:	aa 0d       	add	r26, r10
     f0e:	bb 1d       	adc	r27, r11
     f10:	8c 91       	ld	r24, X
     f12:	81 83       	std	Z+1, r24	; 0x01
     f14:	d7 01       	movw	r26, r14
     f16:	19 96       	adiw	r26, 0x09	; 9
     f18:	8c 91       	ld	r24, X
     f1a:	f8 01       	movw	r30, r16
     f1c:	82 87       	std	Z+10, r24	; 0x0a
     f1e:	5f 5f       	subi	r21, 0xFF	; 255
     f20:	d5 01       	movw	r26, r10
     f22:	14 96       	adiw	r26, 0x04	; 4
     f24:	8c 91       	ld	r24, X
     f26:	58 17       	cp	r21, r24
     f28:	28 f2       	brcs	.-118    	; 0xeb4 <updateNetworks+0x5b0>
     f2a:	e9 81       	ldd	r30, Y+1	; 0x01
     f2c:	fa 81       	ldd	r31, Y+2	; 0x02
     f2e:	85 81       	ldd	r24, Z+5	; 0x05
     f30:	88 23       	and	r24, r24
     f32:	99 f1       	breq	.+102    	; 0xf9a <updateNetworks+0x696>
     f34:	f4 e2       	ldi	r31, 0x24	; 36
     f36:	4f 9f       	mul	r20, r31
     f38:	a0 01       	movw	r20, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	4d 5e       	subi	r20, 0xED	; 237
     f40:	5f 4f       	sbci	r21, 0xFF	; 255
     f42:	0b c0       	rjmp	.+22     	; 0xf5a <updateNetworks+0x656>
     f44:	9d 91       	ld	r25, X+
     f46:	91 93       	st	Z+, r25
     f48:	81 50       	subi	r24, 0x01	; 1
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <updateNetworks+0x640>
     f4c:	6f 5f       	subi	r22, 0xFF	; 255
     f4e:	a9 81       	ldd	r26, Y+1	; 0x01
     f50:	ba 81       	ldd	r27, Y+2	; 0x02
     f52:	15 96       	adiw	r26, 0x05	; 5
     f54:	8c 91       	ld	r24, X
     f56:	68 17       	cp	r22, r24
     f58:	10 f5       	brcc	.+68     	; 0xf9e <updateNetworks+0x69a>
     f5a:	86 2f       	mov	r24, r22
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9c 01       	movw	r18, r24
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	dc 01       	movw	r26, r24
     f6e:	52 96       	adiw	r26, 0x12	; 18
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	ae 0f       	add	r26, r30
     f76:	bf 1f       	adc	r27, r31
     f78:	84 0f       	add	r24, r20
     f7a:	95 1f       	adc	r25, r21
     f7c:	f2 01       	movw	r30, r4
     f7e:	e8 0f       	add	r30, r24
     f80:	f9 1f       	adc	r31, r25
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	df cf       	rjmp	.-66     	; 0xf44 <updateNetworks+0x640>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	29 c0       	rjmp	.+82     	; 0xfdc <updateNetworks+0x6d8>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	27 c0       	rjmp	.+78     	; 0xfdc <updateNetworks+0x6d8>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	25 c0       	rjmp	.+74     	; 0xfdc <updateNetworks+0x6d8>
     f92:	8e 81       	ldd	r24, Y+6	; 0x06
     f94:	23 c0       	rjmp	.+70     	; 0xfdc <updateNetworks+0x6d8>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	21 c0       	rjmp	.+66     	; 0xfdc <updateNetworks+0x6d8>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	1f c0       	rjmp	.+62     	; 0xfdc <updateNetworks+0x6d8>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	1d c0       	rjmp	.+58     	; 0xfdc <updateNetworks+0x6d8>
     fa2:	f7 01       	movw	r30, r14
     fa4:	70 81       	ld	r23, Z
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	bb 87       	std	Y+11, r27	; 0x0b
     faa:	aa 87       	std	Y+10, r26	; 0x0a
     fac:	5b cd       	rjmp	.-1354   	; 0xa64 <updateNetworks+0x160>
     fae:	24 30       	cpi	r18, 0x04	; 4
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <updateNetworks+0x6b0>
     fb2:	2d ce       	rjmp	.-934    	; 0xc0e <updateNetworks+0x30a>
     fb4:	9a 82       	std	Y+2, r9	; 0x02
     fb6:	89 82       	std	Y+1, r8	; 0x01
     fb8:	44 ce       	rjmp	.-888    	; 0xc42 <updateNetworks+0x33e>
     fba:	88 23       	and	r24, r24
     fbc:	79 f0       	breq	.+30     	; 0xfdc <updateNetworks+0x6d8>
     fbe:	b4 e2       	ldi	r27, 0x24	; 36
     fc0:	3b 9f       	mul	r19, r27
     fc2:	a0 01       	movw	r20, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	b2 01       	movw	r22, r4
     fc8:	64 0f       	add	r22, r20
     fca:	75 1f       	adc	r23, r21
     fcc:	a9 80       	ldd	r10, Y+1	; 0x01
     fce:	ba 80       	ldd	r11, Y+2	; 0x02
     fd0:	4c 5e       	subi	r20, 0xEC	; 236
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	44 0d       	add	r20, r4
     fd6:	55 1d       	adc	r21, r5
     fd8:	d1 2c       	mov	r13, r1
     fda:	91 ce       	rjmp	.-734    	; 0xcfe <updateNetworks+0x3fa>
     fdc:	2b 96       	adiw	r28, 0x0b	; 11
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	9f 90       	pop	r9
     ffe:	8f 90       	pop	r8
    1000:	7f 90       	pop	r7
    1002:	6f 90       	pop	r6
    1004:	5f 90       	pop	r5
    1006:	4f 90       	pop	r4
    1008:	3f 90       	pop	r3
    100a:	2f 90       	pop	r2
    100c:	08 95       	ret

0000100e <handleMessages>:


uint8_t handleMessages(uint8_t UARTPort, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
    100e:	2f 92       	push	r2
    1010:	3f 92       	push	r3
    1012:	4f 92       	push	r4
    1014:	5f 92       	push	r5
    1016:	6f 92       	push	r6
    1018:	7f 92       	push	r7
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	c7 5a       	subi	r28, 0xA7	; 167
    1038:	d1 09       	sbc	r29, r1
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	7b 01       	movw	r14, r22
    1046:	2a 01       	movw	r4, r20
    1048:	39 01       	movw	r6, r18
    104a:	68 01       	movw	r12, r16
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
    104c:	ad b6       	in	r10, 0x3d	; 61
    104e:	be b6       	in	r11, 0x3e	; 62
uint8_t handleMessages(uint8_t UARTPort, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
	
	uint8_t msgType;
	uint8_t en = 1;
	
	if (UARTPort == 0){
    1050:	81 11       	cpse	r24, r1
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <handleMessages+0x52>
		msgType = getChar(0);		// Message type is stored as the first byte
    1054:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t sourceDSN[4];
	// Message that HUMPRO received over air
	
	
	if (msgType == 0x01){
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f0       	breq	.+2      	; 0x105e <handleMessages+0x50>
    105c:	40 c1       	rjmp	.+640    	; 0x12de <handleMessages+0x2d0>
    105e:	6f c4       	rjmp	.+2270   	; 0x193e <handleMessages+0x930>
		msgType = getChar(0);		// Message type is stored as the first byte
		
		
	}
	else{
		getChar(1);
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		getChar(1);
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		msgType = getChar(1);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t sourceDSN[4];
	// Message that HUMPRO received over air
	
	
	if (msgType == 0x01){
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	09 f0       	breq	.+2      	; 0x1078 <handleMessages+0x6a>
    1076:	33 c1       	rjmp	.+614    	; 0x12de <handleMessages+0x2d0>
    1078:	b1 c4       	rjmp	.+2402   	; 0x19dc <handleMessages+0x9ce>
			uint8_t tempSize[2];
			
 			uint16_t msgSize = *tempSize;
			uint8_t msg[msgSize];
			uint8_t msgPath[msgPathSize*4];
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
    107a:	00 e0       	ldi	r16, 0x00	; 0
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	41 2c       	mov	r4, r1
				msgPath[i] = getChar(0);
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1086:	f4 01       	movw	r30, r8
    1088:	e0 0f       	add	r30, r16
    108a:	f1 1f       	adc	r31, r17
    108c:	80 83       	st	Z, r24
			uint8_t tempSize[2];
			
 			uint16_t msgSize = *tempSize;
			uint8_t msg[msgSize];
			uint8_t msgPath[msgPathSize*4];
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
    108e:	43 94       	inc	r4
    1090:	04 2d       	mov	r16, r4
    1092:	10 e0       	ldi	r17, 0x00	; 0
    1094:	0e 15       	cp	r16, r14
    1096:	1f 05       	cpc	r17, r15
    1098:	9c f3       	brlt	.-26     	; 0x1080 <handleMessages+0x72>
    109a:	e3 c4       	rjmp	.+2502   	; 0x1a62 <handleMessages+0xa54>
				msgPath[i] = getChar(0);
			}
			
			uint8_t destPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				destPhoneAdd[i] = getChar(0);
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10a2:	d8 01       	movw	r26, r16
    10a4:	8d 93       	st	X+, r24
    10a6:	8d 01       	movw	r16, r26
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
				msgPath[i] = getChar(0);
			}
			
			uint8_t destPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
    10a8:	ea 16       	cp	r14, r26
    10aa:	fb 06       	cpc	r15, r27
    10ac:	b9 f7       	brne	.-18     	; 0x109c <handleMessages+0x8e>
    10ae:	8e 01       	movw	r16, r28
    10b0:	0b 57       	subi	r16, 0x7B	; 123
    10b2:	1f 4f       	sbci	r17, 0xFF	; 255
    10b4:	78 01       	movw	r14, r16
    10b6:	b6 e0       	ldi	r27, 0x06	; 6
    10b8:	eb 0e       	add	r14, r27
    10ba:	f1 1c       	adc	r15, r1
				destPhoneAdd[i] = getChar(0);
			}
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				srcPhoneAdd[i] = getChar(0);
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10c2:	f8 01       	movw	r30, r16
    10c4:	81 93       	st	Z+, r24
    10c6:	8f 01       	movw	r16, r30
			for (uint8_t i = 0; i < 6; i ++){
				destPhoneAdd[i] = getChar(0);
			}
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
    10c8:	ee 15       	cp	r30, r14
    10ca:	ff 05       	cpc	r31, r15
    10cc:	b9 f7       	brne	.-18     	; 0x10bc <handleMessages+0xae>
				srcPhoneAdd[i] = getChar(0);
			}
			for (uint8_t i = 0; i < msgSize; i++){
    10ce:	c1 14       	cp	r12, r1
    10d0:	d1 04       	cpc	r13, r1
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <handleMessages+0xe2>
    10d4:	10 e0       	ldi	r17, 0x00	; 0
				msg[i] = getChar(0);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    10dc:	f3 01       	movw	r30, r6
    10de:	e1 0f       	add	r30, r17
    10e0:	f1 1d       	adc	r31, r1
    10e2:	80 83       	st	Z, r24
			
			uint8_t srcPhoneAdd[6];
			for (uint8_t i = 0; i < 6; i ++){
				srcPhoneAdd[i] = getChar(0);
			}
			for (uint8_t i = 0; i < msgSize; i++){
    10e4:	1f 5f       	subi	r17, 0xFF	; 255
    10e6:	81 2f       	mov	r24, r17
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	8c 15       	cp	r24, r12
    10ec:	9d 05       	cpc	r25, r13
    10ee:	98 f3       	brcs	.-26     	; 0x10d6 <handleMessages+0xc8>
				msg[i] = getChar(0);
			}
			
			// Seeing if the this device is the last in the path, if so send message data to esp to be transmitted to the phone
			if (deviceNumInPath == msgPathSize){
    10f0:	ce 55       	subi	r28, 0x5E	; 94
    10f2:	df 4f       	sbci	r29, 0xFF	; 255
    10f4:	68 80       	ld	r6, Y
    10f6:	c2 5a       	subi	r28, 0xA2	; 162
    10f8:	d0 40       	sbci	r29, 0x00	; 0
    10fa:	65 10       	cpse	r6, r5
    10fc:	1f c0       	rjmp	.+62     	; 0x113c <handleMessages+0x12e>
				uint8_t espMsg[] = {0x02,0x00,msgType,destPhoneAdd,srcPhoneAdd,msgSize,msg};
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	8d 83       	std	Y+5, r24	; 0x05
    1102:	1e 82       	std	Y+6, r1	; 0x06
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	8f 83       	std	Y+7, r24	; 0x07
    1108:	ce 01       	movw	r24, r28
    110a:	8f 56       	subi	r24, 0x6F	; 111
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	88 87       	std	Y+8, r24	; 0x08
    1110:	0c 97       	sbiw	r24, 0x0c	; 12
    1112:	89 87       	std	Y+9, r24	; 0x09
    1114:	cb 55       	subi	r28, 0x5B	; 91
    1116:	df 4f       	sbci	r29, 0xFF	; 255
    1118:	78 80       	ld	r7, Y
    111a:	c5 5a       	subi	r28, 0xA5	; 165
    111c:	d0 40       	sbci	r29, 0x00	; 0
    111e:	7a 86       	std	Y+10, r7	; 0x0a
    1120:	c0 56       	subi	r28, 0x60	; 96
    1122:	df 4f       	sbci	r29, 0xFF	; 255
    1124:	08 81       	ld	r16, Y
    1126:	c0 5a       	subi	r28, 0xA0	; 160
    1128:	d0 40       	sbci	r29, 0x00	; 0
    112a:	0b 87       	std	Y+11, r16	; 0x0b
				TXWrite(espMsg,sizeof(espMsg),1);
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	67 e0       	ldi	r22, 0x07	; 7
    1132:	80 58       	subi	r24, 0x80	; 128
    1134:	91 09       	sbc	r25, r1
    1136:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    113a:	1a c0       	rjmp	.+52     	; 0x1170 <handleMessages+0x162>
				
				// Send [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte),
				//       msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
				
		
				sendMessageSimple(msgPathSize,deviceNumInPath,msgPath,destPhoneAdd,srcPhoneAdd,msg,msgSize);
    113c:	c0 56       	subi	r28, 0x60	; 96
    113e:	df 4f       	sbci	r29, 0xFF	; 255
    1140:	e8 80       	ld	r14, Y
    1142:	f9 80       	ldd	r15, Y+1	; 0x01
    1144:	c0 5a       	subi	r28, 0xA0	; 160
    1146:	d0 40       	sbci	r29, 0x00	; 0
    1148:	8e 01       	movw	r16, r28
    114a:	0b 57       	subi	r16, 0x7B	; 123
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	9e 01       	movw	r18, r28
    1150:	2f 56       	subi	r18, 0x6F	; 111
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
    1154:	cd 55       	subi	r28, 0x5D	; 93
    1156:	df 4f       	sbci	r29, 0xFF	; 255
    1158:	48 81       	ld	r20, Y
    115a:	59 81       	ldd	r21, Y+1	; 0x01
    115c:	c3 5a       	subi	r28, 0xA3	; 163
    115e:	d0 40       	sbci	r29, 0x00	; 0
    1160:	ce 55       	subi	r28, 0x5E	; 94
    1162:	df 4f       	sbci	r29, 0xFF	; 255
    1164:	68 81       	ld	r22, Y
    1166:	c2 5a       	subi	r28, 0xA2	; 162
    1168:	d0 40       	sbci	r29, 0x00	; 0
    116a:	85 2d       	mov	r24, r5
    116c:	0e 94 67 03 	call	0x6ce	; 0x6ce <sendMessageSimple>
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	3e be       	out	0x3e, r3	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	2d be       	out	0x3d, r2	; 61
    117a:	d6 c3       	rjmp	.+1964   	; 0x1928 <handleMessages+0x91a>
			uint8_t msgPath[3][4];
			uint8_t msgPathSize = 0;
			uint8_t* msgDataReturn;
			uint8_t msg[128];
			for (uint8_t i = 0; i < 12; i++){
				if (i < 6){
    117c:	25 e0       	ldi	r18, 0x05	; 5
    117e:	25 15       	cp	r18, r5
    1180:	30 f0       	brcs	.+12     	; 0x118e <handleMessages+0x180>
					destAdd[i] = getChar(1);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1188:	d4 01       	movw	r26, r8
    118a:	8c 93       	st	X, r24
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <handleMessages+0x18a>
					
				}
				else{
					srcAdd[i-6] = getChar(1);
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1194:	f8 01       	movw	r30, r16
    1196:	80 83       	st	Z, r24
			uint8_t* destDSN;
			uint8_t msgPath[3][4];
			uint8_t msgPathSize = 0;
			uint8_t* msgDataReturn;
			uint8_t msg[128];
			for (uint8_t i = 0; i < 12; i++){
    1198:	53 94       	inc	r5
    119a:	ff ef       	ldi	r31, 0xFF	; 255
    119c:	8f 1a       	sub	r8, r31
    119e:	9f 0a       	sbc	r9, r31
    11a0:	0f 5f       	subi	r16, 0xFF	; 255
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	0f 2e       	mov	r0, r31
    11a6:	fc e0       	ldi	r31, 0x0C	; 12
    11a8:	2f 2e       	mov	r2, r31
    11aa:	f0 2d       	mov	r31, r0
    11ac:	52 10       	cpse	r5, r2
    11ae:	e6 cf       	rjmp	.-52     	; 0x117c <handleMessages+0x16e>
				else{
					srcAdd[i-6] = getChar(1);
				}
			}
			
			for (uint8_t i = 0; i < (*msgLen); i++){
    11b0:	c3 56       	subi	r28, 0x63	; 99
    11b2:	df 4f       	sbci	r29, 0xFF	; 255
    11b4:	88 81       	ld	r24, Y
    11b6:	99 81       	ldd	r25, Y+1	; 0x01
    11b8:	cd 59       	subi	r28, 0x9D	; 157
    11ba:	d0 40       	sbci	r29, 0x00	; 0
    11bc:	89 2b       	or	r24, r25
    11be:	b9 f0       	breq	.+46     	; 0x11ee <handleMessages+0x1e0>
    11c0:	10 e0       	ldi	r17, 0x00	; 0
				
				msg[i] = getChar(1);
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    11c8:	e5 e0       	ldi	r30, 0x05	; 5
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ec 0f       	add	r30, r28
    11ce:	fd 1f       	adc	r31, r29
    11d0:	e1 0f       	add	r30, r17
    11d2:	f1 1d       	adc	r31, r1
    11d4:	80 83       	st	Z, r24
				else{
					srcAdd[i-6] = getChar(1);
				}
			}
			
			for (uint8_t i = 0; i < (*msgLen); i++){
    11d6:	1f 5f       	subi	r17, 0xFF	; 255
    11d8:	21 2f       	mov	r18, r17
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	c3 56       	subi	r28, 0x63	; 99
    11de:	df 4f       	sbci	r29, 0xFF	; 255
    11e0:	88 81       	ld	r24, Y
    11e2:	99 81       	ldd	r25, Y+1	; 0x01
    11e4:	cd 59       	subi	r28, 0x9D	; 157
    11e6:	d0 40       	sbci	r29, 0x00	; 0
    11e8:	28 17       	cp	r18, r24
    11ea:	39 07       	cpc	r19, r25
    11ec:	50 f3       	brcs	.-44     	; 0x11c2 <handleMessages+0x1b4>
				
				msg[i] = getChar(1);
			}
			TXWrite("AAAAAAAAAAAAAAAAAAA",20,1);
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	64 e1       	ldi	r22, 0x14	; 20
    11f4:	8b e0       	ldi	r24, 0x0B	; 11
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			TXWrite(msgLen,2,1);
    11fc:	8e 01       	movw	r16, r28
    11fe:	03 56       	subi	r16, 0x63	; 99
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	62 e0       	ldi	r22, 0x02	; 2
    1208:	c8 01       	movw	r24, r16
    120a:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			TXWrite(destAdd,6,1);
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	66 e0       	ldi	r22, 0x06	; 6
    1214:	ce 01       	movw	r24, r28
    1216:	89 56       	subi	r24, 0x69	; 105
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			TXWrite(srcAdd,6,1);
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	66 e0       	ldi	r22, 0x06	; 6
    1224:	ce 01       	movw	r24, r28
    1226:	8f 56       	subi	r24, 0x6F	; 111
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			TXWrite(msg,msgLen,1);
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	60 2f       	mov	r22, r16
    1234:	ce 01       	movw	r24, r28
    1236:	05 96       	adiw	r24, 0x05	; 5
    1238:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			
			destDSN = getDestPhoneAdd(destAdd,myCons->myDSN,networkPtr2);
    123c:	a3 01       	movw	r20, r6
    123e:	b6 01       	movw	r22, r12
    1240:	ce 01       	movw	r24, r28
    1242:	89 56       	subi	r24, 0x69	; 105
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	0e 94 db 01 	call	0x3b6	; 0x3b6 <getDestPhoneAdd>
			msgDataReturn= buildMsgPath(destDSN,networkPtr,myCons);
    124a:	a6 01       	movw	r20, r12
    124c:	b7 01       	movw	r22, r14
    124e:	0e 94 89 02 	call	0x512	; 0x512 <buildMsgPath>
    1252:	fc 01       	movw	r30, r24
    1254:	ae 01       	movw	r20, r28
    1256:	4b 57       	subi	r20, 0x7B	; 123
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	bc 01       	movw	r22, r24
    125c:	64 5f       	subi	r22, 0xF4	; 244
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <handleMessages+0x26a>
			
			msgPathSize = 2;
			for (uint8_t i= 0; i < 3; i++){
				for (uint8_t j= 0; j <4; j++){
					
					msgPath[i][j] = *(msgDataReturn + i*4 + j);
    1262:	81 91       	ld	r24, Z+
    1264:	8d 93       	st	X+, r24
			msgDataReturn= buildMsgPath(destDSN,networkPtr,myCons);
			
			
			msgPathSize = 2;
			for (uint8_t i= 0; i < 3; i++){
				for (uint8_t j= 0; j <4; j++){
    1266:	e2 17       	cp	r30, r18
    1268:	f3 07       	cpc	r31, r19
    126a:	d9 f7       	brne	.-10     	; 0x1262 <handleMessages+0x254>
    126c:	4c 5f       	subi	r20, 0xFC	; 252
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	f9 01       	movw	r30, r18
			destDSN = getDestPhoneAdd(destAdd,myCons->myDSN,networkPtr2);
			msgDataReturn= buildMsgPath(destDSN,networkPtr,myCons);
			
			
			msgPathSize = 2;
			for (uint8_t i= 0; i < 3; i++){
    1272:	62 17       	cp	r22, r18
    1274:	73 07       	cpc	r23, r19
    1276:	29 f0       	breq	.+10     	; 0x1282 <handleMessages+0x274>
    1278:	9f 01       	movw	r18, r30
    127a:	2c 5f       	subi	r18, 0xFC	; 252
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
				else{
					srcAdd[i-6] = getChar(1);
				}
			}
			
			for (uint8_t i = 0; i < (*msgLen); i++){
    127e:	da 01       	movw	r26, r20
    1280:	f0 cf       	rjmp	.-32     	; 0x1262 <handleMessages+0x254>
			TXWrite(srcAdd,6,1);
			TXWrite(msg,*msgLen-0xC,1);
			TXWrite("AAAAAAAAAAAAAAAAAAA",20,1);
			*/
			
			sendMessageSimple(msgPathSize,0,msgPath,destAdd,srcAdd,msg,*msgLen-0xC);
    1282:	c3 56       	subi	r28, 0x63	; 99
    1284:	df 4f       	sbci	r29, 0xFF	; 255
    1286:	c8 80       	ld	r12, Y
    1288:	d9 80       	ldd	r13, Y+1	; 0x01
    128a:	cd 59       	subi	r28, 0x9D	; 157
    128c:	d0 40       	sbci	r29, 0x00	; 0
    128e:	0c e0       	ldi	r16, 0x0C	; 12
    1290:	c0 1a       	sub	r12, r16
    1292:	d1 08       	sbc	r13, r1
    1294:	9e 01       	movw	r18, r28
    1296:	2b 5f       	subi	r18, 0xFB	; 251
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	79 01       	movw	r14, r18
    129c:	8e 01       	movw	r16, r28
    129e:	0f 56       	subi	r16, 0x6F	; 111
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	2e 56       	subi	r18, 0x6E	; 110
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	ae 01       	movw	r20, r28
    12a8:	4b 57       	subi	r20, 0x7B	; 123
    12aa:	5f 4f       	sbci	r21, 0xFF	; 255
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	0e 94 67 03 	call	0x6ce	; 0x6ce <sendMessageSimple>
	uint8_t myPhoneConnections[MAX_PHONE_CON][6];
};

void PFD(uint8_t value, uint8_t port, uint8_t enabled){
	uint8_t val[1];
	val[0] = value;
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	c1 56       	subi	r28, 0x61	; 97
    12b8:	df 4f       	sbci	r29, 0xFF	; 255
    12ba:	88 83       	st	Y, r24
    12bc:	cf 59       	subi	r28, 0x9F	; 159
    12be:	d0 40       	sbci	r29, 0x00	; 0
	if(enabled == 1){
		TXWrite(val,1,port);
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	ce 01       	movw	r24, r28
    12c8:	81 56       	subi	r24, 0x61	; 97
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    12d0:	83 ec       	ldi	r24, 0xC3	; 195
    12d2:	99 e0       	ldi	r25, 0x09	; 9
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <handleMessages+0x2c6>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <handleMessages+0x2cc>
    12da:	00 00       	nop
    12dc:	25 c3       	rjmp	.+1610   	; 0x1928 <handleMessages+0x91a>
			sendMessageSimple(msgPathSize,0,msgPath,destAdd,srcAdd,msg,*msgLen-0xC);
			PFD(0x3,1,en);
		}
		
	}
	if (msgType == 0x03){												// Network adjustment
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <handleMessages+0x2d6>
    12e2:	40 c0       	rjmp	.+128    	; 0x1364 <handleMessages+0x356>
		
		sourceDSN[0] = (uint8_t) getChar(0);
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    12ea:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = (uint8_t) getChar(0);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    12f2:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = (uint8_t) getChar(0);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    12fa:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = (uint8_t) getChar(0);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1302:	8c 83       	std	Y+4, r24	; 0x04
		
		uint16_t networkSize = getChar(0);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    130a:	88 2e       	mov	r8, r24
		uint8_t newCon = getChar(0);
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		
		// Received message format: {msgType,myDSN[0],myDSN[1],myDSN[2],myDSN[3],networkSize,newCon,networkPtr};
		
		uint8_t sendToNeighbors;
		
		sendToNeighbors = updateNetworks(networkPtr,sizeOfNetwork,networkPtr2,myCons,newCon);
    1312:	08 2f       	mov	r16, r24
    1314:	96 01       	movw	r18, r12
    1316:	a3 01       	movw	r20, r6
    1318:	b2 01       	movw	r22, r4
    131a:	c7 01       	movw	r24, r14
    131c:	0e 94 82 04 	call	0x904	; 0x904 <updateNetworks>
		

		// If network has been updated send to connected devices
		if (sendToNeighbors == 1){
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	09 f0       	breq	.+2      	; 0x1326 <handleMessages+0x318>
    1324:	02 c3       	rjmp	.+1540   	; 0x192a <handleMessages+0x91c>
			
			
			for (uint8_t deviceNum = 0; deviceNum < myCons->myNumOfNubCon; deviceNum ++){
    1326:	d6 01       	movw	r26, r12
    1328:	14 96       	adiw	r26, 0x04	; 4
    132a:	8c 91       	ld	r24, X
    132c:	88 23       	and	r24, r24
    132e:	09 f4       	brne	.+2      	; 0x1332 <handleMessages+0x324>
    1330:	fe c2       	rjmp	.+1532   	; 0x192e <handleMessages+0x920>
    1332:	10 e0       	ldi	r17, 0x00	; 0
				sendNetworkData(networkPtr,networkSize,myCons,myCons->myNubConnections[deviceNum],0);
    1334:	91 2c       	mov	r9, r1
    1336:	21 2f       	mov	r18, r17
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	22 0f       	add	r18, r18
    1340:	33 1f       	adc	r19, r19
    1342:	2a 5f       	subi	r18, 0xFA	; 250
    1344:	3f 4f       	sbci	r19, 0xFF	; 255
    1346:	2c 0d       	add	r18, r12
    1348:	3d 1d       	adc	r19, r13
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	a6 01       	movw	r20, r12
    134e:	b4 01       	movw	r22, r8
    1350:	c7 01       	movw	r24, r14
    1352:	0e 94 c7 03 	call	0x78e	; 0x78e <sendNetworkData>

		// If network has been updated send to connected devices
		if (sendToNeighbors == 1){
			
			
			for (uint8_t deviceNum = 0; deviceNum < myCons->myNumOfNubCon; deviceNum ++){
    1356:	1f 5f       	subi	r17, 0xFF	; 255
    1358:	f6 01       	movw	r30, r12
    135a:	84 81       	ldd	r24, Z+4	; 0x04
    135c:	18 17       	cp	r17, r24
    135e:	58 f3       	brcs	.-42     	; 0x1336 <handleMessages+0x328>
				sendNetworkData(networkPtr,networkSize,myCons,myCons->myNubConnections[deviceNum],0);
			}
		}
		
		return 3;
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	9e c3       	rjmp	.+1852   	; 0x1aa0 <handleMessages+0xa92>
		
	}
	
	// Acknowledgment received
	if(msgType == 0x04){
    1364:	84 30       	cpi	r24, 0x04	; 4
    1366:	09 f4       	brne	.+2      	; 0x136a <handleMessages+0x35c>
    1368:	e4 c2       	rjmp	.+1480   	; 0x1932 <handleMessages+0x924>
		
		return 0x04;													// Will change later when checking connections
	}
	
	// Trying to connect
	if(msgType == 0x05){
    136a:	85 30       	cpi	r24, 0x05	; 5
    136c:	09 f0       	breq	.+2      	; 0x1370 <handleMessages+0x362>
    136e:	d3 c2       	rjmp	.+1446   	; 0x1916 <handleMessages+0x908>
		
		// Just sent myData, add to structure and send structure
		uint8_t sizeOfMessage;
		uint8_t deviceFound = 0;
		sizeOfMessage = getChar(0);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1376:	cb 55       	subi	r28, 0x5B	; 91
    1378:	df 4f       	sbci	r29, 0xFF	; 255
    137a:	88 83       	st	Y, r24
    137c:	c5 5a       	subi	r28, 0xA5	; 165
    137e:	d0 40       	sbci	r29, 0x00	; 0
		sourceDSN[0] = getChar(0);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1386:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = getChar(0);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    138e:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = getChar(0);
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1396:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = getChar(0);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    139e:	8c 83       	std	Y+4, r24	; 0x04
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) && (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
    13a0:	d7 01       	movw	r26, r14
    13a2:	8c 91       	ld	r24, X
    13a4:	85 30       	cpi	r24, 0x05	; 5
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <handleMessages+0x39c>
    13a8:	c6 c2       	rjmp	.+1420   	; 0x1936 <handleMessages+0x928>
    13aa:	f6 01       	movw	r30, r12
    13ac:	94 81       	ldd	r25, Z+4	; 0x04
    13ae:	93 30       	cpi	r25, 0x03	; 3
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <handleMessages+0x3a6>
    13b2:	c3 c2       	rjmp	.+1414   	; 0x193a <handleMessages+0x92c>
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    13b4:	81 11       	cpse	r24, r1
    13b6:	39 c0       	rjmp	.+114    	; 0x142a <handleMessages+0x41c>
    13b8:	91 c0       	rjmp	.+290    	; 0x14dc <handleMessages+0x4ce>
					}
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
    13ba:	ce 55       	subi	r28, 0x5E	; 94
    13bc:	df 4f       	sbci	r29, 0xFF	; 255
    13be:	08 81       	ld	r16, Y
    13c0:	c2 5a       	subi	r28, 0xA2	; 162
    13c2:	d0 40       	sbci	r29, 0x00	; 0
    13c4:	01 30       	cpi	r16, 0x01	; 1
    13c6:	59 f5       	brne	.+86     	; 0x141e <handleMessages+0x410>
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    13c8:	cd 55       	subi	r28, 0x5D	; 93
    13ca:	df 4f       	sbci	r29, 0xFF	; 255
    13cc:	08 81       	ld	r16, Y
    13ce:	19 81       	ldd	r17, Y+1	; 0x01
    13d0:	c3 5a       	subi	r28, 0xA3	; 163
    13d2:	d0 40       	sbci	r29, 0x00	; 0
    13d4:	01 2b       	or	r16, r17
    13d6:	19 f1       	breq	.+70     	; 0x141e <handleMessages+0x410>
						*(networkPtr2 + 1 + DEVICESIZE*deviceNum +  j*sizeof(uint8_t) + 4) = getChar(0);
    13d8:	88 0c       	add	r8, r8
    13da:	99 1c       	adc	r9, r9
    13dc:	c4 01       	movw	r24, r8
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	88 0e       	add	r8, r24
    13ec:	99 1e       	adc	r9, r25
    13ee:	84 01       	movw	r16, r8
    13f0:	09 5e       	subi	r16, 0xE9	; 233
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	06 0d       	add	r16, r6
    13f6:	17 1d       	adc	r17, r7
    13f8:	ca 55       	subi	r28, 0x5A	; 90
    13fa:	df 4f       	sbci	r29, 0xFF	; 255
    13fc:	28 81       	ld	r18, Y
    13fe:	39 81       	ldd	r19, Y+1	; 0x01
    1400:	c6 5a       	subi	r28, 0xA6	; 166
    1402:	d0 40       	sbci	r29, 0x00	; 0
    1404:	82 0e       	add	r8, r18
    1406:	93 1e       	adc	r9, r19
    1408:	86 0c       	add	r8, r6
    140a:	97 1c       	adc	r9, r7
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1412:	d8 01       	movw	r26, r16
    1414:	8d 93       	st	X+, r24
    1416:	8d 01       	movw	r16, r26
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    1418:	8a 16       	cp	r8, r26
    141a:	9b 06       	cpc	r9, r27
    141c:	b9 f7       	brne	.-18     	; 0x140c <handleMessages+0x3fe>
		sourceDSN[2] = getChar(0);
		sourceDSN[3] = getChar(0);
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) && (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    141e:	33 94       	inc	r3
    1420:	f7 01       	movw	r30, r14
    1422:	80 81       	ld	r24, Z
    1424:	38 16       	cp	r3, r24
    1426:	00 f1       	brcs	.+64     	; 0x1468 <handleMessages+0x45a>
    1428:	52 c0       	rjmp	.+164    	; 0x14ce <handleMessages+0x4c0>
    142a:	31 2c       	mov	r3, r1
    142c:	ce 55       	subi	r28, 0x5E	; 94
    142e:	df 4f       	sbci	r29, 0xFF	; 255
    1430:	18 82       	st	Y, r1
    1432:	c2 5a       	subi	r28, 0xA2	; 162
    1434:	d0 40       	sbci	r29, 0x00	; 0
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1436:	0f 2e       	mov	r0, r31
    1438:	f4 e2       	ldi	r31, 0x24	; 36
    143a:	2f 2e       	mov	r2, r31
    143c:	f0 2d       	mov	r31, r0
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    143e:	cb 55       	subi	r28, 0x5B	; 91
    1440:	df 4f       	sbci	r29, 0xFF	; 255
    1442:	18 81       	ld	r17, Y
    1444:	c5 5a       	subi	r28, 0xA5	; 165
    1446:	d0 40       	sbci	r29, 0x00	; 0
    1448:	01 2f       	mov	r16, r17
    144a:	10 e0       	ldi	r17, 0x00	; 0
    144c:	cd 55       	subi	r28, 0x5D	; 93
    144e:	df 4f       	sbci	r29, 0xFF	; 255
    1450:	19 83       	std	Y+1, r17	; 0x01
    1452:	08 83       	st	Y, r16
    1454:	c3 5a       	subi	r28, 0xA3	; 163
    1456:	d0 40       	sbci	r29, 0x00	; 0
    1458:	09 5e       	subi	r16, 0xE9	; 233
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
    145c:	ca 55       	subi	r28, 0x5A	; 90
    145e:	df 4f       	sbci	r29, 0xFF	; 255
    1460:	19 83       	std	Y+1, r17	; 0x01
    1462:	08 83       	st	Y, r16
    1464:	c6 5a       	subi	r28, 0xA6	; 166
    1466:	d0 40       	sbci	r29, 0x00	; 0
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) && (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1468:	83 2c       	mov	r8, r3
    146a:	91 2c       	mov	r9, r1
    146c:	99 81       	ldd	r25, Y+1	; 0x01
    146e:	f7 01       	movw	r30, r14
    1470:	23 9c       	mul	r2, r3
    1472:	e0 0d       	add	r30, r0
    1474:	f1 1d       	adc	r31, r1
    1476:	11 24       	eor	r1, r1
    1478:	81 81       	ldd	r24, Z+1	; 0x01
    147a:	98 13       	cpse	r25, r24
    147c:	9e cf       	rjmp	.-196    	; 0x13ba <handleMessages+0x3ac>
    147e:	28 9c       	mul	r2, r8
    1480:	f0 01       	movw	r30, r0
    1482:	29 9c       	mul	r2, r9
    1484:	f0 0d       	add	r31, r0
    1486:	11 24       	eor	r1, r1
    1488:	ee 0d       	add	r30, r14
    148a:	ff 1d       	adc	r31, r15
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	98 13       	cpse	r25, r24
    1492:	93 cf       	rjmp	.-218    	; 0x13ba <handleMessages+0x3ac>
    1494:	28 9c       	mul	r2, r8
    1496:	f0 01       	movw	r30, r0
    1498:	29 9c       	mul	r2, r9
    149a:	f0 0d       	add	r31, r0
    149c:	11 24       	eor	r1, r1
    149e:	ee 0d       	add	r30, r14
    14a0:	ff 1d       	adc	r31, r15
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	98 13       	cpse	r25, r24
    14a8:	88 cf       	rjmp	.-240    	; 0x13ba <handleMessages+0x3ac>
    14aa:	28 9c       	mul	r2, r8
    14ac:	f0 01       	movw	r30, r0
    14ae:	29 9c       	mul	r2, r9
    14b0:	f0 0d       	add	r31, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	ee 0d       	add	r30, r14
    14b6:	ff 1d       	adc	r31, r15
    14b8:	94 81       	ldd	r25, Z+4	; 0x04
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	98 13       	cpse	r25, r24
    14be:	7d cf       	rjmp	.-262    	; 0x13ba <handleMessages+0x3ac>
    14c0:	01 e0       	ldi	r16, 0x01	; 1
    14c2:	ce 55       	subi	r28, 0x5E	; 94
    14c4:	df 4f       	sbci	r29, 0xFF	; 255
    14c6:	08 83       	st	Y, r16
    14c8:	c2 5a       	subi	r28, 0xA2	; 162
    14ca:	d0 40       	sbci	r29, 0x00	; 0
    14cc:	7d cf       	rjmp	.-262    	; 0x13c8 <handleMessages+0x3ba>
					}
					
				}
			}
			// Adding device data to the next empty place in the network
			if (deviceFound == 0){
    14ce:	ce 55       	subi	r28, 0x5E	; 94
    14d0:	df 4f       	sbci	r29, 0xFF	; 255
    14d2:	18 81       	ld	r17, Y
    14d4:	c2 5a       	subi	r28, 0xA2	; 162
    14d6:	d0 40       	sbci	r29, 0x00	; 0
    14d8:	11 11       	cpse	r17, r1
    14da:	a3 c0       	rjmp	.+326    	; 0x1622 <handleMessages+0x614>
    14dc:	2d b6       	in	r2, 0x3d	; 61
    14de:	3e b6       	in	r3, 0x3e	; 62
    14e0:	c0 56       	subi	r28, 0x60	; 96
    14e2:	df 4f       	sbci	r29, 0xFF	; 255
    14e4:	39 82       	std	Y+1, r3	; 0x01
    14e6:	28 82       	st	Y, r2
    14e8:	c0 5a       	subi	r28, 0xA0	; 160
    14ea:	d0 40       	sbci	r29, 0x00	; 0
				uint8_t message[sizeOfMessage];
    14ec:	cb 55       	subi	r28, 0x5B	; 91
    14ee:	df 4f       	sbci	r29, 0xFF	; 255
    14f0:	08 81       	ld	r16, Y
    14f2:	c5 5a       	subi	r28, 0xA5	; 165
    14f4:	d0 40       	sbci	r29, 0x00	; 0
    14f6:	20 2e       	mov	r2, r16
    14f8:	31 2c       	mov	r3, r1
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	fc 01       	movw	r30, r24
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	8e 0f       	add	r24, r30
    1510:	9f 1f       	adc	r25, r31
    1512:	f3 01       	movw	r30, r6
    1514:	e8 0f       	add	r30, r24
    1516:	f9 1f       	adc	r31, r25
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	83 8b       	std	Z+19, r24	; 0x13
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
    151c:	d7 01       	movw	r26, r14
    151e:	8c 91       	ld	r24, X
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	fc 01       	movw	r30, r24
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	ee 0f       	add	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	8e 0f       	add	r24, r30
    1536:	9f 1f       	adc	r25, r31
    1538:	f3 01       	movw	r30, r6
    153a:	e8 0f       	add	r30, r24
    153c:	f9 1f       	adc	r31, r25
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	84 8b       	std	Z+20, r24	; 0x14
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
    1542:	8c 91       	ld	r24, X
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	fc 01       	movw	r30, r24
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	8e 0f       	add	r24, r30
    155a:	9f 1f       	adc	r25, r31
    155c:	f3 01       	movw	r30, r6
    155e:	e8 0f       	add	r30, r24
    1560:	f9 1f       	adc	r31, r25
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	85 8b       	std	Z+21, r24	; 0x15
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
    1566:	8c 91       	ld	r24, X
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	fc 01       	movw	r30, r24
    1570:	ee 0f       	add	r30, r30
    1572:	ff 1f       	adc	r31, r31
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	8e 0f       	add	r24, r30
    157e:	9f 1f       	adc	r25, r31
    1580:	f3 01       	movw	r30, r6
    1582:	e8 0f       	add	r30, r24
    1584:	f9 1f       	adc	r31, r25
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	86 8b       	std	Z+22, r24	; 0x16
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    158a:	21 14       	cp	r2, r1
    158c:	31 04       	cpc	r3, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <handleMessages+0x584>
    1590:	70 c2       	rjmp	.+1248   	; 0x1a72 <handleMessages+0xa64>
    1592:	81 2c       	mov	r8, r1
    1594:	91 2c       	mov	r9, r1
    1596:	e3 ec       	ldi	r30, 0xC3	; 195
    1598:	f9 e0       	ldi	r31, 0x09	; 9
    159a:	31 97       	sbiw	r30, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <handleMessages+0x58c>
    159e:	00 c0       	rjmp	.+0      	; 0x15a0 <handleMessages+0x592>
    15a0:	00 00       	nop
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
    15a2:	d7 01       	movw	r26, r14
    15a4:	0c 91       	ld	r16, X
    15a6:	10 e0       	ldi	r17, 0x00	; 0
    15a8:	00 0f       	add	r16, r16
    15aa:	11 1f       	adc	r17, r17
    15ac:	c8 01       	movw	r24, r16
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	08 0f       	add	r16, r24
    15bc:	19 1f       	adc	r17, r25
    15be:	09 5e       	subi	r16, 0xE9	; 233
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	08 0d       	add	r16, r8
    15c4:	19 1d       	adc	r17, r9
    15c6:	06 0d       	add	r16, r6
    15c8:	17 1d       	adc	r17, r7
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    15d0:	f8 01       	movw	r30, r16
    15d2:	80 83       	st	Z, r24
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    15d4:	ff ef       	ldi	r31, 0xFF	; 255
    15d6:	8f 1a       	sub	r8, r31
    15d8:	9f 0a       	sbc	r9, r31
    15da:	28 14       	cp	r2, r8
    15dc:	39 04       	cpc	r3, r9
    15de:	d9 f6       	brne	.-74     	; 0x1596 <handleMessages+0x588>
    15e0:	48 c2       	rjmp	.+1168   	; 0x1a72 <handleMessages+0xa64>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] =  myCons->myDSN[j];
    15e2:	6d 91       	ld	r22, X+
    15e4:	f9 01       	movw	r30, r18
    15e6:	70 81       	ld	r23, Z
    15e8:	fa 01       	movw	r30, r20
    15ea:	04 e0       	ldi	r16, 0x04	; 4
    15ec:	70 9f       	mul	r23, r16
    15ee:	e0 0d       	add	r30, r0
    15f0:	f1 1d       	adc	r31, r1
    15f2:	11 24       	eor	r1, r1
    15f4:	ee 0d       	add	r30, r14
    15f6:	ff 1d       	adc	r31, r15
    15f8:	e8 0f       	add	r30, r24
    15fa:	f9 1f       	adc	r31, r25
    15fc:	67 83       	std	Z+7, r22	; 0x07
    15fe:	01 96       	adiw	r24, 0x01	; 1
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
    1600:	84 30       	cpi	r24, 0x04	; 4
    1602:	91 05       	cpc	r25, r1
    1604:	71 f7       	brne	.-36     	; 0x15e2 <handleMessages+0x5d4>
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] =  myCons->myDSN[j];
				}
				networkPtr->numOfDevices++;
    1606:	1f 5f       	subi	r17, 0xFF	; 255
    1608:	d7 01       	movw	r26, r14
    160a:	1c 93       	st	X, r17
    160c:	c0 56       	subi	r28, 0x60	; 96
    160e:	df 4f       	sbci	r29, 0xFF	; 255
    1610:	28 80       	ld	r2, Y
    1612:	39 80       	ldd	r3, Y+1	; 0x01
    1614:	c0 5a       	subi	r28, 0xA0	; 160
    1616:	d0 40       	sbci	r29, 0x00	; 0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	3e be       	out	0x3e, r3	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	2d be       	out	0x3d, r2	; 61
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    1622:	d7 01       	movw	r26, r14
    1624:	9c 90       	ld	r9, X
    1626:	99 20       	and	r9, r9
    1628:	09 f4       	brne	.+2      	; 0x162c <handleMessages+0x61e>
    162a:	6a c1       	rjmp	.+724    	; 0x1900 <handleMessages+0x8f2>
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){		// Searching for source dsn in network list
    162c:	79 80       	ldd	r7, Y+1	; 0x01
    162e:	b7 01       	movw	r22, r14
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	81 2c       	mov	r8, r1
    1638:	0f 2e       	mov	r0, r31
    163a:	f4 e2       	ldi	r31, 0x24	; 36
    163c:	6f 2e       	mov	r6, r31
    163e:	f0 2d       	mov	r31, r0
						break;
						}
					if (i >= 3){
						deviceFound = 1;	//Should always be true
    1640:	33 24       	eor	r3, r3
    1642:	33 94       	inc	r3
    1644:	4f c1       	rjmp	.+670    	; 0x18e4 <handleMessages+0x8d6>
    1646:	83 2c       	mov	r8, r3
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){		// Searching for source dsn in network list
    1648:	81 2f       	mov	r24, r17
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	e1 e0       	ldi	r30, 0x01	; 1
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	ec 0f       	add	r30, r28
    1652:	fd 1f       	adc	r31, r29
    1654:	e8 0f       	add	r30, r24
    1656:	f9 1f       	adc	r31, r25
    1658:	1f 5f       	subi	r17, 0xFF	; 255
    165a:	82 0f       	add	r24, r18
    165c:	93 1f       	adc	r25, r19
    165e:	20 80       	ld	r2, Z
    1660:	fc 01       	movw	r30, r24
    1662:	81 81       	ldd	r24, Z+1	; 0x01
    1664:	28 12       	cpse	r2, r24
    1666:	07 c0       	rjmp	.+14     	; 0x1676 <handleMessages+0x668>
						break;
						}
					if (i >= 3){
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	81 0f       	add	r24, r17
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	08 f0       	brcs	.+2      	; 0x1672 <handleMessages+0x664>
    1670:	0f c2       	rjmp	.+1054   	; 0x1a90 <handleMessages+0xa82>
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
    1672:	14 30       	cpi	r17, 0x04	; 4
    1674:	48 f3       	brcs	.-46     	; 0x1648 <handleMessages+0x63a>
					if (i >= 3){
						deviceFound = 1;	//Should always be true
					}
				}
				
				if (deviceFound == 1){
    1676:	f1 e0       	ldi	r31, 0x01	; 1
    1678:	8f 12       	cpse	r8, r31
    167a:	2e c1       	rjmp	.+604    	; 0x18d8 <handleMessages+0x8ca>
					deviceFound = 0;	// Now searching for local DSN in connecting device 
					for (uint8_t deviceNubCon = 0; deviceNubCon < networkPtr->device[deviceNum].numOfNubCon; deviceNubCon++){
    167c:	20 2e       	mov	r2, r16
    167e:	31 2c       	mov	r3, r1
    1680:	c0 56       	subi	r28, 0x60	; 96
    1682:	df 4f       	sbci	r29, 0xFF	; 255
    1684:	39 82       	std	Y+1, r3	; 0x01
    1686:	28 82       	st	Y, r2
    1688:	c0 5a       	subi	r28, 0xA0	; 160
    168a:	d0 40       	sbci	r29, 0x00	; 0
    168c:	f7 01       	movw	r30, r14
    168e:	14 e2       	ldi	r17, 0x24	; 36
    1690:	01 9f       	mul	r16, r17
    1692:	e0 0d       	add	r30, r0
    1694:	f1 1d       	adc	r31, r1
    1696:	11 24       	eor	r1, r1
    1698:	35 81       	ldd	r19, Z+5	; 0x05
    169a:	33 23       	and	r19, r19
    169c:	49 f1       	breq	.+82     	; 0x16f0 <handleMessages+0x6e2>
						for (uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[deviceNum].nubConnections[deviceNubCon][i] ){
    169e:	d6 01       	movw	r26, r12
    16a0:	4c 91       	ld	r20, X
    16a2:	f7 01       	movw	r30, r14
    16a4:	b4 e2       	ldi	r27, 0x24	; 36
    16a6:	0b 9f       	mul	r16, r27
    16a8:	e0 0d       	add	r30, r0
    16aa:	f1 1d       	adc	r31, r1
    16ac:	11 24       	eor	r1, r1
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	11 e0       	ldi	r17, 0x01	; 1
    16b4:	05 c0       	rjmp	.+10     	; 0x16c0 <handleMessages+0x6b2>
    16b6:	51 2f       	mov	r21, r17
					}
				}
				
				if (deviceFound == 1){
					deviceFound = 0;	// Now searching for local DSN in connecting device 
					for (uint8_t deviceNubCon = 0; deviceNubCon < networkPtr->device[deviceNum].numOfNubCon; deviceNubCon++){
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	34 96       	adiw	r30, 0x04	; 4
    16bc:	83 17       	cp	r24, r19
    16be:	b1 f0       	breq	.+44     	; 0x16ec <handleMessages+0x6de>
						for (uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[deviceNum].nubConnections[deviceNubCon][i] ){
    16c0:	97 81       	ldd	r25, Z+7	; 0x07
    16c2:	49 13       	cpse	r20, r25
    16c4:	f9 cf       	rjmp	.-14     	; 0x16b8 <handleMessages+0x6aa>
    16c6:	20 85       	ldd	r18, Z+8	; 0x08
    16c8:	d6 01       	movw	r26, r12
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	9c 91       	ld	r25, X
    16ce:	11 97       	sbiw	r26, 0x01	; 1
    16d0:	29 13       	cpse	r18, r25
    16d2:	f2 cf       	rjmp	.-28     	; 0x16b8 <handleMessages+0x6aa>
    16d4:	12 96       	adiw	r26, 0x02	; 2
    16d6:	2c 91       	ld	r18, X
    16d8:	12 97       	sbiw	r26, 0x02	; 2
    16da:	91 85       	ldd	r25, Z+9	; 0x09
    16dc:	29 13       	cpse	r18, r25
    16de:	ec cf       	rjmp	.-40     	; 0x16b8 <handleMessages+0x6aa>
    16e0:	13 96       	adiw	r26, 0x03	; 3
    16e2:	2c 91       	ld	r18, X
    16e4:	92 85       	ldd	r25, Z+10	; 0x0a
    16e6:	29 17       	cp	r18, r25
    16e8:	31 f3       	breq	.-52     	; 0x16b6 <handleMessages+0x6a8>
    16ea:	e6 cf       	rjmp	.-52     	; 0x16b8 <handleMessages+0x6aa>
								deviceFound = 1;
							}
						}
					}
					// If Local nub is not in connecting nub list
					if (deviceFound == 0){
    16ec:	51 11       	cpse	r21, r1
    16ee:	db c0       	rjmp	.+438    	; 0x18a6 <handleMessages+0x898>
    16f0:	96 01       	movw	r18, r12
    16f2:	de 01       	movw	r26, r28
    16f4:	11 96       	adiw	r26, 0x01	; 1
				
				if (deviceFound == 1){
					deviceFound = 0;	// Now searching for local DSN in connecting device 
					for (uint8_t deviceNubCon = 0; deviceNubCon < networkPtr->device[deviceNum].numOfNubCon; deviceNubCon++){
						for (uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[deviceNum].nubConnections[deviceNubCon][i] ){
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
					}
					// If Local nub is not in connecting nub list
					if (deviceFound == 0){
						
						for (uint8_t i = 0; i < 4; i++){
							networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
    16fa:	44 e2       	ldi	r20, 0x24	; 36
    16fc:	c0 56       	subi	r28, 0x60	; 96
    16fe:	df 4f       	sbci	r29, 0xFF	; 255
    1700:	e8 81       	ld	r30, Y
    1702:	f9 81       	ldd	r31, Y+1	; 0x01
    1704:	c0 5a       	subi	r28, 0xA0	; 160
    1706:	d0 40       	sbci	r29, 0x00	; 0
    1708:	4e 9f       	mul	r20, r30
    170a:	80 01       	movw	r16, r0
    170c:	4f 9f       	mul	r20, r31
    170e:	10 0d       	add	r17, r0
    1710:	11 24       	eor	r1, r1
    1712:	a7 01       	movw	r20, r14
    1714:	40 0f       	add	r20, r16
    1716:	51 1f       	adc	r21, r17
    1718:	fa 01       	movw	r30, r20
    171a:	35 96       	adiw	r30, 0x05	; 5
    171c:	cd 55       	subi	r28, 0x5D	; 93
    171e:	df 4f       	sbci	r29, 0xFF	; 255
    1720:	f9 83       	std	Y+1, r31	; 0x01
    1722:	e8 83       	st	Y, r30
    1724:	c3 5a       	subi	r28, 0xA3	; 163
    1726:	d0 40       	sbci	r29, 0x00	; 0
    1728:	f9 01       	movw	r30, r18
    172a:	91 90       	ld	r9, Z+
    172c:	9f 01       	movw	r18, r30
    172e:	cd 55       	subi	r28, 0x5D	; 93
    1730:	df 4f       	sbci	r29, 0xFF	; 255
    1732:	e8 81       	ld	r30, Y
    1734:	f9 81       	ldd	r31, Y+1	; 0x01
    1736:	c3 5a       	subi	r28, 0xA3	; 163
    1738:	d0 40       	sbci	r29, 0x00	; 0
    173a:	50 81       	ld	r21, Z
    173c:	f8 01       	movw	r30, r16
    173e:	44 e0       	ldi	r20, 0x04	; 4
    1740:	54 9f       	mul	r21, r20
    1742:	e0 0d       	add	r30, r0
    1744:	f1 1d       	adc	r31, r1
    1746:	11 24       	eor	r1, r1
    1748:	ee 0d       	add	r30, r14
    174a:	ff 1d       	adc	r31, r15
    174c:	e8 0f       	add	r30, r24
    174e:	f9 1f       	adc	r31, r25
    1750:	97 82       	std	Z+7, r9	; 0x07
							myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
    1752:	f6 01       	movw	r30, r12
    1754:	94 80       	ldd	r9, Z+4	; 0x04
    1756:	8d 90       	ld	r8, X+
    1758:	44 e0       	ldi	r20, 0x04	; 4
    175a:	94 9e       	mul	r9, r20
    175c:	e0 0d       	add	r30, r0
    175e:	f1 1d       	adc	r31, r1
    1760:	11 24       	eor	r1, r1
    1762:	e8 0f       	add	r30, r24
    1764:	f9 1f       	adc	r31, r25
    1766:	86 82       	std	Z+6, r8	; 0x06
    1768:	01 96       	adiw	r24, 0x01	; 1
						}
					}
					// If Local nub is not in connecting nub list
					if (deviceFound == 0){
						
						for (uint8_t i = 0; i < 4; i++){
    176a:	84 30       	cpi	r24, 0x04	; 4
    176c:	91 05       	cpc	r25, r1
    176e:	e1 f6       	brne	.-72     	; 0x1728 <handleMessages+0x71a>
							networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
							myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
						}
						myCons->myNumOfNubCon ++;
    1770:	93 94       	inc	r9
    1772:	d6 01       	movw	r26, r12
    1774:	14 96       	adiw	r26, 0x04	; 4
    1776:	9c 92       	st	X, r9
						networkPtr->device[deviceNum].numOfNubCon ++;
    1778:	84 e2       	ldi	r24, 0x24	; 36
    177a:	c0 56       	subi	r28, 0x60	; 96
    177c:	df 4f       	sbci	r29, 0xFF	; 255
    177e:	28 80       	ld	r2, Y
    1780:	39 80       	ldd	r3, Y+1	; 0x01
    1782:	c0 5a       	subi	r28, 0xA0	; 160
    1784:	d0 40       	sbci	r29, 0x00	; 0
    1786:	82 9d       	mul	r24, r2
    1788:	f0 01       	movw	r30, r0
    178a:	83 9d       	mul	r24, r3
    178c:	f0 0d       	add	r31, r0
    178e:	11 24       	eor	r1, r1
    1790:	ee 0d       	add	r30, r14
    1792:	ff 1d       	adc	r31, r15
    1794:	85 81       	ldd	r24, Z+5	; 0x05
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	85 83       	std	Z+5, r24	; 0x05
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    179a:	d7 01       	movw	r26, r14
    179c:	9c 90       	ld	r9, X
    179e:	91 10       	cpse	r9, r1
    17a0:	82 c0       	rjmp	.+260    	; 0x18a6 <handleMessages+0x898>
    17a2:	ae c0       	rjmp	.+348    	; 0x1900 <handleMessages+0x8f2>
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
							if (i >= 3){
								deviceFound = 1;
    17a4:	16 2d       	mov	r17, r6
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    17a6:	8a 2f       	mov	r24, r26
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	f6 01       	movw	r30, r12
    17ac:	e8 0f       	add	r30, r24
    17ae:	f9 1f       	adc	r31, r25
    17b0:	af 5f       	subi	r26, 0xFF	; 255
    17b2:	82 0f       	add	r24, r18
    17b4:	93 1f       	adc	r25, r19
    17b6:	b0 81       	ld	r27, Z
    17b8:	fc 01       	movw	r30, r24
    17ba:	81 81       	ldd	r24, Z+1	; 0x01
    17bc:	b8 13       	cpse	r27, r24
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <handleMessages+0x7c0>
							if (i >= 3){
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	8a 0f       	add	r24, r26
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	08 f0       	brcs	.+2      	; 0x17ca <handleMessages+0x7bc>
    17c8:	67 c1       	rjmp	.+718    	; 0x1a98 <handleMessages+0xa8a>
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
    17ca:	a4 30       	cpi	r26, 0x04	; 4
    17cc:	60 f3       	brcs	.-40     	; 0x17a6 <handleMessages+0x798>
								deviceFound = 1;
							}
						}
						
						
						if (deviceFound == 1){
    17ce:	11 30       	cpi	r17, 0x01	; 1
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <handleMessages+0x7c6>
    17d2:	61 c0       	rjmp	.+194    	; 0x1896 <handleMessages+0x888>
							deviceFound = 0;
							for (uint8_t myNubCon = 0; myNubCon < myCons->myNumOfNubCon; myNubCon++){
    17d4:	d6 01       	movw	r26, r12
    17d6:	14 96       	adiw	r26, 0x04	; 4
    17d8:	4c 91       	ld	r20, X
    17da:	44 23       	and	r20, r20
    17dc:	09 f1       	breq	.+66     	; 0x1820 <handleMessages+0x812>
    17de:	f7 01       	movw	r30, r14
    17e0:	b4 e2       	ldi	r27, 0x24	; 36
    17e2:	3b 9e       	mul	r3, r27
    17e4:	e0 0d       	add	r30, r0
    17e6:	f1 1d       	adc	r31, r1
    17e8:	11 24       	eor	r1, r1
								for (uint8_t i = 0; i < 4; i++){
									if (sourceDSN[i] != networkPtr->device[myDeviceNum].nubConnections[myNubCon][i]){
    17ea:	5a 81       	ldd	r21, Y+2	; 0x02
    17ec:	7b 81       	ldd	r23, Y+3	; 0x03
    17ee:	0c 81       	ldd	r16, Y+4	; 0x04
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	11 e0       	ldi	r17, 0x01	; 1
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <handleMessages+0x7f4>
    17f8:	61 2f       	mov	r22, r17
						}
						
						
						if (deviceFound == 1){
							deviceFound = 0;
							for (uint8_t myNubCon = 0; myNubCon < myCons->myNumOfNubCon; myNubCon++){
    17fa:	8f 5f       	subi	r24, 0xFF	; 255
    17fc:	34 96       	adiw	r30, 0x04	; 4
    17fe:	84 17       	cp	r24, r20
    1800:	69 f0       	breq	.+26     	; 0x181c <handleMessages+0x80e>
								for (uint8_t i = 0; i < 4; i++){
									if (sourceDSN[i] != networkPtr->device[myDeviceNum].nubConnections[myNubCon][i]){
    1802:	97 81       	ldd	r25, Z+7	; 0x07
    1804:	97 11       	cpse	r25, r7
    1806:	f9 cf       	rjmp	.-14     	; 0x17fa <handleMessages+0x7ec>
    1808:	90 85       	ldd	r25, Z+8	; 0x08
    180a:	95 13       	cpse	r25, r21
    180c:	f6 cf       	rjmp	.-20     	; 0x17fa <handleMessages+0x7ec>
    180e:	91 85       	ldd	r25, Z+9	; 0x09
    1810:	79 13       	cpse	r23, r25
    1812:	f3 cf       	rjmp	.-26     	; 0x17fa <handleMessages+0x7ec>
    1814:	92 85       	ldd	r25, Z+10	; 0x0a
    1816:	09 17       	cp	r16, r25
    1818:	79 f3       	breq	.-34     	; 0x17f8 <handleMessages+0x7ea>
    181a:	ef cf       	rjmp	.-34     	; 0x17fa <handleMessages+0x7ec>
									if (i >= 3){
										deviceFound = 1;		// Device already added
									}
								}
							}
							if (deviceFound == 0){
    181c:	61 11       	cpse	r22, r1
    181e:	70 c0       	rjmp	.+224    	; 0x1900 <handleMessages+0x8f2>
    1820:	9e 01       	movw	r18, r28
    1822:	2f 5f       	subi	r18, 0xFF	; 255
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
						
						if (deviceFound == 1){
							deviceFound = 0;
							for (uint8_t myNubCon = 0; myNubCon < myCons->myNumOfNubCon; myNubCon++){
								for (uint8_t i = 0; i < 4; i++){
									if (sourceDSN[i] != networkPtr->device[myDeviceNum].nubConnections[myNubCon][i]){
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
									}
								}
							}
							if (deviceFound == 0){
								for (uint16_t j = 0; j < 4; j++){
									networkPtr->device[myDeviceNum].nubConnections[networkPtr->device[myDeviceNum].numOfNubCon][j] = sourceDSN[j];
    182a:	e3 2d       	mov	r30, r3
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	c0 56       	subi	r28, 0x60	; 96
    1830:	df 4f       	sbci	r29, 0xFF	; 255
    1832:	f9 83       	std	Y+1, r31	; 0x01
    1834:	e8 83       	st	Y, r30
    1836:	c0 5a       	subi	r28, 0xA0	; 160
    1838:	d0 40       	sbci	r29, 0x00	; 0
    183a:	f4 e2       	ldi	r31, 0x24	; 36
    183c:	3f 9e       	mul	r3, r31
    183e:	a0 01       	movw	r20, r0
    1840:	11 24       	eor	r1, r1
    1842:	d7 01       	movw	r26, r14
    1844:	a4 0f       	add	r26, r20
    1846:	b5 1f       	adc	r27, r21
    1848:	15 96       	adiw	r26, 0x05	; 5
    184a:	c0 56       	subi	r28, 0x60	; 96
    184c:	df 4f       	sbci	r29, 0xFF	; 255
    184e:	68 80       	ld	r6, Y
    1850:	79 80       	ldd	r7, Y+1	; 0x01
    1852:	c0 5a       	subi	r28, 0xA0	; 160
    1854:	d0 40       	sbci	r29, 0x00	; 0
    1856:	f9 01       	movw	r30, r18
    1858:	91 90       	ld	r9, Z+
    185a:	9f 01       	movw	r18, r30
    185c:	ec 91       	ld	r30, X
    185e:	1a 01       	movw	r2, r20
    1860:	04 e0       	ldi	r16, 0x04	; 4
    1862:	e0 9f       	mul	r30, r16
    1864:	20 0c       	add	r2, r0
    1866:	31 1c       	adc	r3, r1
    1868:	11 24       	eor	r1, r1
    186a:	f1 01       	movw	r30, r2
    186c:	ee 0d       	add	r30, r14
    186e:	ff 1d       	adc	r31, r15
    1870:	e8 0f       	add	r30, r24
    1872:	f9 1f       	adc	r31, r25
    1874:	97 82       	std	Z+7, r9	; 0x07
										deviceFound = 1;		// Device already added
									}
								}
							}
							if (deviceFound == 0){
								for (uint16_t j = 0; j < 4; j++){
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	91 05       	cpc	r25, r1
    187c:	31 f7       	brne	.-52     	; 0x184a <handleMessages+0x83c>
									networkPtr->device[myDeviceNum].nubConnections[networkPtr->device[myDeviceNum].numOfNubCon][j] = sourceDSN[j];
								}
								networkPtr->device[myDeviceNum].numOfNubCon ++;
    187e:	84 e2       	ldi	r24, 0x24	; 36
    1880:	86 9d       	mul	r24, r6
    1882:	f0 01       	movw	r30, r0
    1884:	87 9d       	mul	r24, r7
    1886:	f0 0d       	add	r31, r0
    1888:	11 24       	eor	r1, r1
    188a:	ee 0d       	add	r30, r14
    188c:	ff 1d       	adc	r31, r15
    188e:	85 81       	ldd	r24, Z+5	; 0x05
    1890:	8f 5f       	subi	r24, 0xFF	; 255
    1892:	85 83       	std	Z+5, r24	; 0x05
    1894:	35 c0       	rjmp	.+106    	; 0x1900 <handleMessages+0x8f2>
						networkPtr->device[deviceNum].numOfNubCon ++;
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    1896:	33 94       	inc	r3
    1898:	4f 5f       	subi	r20, 0xFF	; 255
    189a:	5f 4f       	sbci	r21, 0xFF	; 255
    189c:	6c 5d       	subi	r22, 0xDC	; 220
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	39 14       	cp	r3, r9
    18a2:	68 f0       	brcs	.+26     	; 0x18be <handleMessages+0x8b0>
    18a4:	2d c0       	rjmp	.+90     	; 0x1900 <handleMessages+0x8f2>
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    18a6:	d6 01       	movw	r26, r12
    18a8:	0c 91       	ld	r16, X
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	31 2c       	mov	r3, r1
    18b0:	10 e0       	ldi	r17, 0x00	; 0
    18b2:	0f 2e       	mov	r0, r31
    18b4:	f4 e2       	ldi	r31, 0x24	; 36
    18b6:	8f 2e       	mov	r8, r31
    18b8:	f0 2d       	mov	r31, r0
							if (i >= 3){
								deviceFound = 1;
    18ba:	66 24       	eor	r6, r6
    18bc:	63 94       	inc	r6
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    18be:	fb 01       	movw	r30, r22
    18c0:	21 81       	ldd	r18, Z+1	; 0x01
    18c2:	02 13       	cpse	r16, r18
    18c4:	84 cf       	rjmp	.-248    	; 0x17ce <handleMessages+0x7c0>
    18c6:	a1 e0       	ldi	r26, 0x01	; 1
    18c8:	84 9e       	mul	r8, r20
    18ca:	90 01       	movw	r18, r0
    18cc:	85 9e       	mul	r8, r21
    18ce:	30 0d       	add	r19, r0
    18d0:	11 24       	eor	r1, r1
    18d2:	2e 0d       	add	r18, r14
    18d4:	3f 1d       	adc	r19, r15
    18d6:	74 cf       	rjmp	.-280    	; 0x17c0 <handleMessages+0x7b2>
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    18d8:	0f 5f       	subi	r16, 0xFF	; 255
    18da:	4f 5f       	subi	r20, 0xFF	; 255
    18dc:	5f 4f       	sbci	r21, 0xFF	; 255
    18de:	94 96       	adiw	r26, 0x24	; 36
    18e0:	09 15       	cp	r16, r9
    18e2:	71 f0       	breq	.+28     	; 0x1900 <handleMessages+0x8f2>
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){		// Searching for source dsn in network list
    18e4:	11 96       	adiw	r26, 0x01	; 1
    18e6:	2c 91       	ld	r18, X
    18e8:	11 97       	sbiw	r26, 0x01	; 1
    18ea:	72 12       	cpse	r7, r18
    18ec:	c4 ce       	rjmp	.-632    	; 0x1676 <handleMessages+0x668>
    18ee:	11 e0       	ldi	r17, 0x01	; 1
    18f0:	64 9e       	mul	r6, r20
    18f2:	90 01       	movw	r18, r0
    18f4:	65 9e       	mul	r6, r21
    18f6:	30 0d       	add	r19, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	2e 0d       	add	r18, r14
    18fc:	3f 1d       	adc	r19, r15
    18fe:	b4 ce       	rjmp	.-664    	; 0x1668 <handleMessages+0x65a>
					}
					break;
				}
			}

			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
    1900:	01 e0       	ldi	r16, 0x01	; 1
    1902:	9e 01       	movw	r18, r28
    1904:	2f 5f       	subi	r18, 0xFF	; 255
    1906:	3f 4f       	sbci	r19, 0xFF	; 255
    1908:	a6 01       	movw	r20, r12
    190a:	b2 01       	movw	r22, r4
    190c:	c7 01       	movw	r24, r14
    190e:	0e 94 c7 03 	call	0x78e	; 0x78e <sendNetworkData>
			return 5;
    1912:	85 e0       	ldi	r24, 0x05	; 5
    1914:	c5 c0       	rjmp	.+394    	; 0x1aa0 <handleMessages+0xa92>
		}
	}
	
	
	// Ack from Humpro after command is sent
	if (msgType == 0x06){
    1916:	86 30       	cpi	r24, 0x06	; 6
    1918:	39 f4       	brne	.+14     	; 0x1928 <handleMessages+0x91a>
		uint8_t regNum		= (uint8_t) getChar(0);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		uint8_t regValue	= (uint8_t) getChar(0);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		return regValue;
    1926:	bc c0       	rjmp	.+376    	; 0x1aa0 <handleMessages+0xa92>
	}
	// Message from Humpro
	
}
    1928:	bb c0       	rjmp	.+374    	; 0x1aa0 <handleMessages+0xa92>
			for (uint8_t deviceNum = 0; deviceNum < myCons->myNumOfNubCon; deviceNum ++){
				sendNetworkData(networkPtr,networkSize,myCons,myCons->myNubConnections[deviceNum],0);
			}
		}
		
		return 3;
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	b9 c0       	rjmp	.+370    	; 0x1aa0 <handleMessages+0xa92>
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	b7 c0       	rjmp	.+366    	; 0x1aa0 <handleMessages+0xa92>
	}
	
	// Acknowledgment received
	if(msgType == 0x04){
		
		return 0x04;													// Will change later when checking connections
    1932:	84 e0       	ldi	r24, 0x04	; 4
    1934:	b5 c0       	rjmp	.+362    	; 0x1aa0 <handleMessages+0xa92>

			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
			return 5;
		}
		else{
			return 0;
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	b3 c0       	rjmp	.+358    	; 0x1aa0 <handleMessages+0xa92>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	b1 c0       	rjmp	.+354    	; 0x1aa0 <handleMessages+0xa92>
	uint8_t myPhoneConnections[MAX_PHONE_CON][6];
};

void PFD(uint8_t value, uint8_t port, uint8_t enabled){
	uint8_t val[1];
	val[0] = value;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	8d 83       	std	Y+5, r24	; 0x05
	if(enabled == 1){
		TXWrite(val,1,port);
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	ce 01       	movw	r24, r28
    194a:	05 96       	adiw	r24, 0x05	; 5
    194c:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1950:	83 ec       	ldi	r24, 0xC3	; 195
    1952:	99 e0       	ldi	r25, 0x09	; 9
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <handleMessages+0x946>
    1958:	00 c0       	rjmp	.+0      	; 0x195a <handleMessages+0x94c>
    195a:	00 00       	nop
	if (msgType == 0x01){
		PFD(0x1,1,en);
		// [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte),
		//  msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
		
		if (UARTPort == 0){
    195c:	2d b6       	in	r2, 0x3d	; 61
    195e:	3e b6       	in	r3, 0x3e	; 62
			uint8_t deviceNumInPath = getChar(0) + 1;		// Increment to this device
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	ce 55       	subi	r28, 0x5E	; 94
    196a:	df 4f       	sbci	r29, 0xFF	; 255
    196c:	88 83       	st	Y, r24
    196e:	c2 5a       	subi	r28, 0xA2	; 162
    1970:	d0 40       	sbci	r29, 0x00	; 0
			uint8_t msgPathSize = getChar(0);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1978:	58 2e       	mov	r5, r24
			uint8_t tempSize[2];
			
 			uint16_t msgSize = *tempSize;
    197a:	c1 2c       	mov	r12, r1
    197c:	cb 55       	subi	r28, 0x5B	; 91
    197e:	df 4f       	sbci	r29, 0xFF	; 255
    1980:	c8 82       	st	Y, r12
    1982:	c5 5a       	subi	r28, 0xA5	; 165
    1984:	d0 40       	sbci	r29, 0x00	; 0
    1986:	d1 2c       	mov	r13, r1
			uint8_t msg[msgSize];
    1988:	0d b7       	in	r16, 0x3d	; 61
    198a:	1e b7       	in	r17, 0x3e	; 62
    198c:	0f 5f       	subi	r16, 0xFF	; 255
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	c0 56       	subi	r28, 0x60	; 96
    1992:	df 4f       	sbci	r29, 0xFF	; 255
    1994:	19 83       	std	Y+1, r17	; 0x01
    1996:	08 83       	st	Y, r16
    1998:	c0 5a       	subi	r28, 0xA0	; 160
    199a:	d0 40       	sbci	r29, 0x00	; 0
    199c:	38 01       	movw	r6, r16
			uint8_t msgPath[msgPathSize*4];
    199e:	e8 2e       	mov	r14, r24
    19a0:	f1 2c       	mov	r15, r1
    19a2:	ee 0c       	add	r14, r14
    19a4:	ff 1c       	adc	r15, r15
    19a6:	ee 0c       	add	r14, r14
    19a8:	ff 1c       	adc	r15, r15
    19aa:	2d b7       	in	r18, 0x3d	; 61
    19ac:	3e b7       	in	r19, 0x3e	; 62
    19ae:	2e 19       	sub	r18, r14
    19b0:	3f 09       	sbc	r19, r15
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	3e bf       	out	0x3e, r19	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	2d bf       	out	0x3d, r18	; 61
    19bc:	4d b7       	in	r20, 0x3d	; 61
    19be:	5e b7       	in	r21, 0x3e	; 62
    19c0:	4f 5f       	subi	r20, 0xFF	; 255
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255
    19c4:	cd 55       	subi	r28, 0x5D	; 93
    19c6:	df 4f       	sbci	r29, 0xFF	; 255
    19c8:	59 83       	std	Y+1, r21	; 0x01
    19ca:	48 83       	st	Y, r20
    19cc:	c3 5a       	subi	r28, 0xA3	; 163
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	4a 01       	movw	r8, r20
			for (uint8_t i = 0; i < msgPathSize*4; i ++){
    19d2:	1e 14       	cp	r1, r14
    19d4:	1f 04       	cpc	r1, r15
    19d6:	0c f4       	brge	.+2      	; 0x19da <handleMessages+0x9cc>
    19d8:	50 cb       	rjmp	.-2400   	; 0x107a <handleMessages+0x6c>
    19da:	43 c0       	rjmp	.+134    	; 0x1a62 <handleMessages+0xa54>
	uint8_t myPhoneConnections[MAX_PHONE_CON][6];
};

void PFD(uint8_t value, uint8_t port, uint8_t enabled){
	uint8_t val[1];
	val[0] = value;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	8d 83       	std	Y+5, r24	; 0x05
	if(enabled == 1){
		TXWrite(val,1,port);
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	ce 01       	movw	r24, r28
    19e8:	05 96       	adiw	r24, 0x05	; 5
    19ea:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    19ee:	83 ec       	ldi	r24, 0xC3	; 195
    19f0:	99 e0       	ldi	r25, 0x09	; 9
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <handleMessages+0x9e4>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <handleMessages+0x9ea>
    19f8:	00 00       	nop
	uint8_t myPhoneConnections[MAX_PHONE_CON][6];
};

void PFD(uint8_t value, uint8_t port, uint8_t enabled){
	uint8_t val[1];
	val[0] = value;
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	8d 83       	std	Y+5, r24	; 0x05
	if(enabled == 1){
		TXWrite(val,1,port);
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	ce 01       	movw	r24, r28
    1a06:	05 96       	adiw	r24, 0x05	; 5
    1a08:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1a0c:	a3 ec       	ldi	r26, 0xC3	; 195
    1a0e:	b9 e0       	ldi	r27, 0x09	; 9
    1a10:	11 97       	sbiw	r26, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <handleMessages+0xa02>
    1a14:	00 c0       	rjmp	.+0      	; 0x1a16 <handleMessages+0xa08>
    1a16:	00 00       	nop
		// If Message from esp
		else{
			// Format 0x02,0x00,msgType,msg length,dest mac, source mac, message
			//                         /Starting here from this point
			PFD(0x2,1,en);
			uint8_t *tempSize = malloc(sizeof(uint8_t)*2);
    1a18:	82 e0       	ldi	r24, 0x02	; 2
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <malloc>
    1a20:	8c 01       	movw	r16, r24
    1a22:	c3 56       	subi	r28, 0x63	; 99
    1a24:	df 4f       	sbci	r29, 0xFF	; 255
    1a26:	99 83       	std	Y+1, r25	; 0x01
    1a28:	88 83       	st	Y, r24
    1a2a:	cd 59       	subi	r28, 0x9D	; 157
    1a2c:	d0 40       	sbci	r29, 0x00	; 0
			*tempSize = getChar(1);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1a34:	f8 01       	movw	r30, r16
    1a36:	80 83       	st	Z, r24
			*(tempSize + sizeof(uint8_t)) = getChar(1);
    1a38:	c3 56       	subi	r28, 0x63	; 99
    1a3a:	df 4f       	sbci	r29, 0xFF	; 255
    1a3c:	08 81       	ld	r16, Y
    1a3e:	19 81       	ldd	r17, Y+1	; 0x01
    1a40:	cd 59       	subi	r28, 0x9D	; 157
    1a42:	d0 40       	sbci	r29, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1a4a:	d8 01       	movw	r26, r16
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	8c 93       	st	X, r24
    1a50:	4e 01       	movw	r8, r28
    1a52:	b7 e9       	ldi	r27, 0x97	; 151
    1a54:	8b 0e       	add	r8, r27
    1a56:	91 1c       	adc	r9, r1
    1a58:	8e 01       	movw	r16, r28
    1a5a:	05 57       	subi	r16, 0x75	; 117
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t* destDSN;
			uint8_t msgPath[3][4];
			uint8_t msgPathSize = 0;
			uint8_t* msgDataReturn;
			uint8_t msg[128];
			for (uint8_t i = 0; i < 12; i++){
    1a5e:	51 2c       	mov	r5, r1
    1a60:	8d cb       	rjmp	.-2278   	; 0x117c <handleMessages+0x16e>
    1a62:	8e 01       	movw	r16, r28
    1a64:	0f 56       	subi	r16, 0x6F	; 111
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	78 01       	movw	r14, r16
    1a6a:	e6 e0       	ldi	r30, 0x06	; 6
    1a6c:	ee 0e       	add	r14, r30
    1a6e:	f1 1c       	adc	r15, r1
    1a70:	15 cb       	rjmp	.-2518   	; 0x109c <handleMessages+0x8e>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] =  myCons->myDSN[j];
    1a72:	d7 01       	movw	r26, r14
    1a74:	1c 91       	ld	r17, X
    1a76:	d6 01       	movw	r26, r12
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	e4 e2       	ldi	r30, 0x24	; 36
    1a7e:	1e 9f       	mul	r17, r30
    1a80:	a0 01       	movw	r20, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	97 01       	movw	r18, r14
    1a86:	24 0f       	add	r18, r20
    1a88:	35 1f       	adc	r19, r21
    1a8a:	2b 5f       	subi	r18, 0xFB	; 251
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	a9 cd       	rjmp	.-1198   	; 0x15e2 <handleMessages+0x5d4>
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
    1a90:	14 30       	cpi	r17, 0x04	; 4
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <handleMessages+0xa88>
    1a94:	d8 cd       	rjmp	.-1104   	; 0x1646 <handleMessages+0x638>
    1a96:	f2 cd       	rjmp	.-1052   	; 0x167c <handleMessages+0x66e>
					}					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
    1a98:	a4 30       	cpi	r26, 0x04	; 4
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <handleMessages+0xa90>
    1a9c:	83 ce       	rjmp	.-762    	; 0x17a4 <handleMessages+0x796>
    1a9e:	9a ce       	rjmp	.-716    	; 0x17d4 <handleMessages+0x7c6>
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	be be       	out	0x3e, r11	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	ad be       	out	0x3d, r10	; 61
    1aaa:	c9 55       	subi	r28, 0x59	; 89
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	bf 90       	pop	r11
    1aca:	af 90       	pop	r10
    1acc:	9f 90       	pop	r9
    1ace:	8f 90       	pop	r8
    1ad0:	7f 90       	pop	r7
    1ad2:	6f 90       	pop	r6
    1ad4:	5f 90       	pop	r5
    1ad6:	4f 90       	pop	r4
    1ad8:	3f 90       	pop	r3
    1ada:	2f 90       	pop	r2
    1adc:	08 95       	ret

00001ade <USART_setup>:

// Setting up USART for communication between HUMPRO900 module and the MCU
void USART_setup(unsigned int ubrr){
	
	// UART 0
	UBRR0H = (unsigned char)(ubrr>>8);			// Setting baud rate
    1ade:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
    1ae2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A = (1<<UDRE0)|(1<<U2X0);
    1ae6:	42 e2       	ldi	r20, 0x22	; 34
    1ae8:	40 93 c0 00 	sts	0x00C0, r20	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0)|(1<<TXEN0);				// Enabling Tx & Rx
    1aec:	38 e9       	ldi	r19, 0x98	; 152
    1aee:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    1af2:	2e e0       	ldi	r18, 0x0E	; 14
    1af4:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// UART 1
	UBRR1H = (unsigned char)(ubrr>>8);			// Setting baud rate
    1af8:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = (unsigned char)ubrr;
    1afc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1A = (1<<UDRE1)|(1<<U2X0);
    1b00:	40 93 c8 00 	sts	0x00C8, r20	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
	UCSR1B = (1<<RXEN1)|(1<<RXCIE1)|(1<<TXEN1);				// Enabling Tx & Rx
    1b04:	30 93 c9 00 	sts	0x00C9, r19	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	UCSR1C = (1<<USBS1)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    1b08:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
    1b0c:	08 95       	ret

00001b0e <setupTransceiver>:
}



// Setting up ports for HUMPRO900 transceiver
uint8_t * setupTransceiver(){
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	60 97       	sbiw	r28, 0x10	; 16
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
	
	sei();		// Enabling interrupts
    1b26:	78 94       	sei
	DDRB |= (1 << DDB7);	//PD4 PWR High for normal op, low for low power operation (power down)
    1b28:	27 9a       	sbi	0x04, 7	; 4
	//DDRC &= ~(1 << DDC3);	//PC3 CRESP_BAR
	DDRC &= ~(1 << DDC4);	//PC4 CTS_BAR (high when busy, low when module is ready)
    1b2a:	3c 98       	cbi	0x07, 4	; 7
	DDRB |= (1 << DDB6);	//PC5 Reset, resets when low
    1b2c:	26 9a       	sbi	0x04, 6	; 4
	
	
	//DDRD &= ~(1 << DDD0);	//PD2 Buffer empty status (high when buffer is empty) input
	DDRD |= (1 << DDD3);	//PD3 "PUSH button" PULL LOW
    1b2e:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD5);	//PD5 CMD_BAR (high for data transmit, low for commands)
    1b30:	55 9a       	sbi	0x0a, 5	; 10
	
	PORTD &= ~(1<< PORTD3);
    1b32:	5b 98       	cbi	0x0b, 3	; 11
	PORTB &= ~(1 << PORTB6);		// Reset norm operation
    1b34:	2e 98       	cbi	0x05, 6	; 5
    1b36:	87 ea       	ldi	r24, 0xA7	; 167
    1b38:	91 e6       	ldi	r25, 0x61	; 97
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <setupTransceiver+0x2c>
    1b3e:	00 c0       	rjmp	.+0      	; 0x1b40 <setupTransceiver+0x32>
    1b40:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1 <<PORTB6);
    1b42:	2e 9a       	sbi	0x05, 6	; 5
    1b44:	9f e3       	ldi	r25, 0x3F	; 63
    1b46:	ed e0       	ldi	r30, 0x0D	; 13
    1b48:	f3 e0       	ldi	r31, 0x03	; 3
    1b4a:	91 50       	subi	r25, 0x01	; 1
    1b4c:	e0 40       	sbci	r30, 0x00	; 0
    1b4e:	f0 40       	sbci	r31, 0x00	; 0
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <setupTransceiver+0x3c>
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <setupTransceiver+0x46>
    1b54:	00 00       	nop
	_delay_ms(1000);
	rx0ReadPos = rx0WritePos;	// Ignoring reset message
    1b56:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
    1b5a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rx0ReadPos>
    1b5e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rx1Buffer>
    1b62:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx0ReadPos>
	
	
	PORTD &= ~(1 << PORTD5);	// Command mode
    1b66:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t addMode[4]	= {0xFF,0x02,0x4F,0x04};		// Setting address mode as DSN (Volatile address)
	uint8_t showVer[4]	= {0xFF,0x02,0x0A,0x00};		// Do not show version at start up
	uint8_t CMDHold[4]	= {0xFF,0x02,0x6E,0x00};		// If CMD_BAR is low, wait until it goes high to send to mcu
	uint8_t compat[4]	= {0xFF,0x02,0x70,0x00};		// Compatibility mode to enable broadcast function for DSN
	uint8_t autoAdd[4]	= {0xFF,0x02,0x71,0x04};		// Auto addressing for DNS mode
	uint8_t myDSN3[4]	= {0xFF,0x02,0xFE,0x34};				// Read command for preprogrammed DNS values, DSN3 is MSB
    1b68:	2f ef       	ldi	r18, 0xFF	; 255
    1b6a:	29 83       	std	Y+1, r18	; 0x01
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	8e ef       	ldi	r24, 0xFE	; 254
    1b72:	8b 83       	std	Y+3, r24	; 0x03
    1b74:	34 e3       	ldi	r19, 0x34	; 52
    1b76:	3c 83       	std	Y+4, r19	; 0x04
	uint8_t myDSN2[4]	= {0xFF,0x02,0xFE,0x35};
    1b78:	2d 83       	std	Y+5, r18	; 0x05
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8f 83       	std	Y+7, r24	; 0x07
    1b7e:	35 e3       	ldi	r19, 0x35	; 53
    1b80:	38 87       	std	Y+8, r19	; 0x08
	uint8_t myDSN1[4]	= {0xFF,0x02,0xFE,0x36};
    1b82:	29 87       	std	Y+9, r18	; 0x09
    1b84:	9a 87       	std	Y+10, r25	; 0x0a
    1b86:	8b 87       	std	Y+11, r24	; 0x0b
    1b88:	36 e3       	ldi	r19, 0x36	; 54
    1b8a:	3c 87       	std	Y+12, r19	; 0x0c
	uint8_t myDSN0[4]	= {0xFF,0x02,0xFE,0x37};
    1b8c:	2d 87       	std	Y+13, r18	; 0x0d
    1b8e:	9e 87       	std	Y+14, r25	; 0x0e
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
    1b92:	87 e3       	ldi	r24, 0x37	; 55
    1b94:	88 8b       	std	Y+16, r24	; 0x10
	//getChar(0);
	//TX0Write(autoAdd[0],4);
	
	
	// Getting local DNS info (third char returned)
	uint8_t *myDSNVal = malloc(4*sizeof(uint8_t));
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <malloc>
    1b9e:	8c 01       	movw	r16, r24
	
	TXWrite(myDSN3,4,0);
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	64 e0       	ldi	r22, 0x04	; 4
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1bb0:	87 ea       	ldi	r24, 0xA7	; 167
    1bb2:	91 e6       	ldi	r25, 0x61	; 97
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <setupTransceiver+0xa6>
    1bb8:	00 c0       	rjmp	.+0      	; 0x1bba <setupTransceiver+0xac>
    1bba:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1bbc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unread0Bytes>
    1bc0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <rx1WritePos>
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	ec f3       	brlt	.-6      	; 0x1bc4 <setupTransceiver+0xb6>
	
	rx0ReadPos = rx0WritePos -1;		// Ignoring other bytes received, only care about DSN value
    1bca:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
    1bce:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rx0ReadPos>
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rx1Buffer>
    1bd8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx0ReadPos>

	myDSNVal[0] = getChar(0);
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 83       	st	Z, r24
	
	
	TXWrite(myDSN2,4,0);
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	64 e0       	ldi	r22, 0x04	; 4
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	05 96       	adiw	r24, 0x05	; 5
    1bf4:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1bf8:	87 ea       	ldi	r24, 0xA7	; 167
    1bfa:	91 e6       	ldi	r25, 0x61	; 97
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <setupTransceiver+0xee>
    1c00:	00 c0       	rjmp	.+0      	; 0x1c02 <setupTransceiver+0xf4>
    1c02:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1c04:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unread0Bytes>
    1c08:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <rx1WritePos>
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	91 05       	cpc	r25, r1
    1c10:	ec f3       	brlt	.-6      	; 0x1c0c <setupTransceiver+0xfe>
		
	rx0ReadPos = rx0WritePos -1;
    1c12:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
    1c16:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rx0ReadPos>
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rx1Buffer>
    1c20:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx0ReadPos>
	myDSNVal[1] = getChar(0);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	81 83       	std	Z+1, r24	; 0x01
	
	
	TXWrite(myDSN1,4,0);
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	64 e0       	ldi	r22, 0x04	; 4
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	ce 01       	movw	r24, r28
    1c3a:	09 96       	adiw	r24, 0x09	; 9
    1c3c:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1c40:	87 ea       	ldi	r24, 0xA7	; 167
    1c42:	91 e6       	ldi	r25, 0x61	; 97
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <setupTransceiver+0x136>
    1c48:	00 c0       	rjmp	.+0      	; 0x1c4a <setupTransceiver+0x13c>
    1c4a:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1c4c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unread0Bytes>
    1c50:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <rx1WritePos>
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	91 05       	cpc	r25, r1
    1c58:	ec f3       	brlt	.-6      	; 0x1c54 <setupTransceiver+0x146>
	rx0ReadPos = rx0WritePos -1;
    1c5a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
    1c5e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rx0ReadPos>
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rx1Buffer>
    1c68:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx0ReadPos>
	myDSNVal[2] = getChar(0);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1c74:	f8 01       	movw	r30, r16
    1c76:	82 83       	std	Z+2, r24	; 0x02
	
	
	TXWrite(myDSN0,4,0);
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	64 e0       	ldi	r22, 0x04	; 4
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	ce 01       	movw	r24, r28
    1c82:	0d 96       	adiw	r24, 0x0d	; 13
    1c84:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1c88:	87 ea       	ldi	r24, 0xA7	; 167
    1c8a:	91 e6       	ldi	r25, 0x61	; 97
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <setupTransceiver+0x17e>
    1c90:	00 c0       	rjmp	.+0      	; 0x1c92 <setupTransceiver+0x184>
    1c92:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1c94:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <unread0Bytes>
    1c98:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <rx1WritePos>
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	ec f3       	brlt	.-6      	; 0x1c9c <setupTransceiver+0x18e>
	rx0ReadPos = rx0WritePos -1;
    1ca2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <rx0WritePos>
    1ca6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <rx0ReadPos>
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rx1Buffer>
    1cb0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx0ReadPos>
	myDSNVal[3] = getChar(0);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	83 83       	std	Z+3, r24	; 0x03
	
	
	
	TXWrite(myDSNVal,4,0);
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	64 e0       	ldi	r22, 0x04	; 4
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	c8 01       	movw	r24, r16
    1cca:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1cce:	ff e3       	ldi	r31, 0x3F	; 63
    1cd0:	2d e0       	ldi	r18, 0x0D	; 13
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	f1 50       	subi	r31, 0x01	; 1
    1cd6:	20 40       	sbci	r18, 0x00	; 0
    1cd8:	80 40       	sbci	r24, 0x00	; 0
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <setupTransceiver+0x1c6>
    1cdc:	00 c0       	rjmp	.+0      	; 0x1cde <setupTransceiver+0x1d0>
    1cde:	00 00       	nop
	_delay_ms(1000);
	PORTD |= (1 << PORTD5);	// Data transmit mode
    1ce0:	5d 9a       	sbi	0x0b, 5	; 11
	
	//PORTC |= (1 << PORTC5);
	
	return myDSNVal;
	
}
    1ce2:	c8 01       	movw	r24, r16
    1ce4:	60 96       	adiw	r28, 0x10	; 16
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <malloc>:
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	82 30       	cpi	r24, 0x02	; 2
    1d04:	91 05       	cpc	r25, r1
    1d06:	10 f4       	brcc	.+4      	; 0x1d0c <malloc+0x12>
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <__flp>
    1d10:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <__flp+0x1>
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	30 97       	sbiw	r30, 0x00	; 0
    1d1e:	19 f1       	breq	.+70     	; 0x1d66 <malloc+0x6c>
    1d20:	40 81       	ld	r20, Z
    1d22:	51 81       	ldd	r21, Z+1	; 0x01
    1d24:	02 81       	ldd	r16, Z+2	; 0x02
    1d26:	13 81       	ldd	r17, Z+3	; 0x03
    1d28:	48 17       	cp	r20, r24
    1d2a:	59 07       	cpc	r21, r25
    1d2c:	c8 f0       	brcs	.+50     	; 0x1d60 <malloc+0x66>
    1d2e:	84 17       	cp	r24, r20
    1d30:	95 07       	cpc	r25, r21
    1d32:	69 f4       	brne	.+26     	; 0x1d4e <malloc+0x54>
    1d34:	10 97       	sbiw	r26, 0x00	; 0
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <malloc+0x4a>
    1d38:	12 96       	adiw	r26, 0x02	; 2
    1d3a:	0c 93       	st	X, r16
    1d3c:	12 97       	sbiw	r26, 0x02	; 2
    1d3e:	13 96       	adiw	r26, 0x03	; 3
    1d40:	1c 93       	st	X, r17
    1d42:	27 c0       	rjmp	.+78     	; 0x1d92 <malloc+0x98>
    1d44:	00 93 28 03 	sts	0x0328, r16	; 0x800328 <__flp>
    1d48:	10 93 29 03 	sts	0x0329, r17	; 0x800329 <__flp+0x1>
    1d4c:	22 c0       	rjmp	.+68     	; 0x1d92 <malloc+0x98>
    1d4e:	21 15       	cp	r18, r1
    1d50:	31 05       	cpc	r19, r1
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <malloc+0x60>
    1d54:	42 17       	cp	r20, r18
    1d56:	53 07       	cpc	r21, r19
    1d58:	18 f4       	brcc	.+6      	; 0x1d60 <malloc+0x66>
    1d5a:	9a 01       	movw	r18, r20
    1d5c:	bd 01       	movw	r22, r26
    1d5e:	ef 01       	movw	r28, r30
    1d60:	df 01       	movw	r26, r30
    1d62:	f8 01       	movw	r30, r16
    1d64:	db cf       	rjmp	.-74     	; 0x1d1c <malloc+0x22>
    1d66:	21 15       	cp	r18, r1
    1d68:	31 05       	cpc	r19, r1
    1d6a:	f9 f0       	breq	.+62     	; 0x1daa <malloc+0xb0>
    1d6c:	28 1b       	sub	r18, r24
    1d6e:	39 0b       	sbc	r19, r25
    1d70:	24 30       	cpi	r18, 0x04	; 4
    1d72:	31 05       	cpc	r19, r1
    1d74:	80 f4       	brcc	.+32     	; 0x1d96 <malloc+0x9c>
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	61 15       	cp	r22, r1
    1d7c:	71 05       	cpc	r23, r1
    1d7e:	21 f0       	breq	.+8      	; 0x1d88 <malloc+0x8e>
    1d80:	fb 01       	movw	r30, r22
    1d82:	93 83       	std	Z+3, r25	; 0x03
    1d84:	82 83       	std	Z+2, r24	; 0x02
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <malloc+0x96>
    1d88:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <__flp+0x1>
    1d8c:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__flp>
    1d90:	fe 01       	movw	r30, r28
    1d92:	32 96       	adiw	r30, 0x02	; 2
    1d94:	44 c0       	rjmp	.+136    	; 0x1e1e <malloc+0x124>
    1d96:	fe 01       	movw	r30, r28
    1d98:	e2 0f       	add	r30, r18
    1d9a:	f3 1f       	adc	r31, r19
    1d9c:	81 93       	st	Z+, r24
    1d9e:	91 93       	st	Z+, r25
    1da0:	22 50       	subi	r18, 0x02	; 2
    1da2:	31 09       	sbc	r19, r1
    1da4:	39 83       	std	Y+1, r19	; 0x01
    1da6:	28 83       	st	Y, r18
    1da8:	3a c0       	rjmp	.+116    	; 0x1e1e <malloc+0x124>
    1daa:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <__brkval>
    1dae:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <__brkval+0x1>
    1db2:	23 2b       	or	r18, r19
    1db4:	41 f4       	brne	.+16     	; 0x1dc6 <malloc+0xcc>
    1db6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1dba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1dbe:	30 93 27 03 	sts	0x0327, r19	; 0x800327 <__brkval+0x1>
    1dc2:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <__brkval>
    1dc6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1dca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1dce:	21 15       	cp	r18, r1
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	41 f4       	brne	.+16     	; 0x1de4 <malloc+0xea>
    1dd4:	2d b7       	in	r18, 0x3d	; 61
    1dd6:	3e b7       	in	r19, 0x3e	; 62
    1dd8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1ddc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1de0:	24 1b       	sub	r18, r20
    1de2:	35 0b       	sbc	r19, r21
    1de4:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <__brkval>
    1de8:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <__brkval+0x1>
    1dec:	e2 17       	cp	r30, r18
    1dee:	f3 07       	cpc	r31, r19
    1df0:	a0 f4       	brcc	.+40     	; 0x1e1a <malloc+0x120>
    1df2:	2e 1b       	sub	r18, r30
    1df4:	3f 0b       	sbc	r19, r31
    1df6:	28 17       	cp	r18, r24
    1df8:	39 07       	cpc	r19, r25
    1dfa:	78 f0       	brcs	.+30     	; 0x1e1a <malloc+0x120>
    1dfc:	ac 01       	movw	r20, r24
    1dfe:	4e 5f       	subi	r20, 0xFE	; 254
    1e00:	5f 4f       	sbci	r21, 0xFF	; 255
    1e02:	24 17       	cp	r18, r20
    1e04:	35 07       	cpc	r19, r21
    1e06:	48 f0       	brcs	.+18     	; 0x1e1a <malloc+0x120>
    1e08:	4e 0f       	add	r20, r30
    1e0a:	5f 1f       	adc	r21, r31
    1e0c:	50 93 27 03 	sts	0x0327, r21	; 0x800327 <__brkval+0x1>
    1e10:	40 93 26 03 	sts	0x0326, r20	; 0x800326 <__brkval>
    1e14:	81 93       	st	Z+, r24
    1e16:	91 93       	st	Z+, r25
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <malloc+0x124>
    1e1a:	e0 e0       	ldi	r30, 0x00	; 0
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	cf 01       	movw	r24, r30
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <free>:
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <free+0xa>
    1e32:	81 c0       	rjmp	.+258    	; 0x1f36 <free+0x10c>
    1e34:	fc 01       	movw	r30, r24
    1e36:	32 97       	sbiw	r30, 0x02	; 2
    1e38:	13 82       	std	Z+3, r1	; 0x03
    1e3a:	12 82       	std	Z+2, r1	; 0x02
    1e3c:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <__flp>
    1e40:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <__flp+0x1>
    1e44:	10 97       	sbiw	r26, 0x00	; 0
    1e46:	81 f4       	brne	.+32     	; 0x1e68 <free+0x3e>
    1e48:	20 81       	ld	r18, Z
    1e4a:	31 81       	ldd	r19, Z+1	; 0x01
    1e4c:	82 0f       	add	r24, r18
    1e4e:	93 1f       	adc	r25, r19
    1e50:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <__brkval>
    1e54:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <__brkval+0x1>
    1e58:	28 17       	cp	r18, r24
    1e5a:	39 07       	cpc	r19, r25
    1e5c:	51 f5       	brne	.+84     	; 0x1eb2 <free+0x88>
    1e5e:	f0 93 27 03 	sts	0x0327, r31	; 0x800327 <__brkval+0x1>
    1e62:	e0 93 26 03 	sts	0x0326, r30	; 0x800326 <__brkval>
    1e66:	67 c0       	rjmp	.+206    	; 0x1f36 <free+0x10c>
    1e68:	ed 01       	movw	r28, r26
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	ce 17       	cp	r28, r30
    1e70:	df 07       	cpc	r29, r31
    1e72:	40 f4       	brcc	.+16     	; 0x1e84 <free+0x5a>
    1e74:	4a 81       	ldd	r20, Y+2	; 0x02
    1e76:	5b 81       	ldd	r21, Y+3	; 0x03
    1e78:	9e 01       	movw	r18, r28
    1e7a:	41 15       	cp	r20, r1
    1e7c:	51 05       	cpc	r21, r1
    1e7e:	f1 f0       	breq	.+60     	; 0x1ebc <free+0x92>
    1e80:	ea 01       	movw	r28, r20
    1e82:	f5 cf       	rjmp	.-22     	; 0x1e6e <free+0x44>
    1e84:	d3 83       	std	Z+3, r29	; 0x03
    1e86:	c2 83       	std	Z+2, r28	; 0x02
    1e88:	40 81       	ld	r20, Z
    1e8a:	51 81       	ldd	r21, Z+1	; 0x01
    1e8c:	84 0f       	add	r24, r20
    1e8e:	95 1f       	adc	r25, r21
    1e90:	c8 17       	cp	r28, r24
    1e92:	d9 07       	cpc	r29, r25
    1e94:	59 f4       	brne	.+22     	; 0x1eac <free+0x82>
    1e96:	88 81       	ld	r24, Y
    1e98:	99 81       	ldd	r25, Y+1	; 0x01
    1e9a:	84 0f       	add	r24, r20
    1e9c:	95 1f       	adc	r25, r21
    1e9e:	02 96       	adiw	r24, 0x02	; 2
    1ea0:	91 83       	std	Z+1, r25	; 0x01
    1ea2:	80 83       	st	Z, r24
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea8:	93 83       	std	Z+3, r25	; 0x03
    1eaa:	82 83       	std	Z+2, r24	; 0x02
    1eac:	21 15       	cp	r18, r1
    1eae:	31 05       	cpc	r19, r1
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <free+0x92>
    1eb2:	f0 93 29 03 	sts	0x0329, r31	; 0x800329 <__flp+0x1>
    1eb6:	e0 93 28 03 	sts	0x0328, r30	; 0x800328 <__flp>
    1eba:	3d c0       	rjmp	.+122    	; 0x1f36 <free+0x10c>
    1ebc:	e9 01       	movw	r28, r18
    1ebe:	fb 83       	std	Y+3, r31	; 0x03
    1ec0:	ea 83       	std	Y+2, r30	; 0x02
    1ec2:	49 91       	ld	r20, Y+
    1ec4:	59 91       	ld	r21, Y+
    1ec6:	c4 0f       	add	r28, r20
    1ec8:	d5 1f       	adc	r29, r21
    1eca:	ec 17       	cp	r30, r28
    1ecc:	fd 07       	cpc	r31, r29
    1ece:	61 f4       	brne	.+24     	; 0x1ee8 <free+0xbe>
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	84 0f       	add	r24, r20
    1ed6:	95 1f       	adc	r25, r21
    1ed8:	02 96       	adiw	r24, 0x02	; 2
    1eda:	e9 01       	movw	r28, r18
    1edc:	99 83       	std	Y+1, r25	; 0x01
    1ede:	88 83       	st	Y, r24
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	9b 83       	std	Y+3, r25	; 0x03
    1ee6:	8a 83       	std	Y+2, r24	; 0x02
    1ee8:	e0 e0       	ldi	r30, 0x00	; 0
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	12 96       	adiw	r26, 0x02	; 2
    1eee:	8d 91       	ld	r24, X+
    1ef0:	9c 91       	ld	r25, X
    1ef2:	13 97       	sbiw	r26, 0x03	; 3
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <free+0xd4>
    1ef8:	fd 01       	movw	r30, r26
    1efa:	dc 01       	movw	r26, r24
    1efc:	f7 cf       	rjmp	.-18     	; 0x1eec <free+0xc2>
    1efe:	8d 91       	ld	r24, X+
    1f00:	9c 91       	ld	r25, X
    1f02:	11 97       	sbiw	r26, 0x01	; 1
    1f04:	9d 01       	movw	r18, r26
    1f06:	2e 5f       	subi	r18, 0xFE	; 254
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <__brkval>
    1f12:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <__brkval+0x1>
    1f16:	28 17       	cp	r18, r24
    1f18:	39 07       	cpc	r19, r25
    1f1a:	69 f4       	brne	.+26     	; 0x1f36 <free+0x10c>
    1f1c:	30 97       	sbiw	r30, 0x00	; 0
    1f1e:	29 f4       	brne	.+10     	; 0x1f2a <free+0x100>
    1f20:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <__flp+0x1>
    1f24:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <__flp>
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <free+0x104>
    1f2a:	13 82       	std	Z+3, r1	; 0x03
    1f2c:	12 82       	std	Z+2, r1	; 0x02
    1f2e:	b0 93 27 03 	sts	0x0327, r27	; 0x800327 <__brkval+0x1>
    1f32:	a0 93 26 03 	sts	0x0326, r26	; 0x800326 <__brkval>
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	08 95       	ret

00001f3c <_exit>:
    1f3c:	f8 94       	cli

00001f3e <__stop_program>:
    1f3e:	ff cf       	rjmp	.-2      	; 0x1f3e <__stop_program>
