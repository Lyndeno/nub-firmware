
nub_long_range_328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001894  00001928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020c  0080010c  0080010c  00001934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a4  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001046  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d2  00000000  00000000  00005ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00007498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a78  00000000  00000000  00007974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c03  00000000  00000000  000083ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000490  00000000  00000000  0000afef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_28>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 e9       	ldi	r30, 0x94	; 148
      c8:	f8 e1       	ldi	r31, 0x18	; 24
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 30       	cpi	r26, 0x0C	; 12
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	ac e0       	ldi	r26, 0x0C	; 12
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a8 31       	cpi	r26, 0x18	; 24
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
      ea:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TXWrite>:
		return 1;
	}
	else{
		return 0;
	}
}
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	66 23       	and	r22, r22
     100:	31 f1       	breq	.+76     	; 0x14e <TXWrite+0x5c>
     102:	61 50       	subi	r22, 0x01	; 1
     104:	e8 2e       	mov	r14, r24
     106:	f9 2e       	mov	r15, r25
     108:	a8 ec       	ldi	r26, 0xC8	; 200
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	0e ec       	ldi	r16, 0xCE	; 206
     10e:	10 e0       	ldi	r17, 0x00	; 0
     110:	e0 ec       	ldi	r30, 0xC0	; 192
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	26 ec       	ldi	r18, 0xC6	; 198
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	01 c0       	rjmp	.+2      	; 0x11c <TXWrite+0x2a>
     11a:	68 2f       	mov	r22, r24
     11c:	41 15       	cp	r20, r1
     11e:	51 05       	cpc	r21, r1
     120:	41 f4       	brne	.+16     	; 0x132 <TXWrite+0x40>
     122:	80 81       	ld	r24, Z
     124:	85 ff       	sbrs	r24, 5
     126:	fd cf       	rjmp	.-6      	; 0x122 <TXWrite+0x30>
     128:	e7 01       	movw	r28, r14
     12a:	88 81       	ld	r24, Y
     12c:	e9 01       	movw	r28, r18
     12e:	88 83       	st	Y, r24
     130:	07 c0       	rjmp	.+14     	; 0x140 <TXWrite+0x4e>
     132:	8c 91       	ld	r24, X
     134:	85 ff       	sbrs	r24, 5
     136:	fd cf       	rjmp	.-6      	; 0x132 <TXWrite+0x40>
     138:	e7 01       	movw	r28, r14
     13a:	88 81       	ld	r24, Y
     13c:	e8 01       	movw	r28, r16
     13e:	88 83       	st	Y, r24
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	86 0f       	add	r24, r22
     144:	df ef       	ldi	r29, 0xFF	; 255
     146:	ed 1a       	sub	r14, r29
     148:	fd 0a       	sbc	r15, r29
     14a:	61 11       	cpse	r22, r1
     14c:	e6 cf       	rjmp	.-52     	; 0x11a <TXWrite+0x28>
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <getChar>:
     15c:	81 11       	cpse	r24, r1
     15e:	19 c0       	rjmp	.+50     	; 0x192 <getChar+0x36>
     160:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
     164:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
     168:	98 17       	cp	r25, r24
     16a:	61 f1       	breq	.+88     	; 0x1c4 <getChar+0x68>
     16c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <unread0Bytes>
     170:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <unread0Bytes+0x1>
     174:	21 50       	subi	r18, 0x01	; 1
     176:	31 09       	sbc	r19, r1
     178:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <unread0Bytes+0x1>
     17c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <unread0Bytes>
     180:	e9 2f       	mov	r30, r25
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	ec 5e       	subi	r30, 0xEC	; 236
     186:	fd 4f       	sbci	r31, 0xFD	; 253
     188:	80 81       	ld	r24, Z
     18a:	9f 5f       	subi	r25, 0xFF	; 255
     18c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rx0ReadPos>
     190:	08 95       	ret
     192:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx1ReadPos>
     196:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx1WritePos>
     19a:	98 17       	cp	r25, r24
     19c:	a9 f0       	breq	.+42     	; 0x1c8 <getChar+0x6c>
     19e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
     1a2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
     1a6:	21 50       	subi	r18, 0x01	; 1
     1a8:	31 09       	sbc	r19, r1
     1aa:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
     1ae:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
     1b2:	e9 2f       	mov	r30, r25
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ec 5e       	subi	r30, 0xEC	; 236
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	80 81       	ld	r24, Z
     1bc:	9f 5f       	subi	r25, 0xFF	; 255
     1be:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rx1ReadPos>
     1c2:	08 95       	ret
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	08 95       	ret
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	08 95       	ret

000001cc <skipBuffer>:
     1cc:	81 11       	cpse	r24, r1
     1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <skipBuffer+0x16>
     1d0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <unread0Bytes+0x1>
     1d4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <unread0Bytes>
     1d8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
     1dc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
     1e0:	08 95       	ret
     1e2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     1e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     1ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx1WritePos>
     1ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx1ReadPos>
     1f2:	08 95       	ret

000001f4 <BytesUnRead>:
     1f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
     1f8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
     1fc:	08 95       	ret

000001fe <__vector_18>:




// Interrupt for receiving UART data from RX 0
ISR(USART0_RX_vect){
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	8f 93       	push	r24
     20a:	9f 93       	push	r25
     20c:	ef 93       	push	r30
     20e:	ff 93       	push	r31
	unread0Bytes++;
     210:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
     214:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
     218:	01 96       	adiw	r24, 0x01	; 1
     21a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <unread0Bytes+0x1>
     21e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <unread0Bytes>
	rx0Buffer[rx0WritePos] = UDR0;
     222:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
     226:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     22a:	e8 2f       	mov	r30, r24
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	ec 5e       	subi	r30, 0xEC	; 236
     230:	fd 4f       	sbci	r31, 0xFD	; 253
     232:	90 83       	st	Z, r25
	rx0WritePos++;
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx0WritePos>
	{
		rx0WritePos = 0;
	}
	
	
}
     23a:	ff 91       	pop	r31
     23c:	ef 91       	pop	r30
     23e:	9f 91       	pop	r25
     240:	8f 91       	pop	r24
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <__vector_28>:

ISR(USART1_RX_vect){
     24c:	1f 92       	push	r1
     24e:	0f 92       	push	r0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	ef 93       	push	r30
     25c:	ff 93       	push	r31
	unread1Bytes++;
     25e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     262:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     26c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	rx1Buffer[rx1WritePos] = UDR1;
     270:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx1WritePos>
     274:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
     278:	e8 2f       	mov	r30, r24
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	ec 5e       	subi	r30, 0xEC	; 236
     27e:	fe 4f       	sbci	r31, 0xFE	; 254
     280:	90 83       	st	Z, r25
	rx1WritePos++;
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx1WritePos>
	
	if(rx1WritePos >= RX1_BUFFER_SIZE)
	{
		rx1WritePos = 0;
	}
}
     288:	ff 91       	pop	r31
     28a:	ef 91       	pop	r30
     28c:	9f 91       	pop	r25
     28e:	8f 91       	pop	r24
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <main>:
};



int main(void)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
     2a2:	c9 5d       	subi	r28, 0xD9	; 217
     2a4:	d1 09       	sbc	r29, r1
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
	
	DDRE |= (1 << DDE1);
     2b0:	69 9a       	sbi	0x0d, 1	; 13
	PORTE |= (1 << LED);
     2b2:	71 9a       	sbi	0x0e, 1	; 14
	USART_setup(MYUBRR);
     2b4:	8c e0       	ldi	r24, 0x0C	; 12
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 10 0a 	call	0x1420	; 0x1420 <USART_setup>
	sei();		// Enabling interrupts 
     2bc:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2be:	87 ea       	ldi	r24, 0xA7	; 167
     2c0:	91 e6       	ldi	r25, 0x61	; 97
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x28>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x2e>
     2c8:	00 00       	nop
	uint8_t *networkPtr2 = &network;
	struct myConData *myConsptr, myCons;
	myConsptr = &myCons;
	uint16_t networkSize = sizeof(network);
	
	myDSN = setupTransceiver();
     2ca:	0e 94 28 0a 	call	0x1450	; 0x1450 <setupTransceiver>
     2ce:	fe 01       	movw	r30, r28
     2d0:	31 96       	adiw	r30, 0x01	; 1
     2d2:	9e 01       	movw	r18, r28
     2d4:	2a 54       	subi	r18, 0x4A	; 74
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
     2d8:	11 92       	st	Z+, r1
	uint16_t networkSize = sizeof(network);
	
	myDSN = setupTransceiver();
	
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
     2da:	2e 17       	cp	r18, r30
     2dc:	3f 07       	cpc	r19, r31
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0x3e>
     2e0:	9e 01       	movw	r18, r28
     2e2:	2a 54       	subi	r18, 0x4A	; 74
     2e4:	3f 4f       	sbci	r19, 0xFF	; 255
     2e6:	68 2f       	mov	r22, r24
     2e8:	79 2f       	mov	r23, r25
     2ea:	de 01       	movw	r26, r28
     2ec:	12 96       	adiw	r26, 0x02	; 2
     2ee:	ce 01       	movw	r24, r28
     2f0:	06 96       	adiw	r24, 0x06	; 6
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	
	for(int i = 0; i < 4; i++){
		myCons.myDSN[i] = myDSN[i];
     2f2:	fb 01       	movw	r30, r22
     2f4:	40 81       	ld	r20, Z
     2f6:	f9 01       	movw	r30, r18
     2f8:	41 93       	st	Z+, r20
     2fa:	9f 01       	movw	r18, r30
		network.device[0].deviceDSN[i] = myDSN[i];
     2fc:	fb 01       	movw	r30, r22
     2fe:	41 91       	ld	r20, Z+
     300:	bf 01       	movw	r22, r30
     302:	4d 93       	st	X+, r20
	uint8_t value = 0x00;
	for (uint8_t i = 0; i < sizeof(network); i++){
		*(networkPtr2 + i*sizeof(uint8_t))  = value;
	}
	
	for(int i = 0; i < 4; i++){
     304:	a8 17       	cp	r26, r24
     306:	b9 07       	cpc	r27, r25
     308:	a1 f7       	brne	.-24     	; 0x2f2 <main+0x58>
     30a:	e6 eb       	ldi	r30, 0xB6	; 182
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ec 0f       	add	r30, r28
     310:	fd 1f       	adc	r31, r29
     312:	72 96       	adiw	r30, 0x12	; 18
     314:	de 01       	movw	r26, r28
     316:	54 96       	adiw	r26, 0x14	; 20
     318:	86 eb       	ldi	r24, 0xB6	; 182
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	8c 0f       	add	r24, r28
     31e:	9d 1f       	adc	r25, r29
     320:	48 96       	adiw	r24, 0x18	; 24
		myCons.myDSN[i] = myDSN[i];
		network.device[0].deviceDSN[i] = myDSN[i];
	}
	
	for(int i = 0; i <6; i++){
		myCons.myPhoneConnections[0][i] = 0x22;
     322:	22 e2       	ldi	r18, 0x22	; 34
     324:	21 93       	st	Z+, r18
		network.device[0].phoneConnections[0][i] = 0x22;
     326:	2d 93       	st	X+, r18
	for(int i = 0; i < 4; i++){
		myCons.myDSN[i] = myDSN[i];
		network.device[0].deviceDSN[i] = myDSN[i];
	}
	
	for(int i = 0; i <6; i++){
     328:	e8 17       	cp	r30, r24
     32a:	f9 07       	cpc	r31, r25
     32c:	d9 f7       	brne	.-10     	; 0x324 <main+0x8a>
		myCons.myPhoneConnections[0][i] = 0x22;
		network.device[0].phoneConnections[0][i] = 0x22;
	}
	
	myCons.myNumOfNubCon = 0;
     32e:	c6 54       	subi	r28, 0x46	; 70
     330:	df 4f       	sbci	r29, 0xFF	; 255
     332:	18 82       	st	Y, r1
     334:	ca 5b       	subi	r28, 0xBA	; 186
     336:	d0 40       	sbci	r29, 0x00	; 0
	myCons.myNumOfPhoneCon = 1;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	c5 54       	subi	r28, 0x45	; 69
     33c:	df 4f       	sbci	r29, 0xFF	; 255
     33e:	88 83       	st	Y, r24
     340:	cb 5b       	subi	r28, 0xBB	; 187
     342:	d0 40       	sbci	r29, 0x00	; 0
	network.numOfDevices = 1;
     344:	89 83       	std	Y+1, r24	; 0x01
	network.device[0].numOfNubCon = 0;
     346:	1e 82       	std	Y+6, r1	; 0x06
	network.device[0].numOfPhoneCon = 1;
     348:	8f 83       	std	Y+7, r24	; 0x07
	
	uint8_t firstCon = 1;
	skipBuffer(0);
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <skipBuffer>
	myCons.myNumOfPhoneCon = 1;
	network.numOfDevices = 1;
	network.device[0].numOfNubCon = 0;
	network.device[0].numOfPhoneCon = 1;
	
	uint8_t firstCon = 1;
     352:	11 e0       	ldi	r17, 0x01	; 1
	
    while (1){
	
		//TXWrite(var,6,0);
		//TXWrite(networkPtr,sizeof(network),0);
		if (firstCon == 1){
     354:	11 30       	cpi	r17, 0x01	; 1
     356:	79 f4       	brne	.+30     	; 0x376 <main+0xdc>
     358:	ff e3       	ldi	r31, 0x3F	; 63
     35a:	22 e4       	ldi	r18, 0x42	; 66
     35c:	8f e0       	ldi	r24, 0x0F	; 15
     35e:	f1 50       	subi	r31, 0x01	; 1
     360:	20 40       	sbci	r18, 0x00	; 0
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	e1 f7       	brne	.-8      	; 0x35e <main+0xc4>
     366:	00 c0       	rjmp	.+0      	; 0x368 <main+0xce>
     368:	00 00       	nop
			_delay_ms(5000);
			broadcastCon(0x00,myConsptr);
     36a:	be 01       	movw	r22, r28
     36c:	6a 54       	subi	r22, 0x4A	; 74
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <broadcastCon>
		}
		
		//broadcastCon(0x01,networkPtr);
		//sendMessageSimple(myDSN,connectedDevices,var,6);
		
		if(BytesUnRead() > 0){
     376:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BytesUnRead>
     37a:	18 16       	cp	r1, r24
     37c:	19 06       	cpc	r1, r25
     37e:	7c f4       	brge	.+30     	; 0x39e <main+0x104>
			
			handleMessages(myCons.myDSN,networkPtr,networkSize,networkPtr2,myConsptr);
     380:	8e 01       	movw	r16, r28
     382:	0a 54       	subi	r16, 0x4A	; 74
     384:	1f 4f       	sbci	r17, 0xFF	; 255
     386:	9e 01       	movw	r18, r28
     388:	2f 5f       	subi	r18, 0xFF	; 255
     38a:	3f 4f       	sbci	r19, 0xFF	; 255
     38c:	45 eb       	ldi	r20, 0xB5	; 181
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	b9 01       	movw	r22, r18
     392:	c8 01       	movw	r24, r16
     394:	0e 94 92 06 	call	0xd24	; 0xd24 <handleMessages>
			firstCon = 0;
			
			skipBuffer();
     398:	0e 94 e6 00 	call	0x1cc	; 0x1cc <skipBuffer>
		//sendMessageSimple(myDSN,connectedDevices,var,6);
		
		if(BytesUnRead() > 0){
			
			handleMessages(myCons.myDSN,networkPtr,networkSize,networkPtr2,myConsptr);
			firstCon = 0;
     39c:	10 e0       	ldi	r17, 0x00	; 0
     39e:	e7 ea       	ldi	r30, 0xA7	; 167
     3a0:	f1 e6       	ldi	r31, 0x61	; 97
     3a2:	31 97       	sbiw	r30, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <main+0x108>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x10e>
     3a8:	00 00       	nop
     3aa:	d4 cf       	rjmp	.-88     	; 0x354 <main+0xba>

000003ac <writeDestDSN>:
	TXWrite(destPhoneAdd,6,0);			// mac address
	TXWrite(srcPhoneAdd,6,0);			// mac address
	
	TXWrite(msg, msgSize,0);
	
}
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <writeDestDSN+0xe>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <writeDestDSN+0x10>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	29 83       	std	Y+1, r18	; 0x01
     3c4:	32 e0       	ldi	r19, 0x02	; 2
     3c6:	3a 83       	std	Y+2, r19	; 0x02
     3c8:	37 e6       	ldi	r19, 0x67	; 103
     3ca:	3b 83       	std	Y+3, r19	; 0x03
     3cc:	2c 83       	std	Y+4, r18	; 0x04
     3ce:	5d 98       	cbi	0x0b, 5	; 11
     3d0:	8c 01       	movw	r16, r24
     3d2:	7c 01       	movw	r14, r24
     3d4:	24 e0       	ldi	r18, 0x04	; 4
     3d6:	e2 0e       	add	r14, r18
     3d8:	f1 1c       	adc	r15, r1
     3da:	f8 01       	movw	r30, r16
     3dc:	81 91       	ld	r24, Z+
     3de:	8f 01       	movw	r16, r30
     3e0:	8c 83       	std	Y+4, r24	; 0x04
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	9f 5f       	subi	r25, 0xFF	; 255
     3e6:	9b 83       	std	Y+3, r25	; 0x03
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	64 e0       	ldi	r22, 0x04	; 4
     3ee:	ce 01       	movw	r24, r28
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     3f6:	0e 15       	cp	r16, r14
     3f8:	1f 05       	cpc	r17, r15
     3fa:	79 f7       	brne	.-34     	; 0x3da <writeDestDSN+0x2e>
     3fc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <skipBuffer>
     400:	83 ec       	ldi	r24, 0xC3	; 195
     402:	99 e0       	ldi	r25, 0x09	; 9
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
     40c:	5d 9a       	sbi	0x0b, 5	; 11
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	08 95       	ret

00000424 <sendNetworkData>:

void sendNetworkData(uint8_t *networkPtr, uint16_t networkSize, uint8_t myDSN[], uint8_t destDSN[],uint8_t newCon){
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	27 97       	sbiw	r28, 0x07	; 7
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	7c 01       	movw	r14, r24
     442:	16 2f       	mov	r17, r22
     444:	fa 01       	movw	r30, r20
     446:	c9 01       	movw	r24, r18
	uint8_t msgType = 0x03;
	uint8_t msgHeader[] = {msgType,myDSN[0],myDSN[1],myDSN[2],myDSN[3],networkSize,newCon};
     448:	23 e0       	ldi	r18, 0x03	; 3
     44a:	29 83       	std	Y+1, r18	; 0x01
     44c:	20 81       	ld	r18, Z
     44e:	2a 83       	std	Y+2, r18	; 0x02
     450:	21 81       	ldd	r18, Z+1	; 0x01
     452:	2b 83       	std	Y+3, r18	; 0x03
     454:	22 81       	ldd	r18, Z+2	; 0x02
     456:	2c 83       	std	Y+4, r18	; 0x04
     458:	23 81       	ldd	r18, Z+3	; 0x03
     45a:	2d 83       	std	Y+5, r18	; 0x05
     45c:	6e 83       	std	Y+6, r22	; 0x06
     45e:	0f 83       	std	Y+7, r16	; 0x07
	
	writeDestDSN(destDSN);
     460:	0e 94 d6 01 	call	0x3ac	; 0x3ac <writeDestDSN>
	TXWrite(msgHeader,7,0);
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	67 e0       	ldi	r22, 0x07	; 7
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	TXWrite(networkPtr,networkSize,0);
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	61 2f       	mov	r22, r17
     478:	c7 01       	movw	r24, r14
     47a:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	
}
     47e:	27 96       	adiw	r28, 0x07	; 7
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <sendAck>:

// Sends an acknowledge through HUMPRO back to NUB sender
void sendAck(uint8_t srcDSN[], uint8_t destDSN[]){
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	00 d0       	rcall	.+0      	; 0x49e <sendAck+0x6>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <sendAck+0x8>
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <sendAck+0xa>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	fc 01       	movw	r30, r24
     4a8:	cb 01       	movw	r24, r22
	
	uint8_t msgType = 0x04;			//Acknowledge
	uint8_t msgHeader[] = {msgType,srcDSN[0],srcDSN[1],srcDSN[2],srcDSN[3]};
     4aa:	24 e0       	ldi	r18, 0x04	; 4
     4ac:	29 83       	std	Y+1, r18	; 0x01
     4ae:	20 81       	ld	r18, Z
     4b0:	2a 83       	std	Y+2, r18	; 0x02
     4b2:	21 81       	ldd	r18, Z+1	; 0x01
     4b4:	2b 83       	std	Y+3, r18	; 0x03
     4b6:	22 81       	ldd	r18, Z+2	; 0x02
     4b8:	2c 83       	std	Y+4, r18	; 0x04
     4ba:	23 81       	ldd	r18, Z+3	; 0x03
     4bc:	2d 83       	std	Y+5, r18	; 0x05
	
	uint8_t msg[] = {0x01};
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	2e 83       	std	Y+6, r18	; 0x06
	writeDestDSN(destDSN);
     4c2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <writeDestDSN>
	
	TXWrite(msgHeader,5,0);
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	65 e0       	ldi	r22, 0x05	; 5
     4cc:	ce 01       	movw	r24, r28
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	TXWrite(msg,1,0);
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	ce 01       	movw	r24, r28
     4dc:	06 96       	adiw	r24, 0x06	; 6
     4de:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	
}
     4e2:	26 96       	adiw	r28, 0x06	; 6
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	de bf       	out	0x3e, r29	; 62
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	cd bf       	out	0x3d, r28	; 61
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <broadcastCon>:


// Initial broadcast to connect to other devices
void broadcastCon(uint8_t txPWR, uint8_t *myCons2){
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	2b 97       	sbiw	r28, 0x0b	; 11
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	7b 01       	movw	r14, r22
	PORTD &= ~(1 << CMD);	// cmd mode
     510:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t TXPower[4]	= {0xFF,0x02,0x4D,txPWR};
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	99 83       	std	Y+1, r25	; 0x01
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	9a 83       	std	Y+2, r25	; 0x02
     51a:	9d e4       	ldi	r25, 0x4D	; 77
     51c:	9b 83       	std	Y+3, r25	; 0x03
     51e:	8c 83       	std	Y+4, r24	; 0x04
	TXWrite(TXPower,4,0);
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	64 e0       	ldi	r22, 0x04	; 4
     526:	ce 01       	movw	r24, r28
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     52e:	8b e4       	ldi	r24, 0x4B	; 75
     530:	9d e1       	ldi	r25, 0x1D	; 29
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <broadcastCon+0x3e>
     536:	00 c0       	rjmp	.+0      	; 0x538 <broadcastCon+0x44>
     538:	00 00       	nop
	_delay_ms(30);
	getChar(0);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	getChar(0);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	getChar(0);
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	getChar(0);
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t destDSNCMD[] = {0xFF,0x03,0x68,0xFE,0x7F};		// Putting broadcast address
     552:	85 e0       	ldi	r24, 0x05	; 5
     554:	e6 e0       	ldi	r30, 0x06	; 6
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	de 01       	movw	r26, r28
     55a:	15 96       	adiw	r26, 0x05	; 5
     55c:	01 90       	ld	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	8a 95       	dec	r24
     562:	e1 f7       	brne	.-8      	; 0x55c <broadcastCon+0x68>
	
	uint8_t msgType = 0x05;			// Connection broadcast
	uint8_t myDataSize = 4 + 1 + 1 + MAX_NUB_CON*4 + MAX_PHONE_CON*6;
	uint8_t msgHeader[] = {msgType,myDataSize};
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	8a 87       	std	Y+10, r24	; 0x0a
     568:	84 e2       	ldi	r24, 0x24	; 36
     56a:	8b 87       	std	Y+11, r24	; 0x0b
     56c:	14 e0       	ldi	r17, 0x04	; 4
	
	
	
	for (uint8_t i = 0; i < 4; i++){
		
		TXWrite(destDSNCMD,5,0);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	65 e0       	ldi	r22, 0x05	; 5
     574:	ce 01       	movw	r24, r28
     576:	05 96       	adiw	r24, 0x05	; 5
     578:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
		getChar(0);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		destDSNCMD[2] = destDSNCMD[2] + 0x01;
     582:	8f 81       	ldd	r24, Y+7	; 0x07
     584:	8f 5f       	subi	r24, 0xFF	; 255
     586:	8f 83       	std	Y+7, r24	; 0x07
     588:	83 ec       	ldi	r24, 0xC3	; 195
     58a:	99 e0       	ldi	r25, 0x09	; 9
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <broadcastCon+0x98>
     590:	00 c0       	rjmp	.+0      	; 0x592 <broadcastCon+0x9e>
     592:	00 00       	nop
     594:	11 50       	subi	r17, 0x01	; 1
	// [msgType,myDatasize,mycons.DSN, mycons.myNumOfNubCon, mycons.myNumOfPhoneCon,mycons.myNubConnections[MAX_NUB_CON][4]
	//  ,mycons.myPhoneConnections[MAX_PHONE_CON][6]
	
	
	
	for (uint8_t i = 0; i < 4; i++){
     596:	59 f7       	brne	.-42     	; 0x56e <broadcastCon+0x7a>
     598:	83 ed       	ldi	r24, 0xD3	; 211
     59a:	90 e3       	ldi	r25, 0x30	; 48
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <broadcastCon+0xa8>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <broadcastCon+0xae>
     5a2:	00 00       	nop
		destDSNCMD[2] = destDSNCMD[2] + 0x01;
		_delay_ms(10);
	}
	
	_delay_ms(50);
	PORTD |= (1 << CMD);		// Transmission mode
     5a4:	5d 9a       	sbi	0x0b, 5	; 11
     5a6:	83 ec       	ldi	r24, 0xC3	; 195
     5a8:	99 e0       	ldi	r25, 0x09	; 9
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <broadcastCon+0xb6>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <broadcastCon+0xbc>
     5b0:	00 00       	nop
	_delay_ms(10);
	//while(uartReady());
	TXWrite(msgHeader,2,0);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	62 e0       	ldi	r22, 0x02	; 2
     5b8:	ce 01       	movw	r24, r28
     5ba:	0a 96       	adiw	r24, 0x0a	; 10
     5bc:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	//while(uartReady());
	TXWrite(myCons2,myDataSize,0);	 // Sending connected devices structure
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	64 e2       	ldi	r22, 0x24	; 36
     5c6:	c7 01       	movw	r24, r14
     5c8:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	
	
}
     5cc:	2b 96       	adiw	r28, 0x0b	; 11
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	1f 91       	pop	r17
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	08 95       	ret

000005e4 <updateNetworks>:


// Compares the received network information from another NUB to local information
void updateNetworks(struct networkStructure *networkPtr, uint16_t networkSize,uint8_t *networkPtr2,struct myConData* myCons, uint8_t newCon){
     5e4:	2f 92       	push	r2
     5e6:	3f 92       	push	r3
     5e8:	4f 92       	push	r4
     5ea:	5f 92       	push	r5
     5ec:	6f 92       	push	r6
     5ee:	7f 92       	push	r7
     5f0:	8f 92       	push	r8
     5f2:	9f 92       	push	r9
     5f4:	af 92       	push	r10
     5f6:	bf 92       	push	r11
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	29 97       	sbiw	r28, 0x09	; 9
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
     618:	3c 01       	movw	r6, r24
     61a:	7a 83       	std	Y+2, r23	; 0x02
     61c:	69 83       	std	Y+1, r22	; 0x01
     61e:	7a 01       	movw	r14, r20
     620:	29 01       	movw	r4, r18
	uint8_t networkUpdated = 0;
	uint8_t count = 0;
	uint8_t flag = 0;
	
	// Make sure all network data has been received
	while (unread0Bytes >= networkSize){
     622:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
     626:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
     62a:	86 17       	cp	r24, r22
     62c:	97 07       	cpc	r25, r23
     62e:	08 f0       	brcs	.+2      	; 0x632 <updateNetworks+0x4e>
     630:	58 c3       	rjmp	.+1712   	; 0xce2 <__stack+0x3e3>
     632:	08 c0       	rjmp	.+16     	; 0x644 <updateNetworks+0x60>
     634:	a3 ec       	ldi	r26, 0xC3	; 195
     636:	b9 e0       	ldi	r27, 0x09	; 9
     638:	11 97       	sbiw	r26, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <updateNetworks+0x54>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <updateNetworks+0x5a>
     63e:	00 00       	nop
     640:	81 50       	subi	r24, 0x01	; 1
		_delay_ms(10);
		if ( count > 100 ){
     642:	29 f4       	brne	.+10     	; 0x64e <updateNetworks+0x6a>
			break;
		}
		count ++;
	}
	// Copying all network data received 
	for (uint8_t i = 0; i < networkSize; i ++){
     644:	29 81       	ldd	r18, Y+1	; 0x01
     646:	3a 81       	ldd	r19, Y+2	; 0x02
     648:	23 2b       	or	r18, r19
     64a:	59 f4       	brne	.+22     	; 0x662 <updateNetworks+0x7e>
     64c:	1d c0       	rjmp	.+58     	; 0x688 <updateNetworks+0xa4>
	uint8_t networkUpdated = 0;
	uint8_t count = 0;
	uint8_t flag = 0;
	
	// Make sure all network data has been received
	while (unread0Bytes >= networkSize){
     64e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <unread0Bytes>
     652:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <unread0Bytes+0x1>
     656:	49 81       	ldd	r20, Y+1	; 0x01
     658:	5a 81       	ldd	r21, Y+2	; 0x02
     65a:	24 17       	cp	r18, r20
     65c:	35 07       	cpc	r19, r21
     65e:	50 f7       	brcc	.-44     	; 0x634 <updateNetworks+0x50>
     660:	f1 cf       	rjmp	.-30     	; 0x644 <updateNetworks+0x60>
			break;
		}
		count ++;
	}
	// Copying all network data received 
	for (uint8_t i = 0; i < networkSize; i ++){
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	10 e0       	ldi	r17, 0x00	; 0
		
		*(networkPtr2 + i*sizeof(uint8_t) ) = getChar(0);
     668:	67 01       	movw	r12, r14
     66a:	c8 0e       	add	r12, r24
     66c:	d9 1e       	adc	r13, r25
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     674:	d6 01       	movw	r26, r12
     676:	8c 93       	st	X, r24
			break;
		}
		count ++;
	}
	// Copying all network data received 
	for (uint8_t i = 0; i < networkSize; i ++){
     678:	1f 5f       	subi	r17, 0xFF	; 255
     67a:	81 2f       	mov	r24, r17
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	e9 81       	ldd	r30, Y+1	; 0x01
     680:	fa 81       	ldd	r31, Y+2	; 0x02
     682:	8e 17       	cp	r24, r30
     684:	9f 07       	cpc	r25, r31
     686:	80 f3       	brcs	.-32     	; 0x668 <updateNetworks+0x84>
		
		*(networkPtr2 + i*sizeof(uint8_t) ) = getChar(0);
					 
	}
	TXWrite(networkPtr2,networkSize,0);
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	69 81       	ldd	r22, Y+1	; 0x01
     68e:	c7 01       	movw	r24, r14
     690:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	
	// Responding to the connection broadcast if newCon == 1
	if (newCon == 1){
     694:	01 30       	cpi	r16, 0x01	; 1
     696:	09 f0       	breq	.+2      	; 0x69a <updateNetworks+0xb6>
     698:	4f c1       	rjmp	.+670    	; 0x938 <__stack+0x39>
		// list add the local connection to that devices nub list
		// If this device is in its list but not mine, add to local list
		
		uint8_t foundInLocalList = 0;
		uint8_t foundInNetworkList = 0;
		myCons->myNumOfNubCon = 0;
     69a:	d2 01       	movw	r26, r4
     69c:	14 96       	adiw	r26, 0x04	; 4
     69e:	1c 92       	st	X, r1
		for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
     6a0:	f3 01       	movw	r30, r6
     6a2:	f0 81       	ld	r31, Z
     6a4:	f9 83       	std	Y+1, r31	; 0x01
     6a6:	f1 11       	cpse	r31, r1
     6a8:	fc c0       	rjmp	.+504    	; 0x8a2 <updateNetworks+0x2be>
     6aa:	7e c2       	rjmp	.+1276   	; 0xba8 <__stack+0x2a9>
			// Searching through local list to see if device is in it
			for(uint8_t myDeviceNum = 0; myDeviceNum < myCons->myNumOfNubCon; myDeviceNum++){
				for (uint8_t i = 0; i < 4; i++){
					if (myCons->myNubConnections[myDeviceNum][i] != networkPtr->device[deviceNum].deviceDSN[i]){
     6ac:	ff 24       	eor	r15, r15
     6ae:	f3 94       	inc	r15
						foundInLocalList = 1;
						
					}
				}
				// Now Searching their nub connection list to see if local nub is connected
				for(uint8_t theirDeviceNum = 0; theirDeviceNum < networkPtr->device[deviceNum].numOfNubCon; theirDeviceNum++){
     6b0:	ee 81       	ldd	r30, Y+6	; 0x06
     6b2:	ff 81       	ldd	r31, Y+7	; 0x07
     6b4:	a0 81       	ld	r26, Z
     6b6:	aa 23       	and	r26, r26
     6b8:	d9 f1       	breq	.+118    	; 0x730 <updateNetworks+0x14c>
					for (uint8_t j = 0; j < 4; j++){
						if (myCons->myDSN[j] != networkPtr->device[deviceNum].nubConnections[theirDeviceNum][j]){
     6ba:	d2 01       	movw	r26, r4
     6bc:	6c 91       	ld	r22, X
     6be:	10 e0       	ldi	r17, 0x00	; 0
     6c0:	1c c0       	rjmp	.+56     	; 0x6fa <updateNetworks+0x116>
     6c2:	a8 85       	ldd	r26, Y+8	; 0x08
     6c4:	b9 85       	ldd	r27, Y+9	; 0x09
     6c6:	ed 90       	ld	r14, X+
     6c8:	b9 87       	std	Y+9, r27	; 0x09
     6ca:	a8 87       	std	Y+8, r26	; 0x08
     6cc:	51 91       	ld	r21, Z+
     6ce:	e5 12       	cpse	r14, r21
     6d0:	0e c0       	rjmp	.+28     	; 0x6ee <updateNetworks+0x10a>
							break;
						}
						if (j >=3){
     6d2:	43 30       	cpi	r20, 0x03	; 3
     6d4:	40 f0       	brcs	.+16     	; 0x6e6 <updateNetworks+0x102>
							myCons->myNumOfNubCon++;
     6d6:	d2 01       	movw	r26, r4
     6d8:	14 96       	adiw	r26, 0x04	; 4
     6da:	5c 91       	ld	r21, X
     6dc:	14 97       	sbiw	r26, 0x04	; 4
     6de:	5f 5f       	subi	r21, 0xFF	; 255
     6e0:	14 96       	adiw	r26, 0x04	; 4
     6e2:	5c 93       	st	X, r21
							foundInNetworkList = 1;
     6e4:	79 2d       	mov	r23, r9
						
					}
				}
				// Now Searching their nub connection list to see if local nub is connected
				for(uint8_t theirDeviceNum = 0; theirDeviceNum < networkPtr->device[deviceNum].numOfNubCon; theirDeviceNum++){
					for (uint8_t j = 0; j < 4; j++){
     6e6:	4f 5f       	subi	r20, 0xFF	; 255
     6e8:	44 30       	cpi	r20, 0x04	; 4
     6ea:	59 f7       	brne	.-42     	; 0x6c2 <updateNetworks+0xde>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <updateNetworks+0x10a>
						foundInLocalList = 1;
						
					}
				}
				// Now Searching their nub connection list to see if local nub is connected
				for(uint8_t theirDeviceNum = 0; theirDeviceNum < networkPtr->device[deviceNum].numOfNubCon; theirDeviceNum++){
     6ee:	1f 5f       	subi	r17, 0xFF	; 255
     6f0:	ee 81       	ldd	r30, Y+6	; 0x06
     6f2:	ff 81       	ldd	r31, Y+7	; 0x07
     6f4:	a0 81       	ld	r26, Z
     6f6:	1a 17       	cp	r17, r26
     6f8:	d8 f4       	brcc	.+54     	; 0x730 <updateNetworks+0x14c>
					for (uint8_t j = 0; j < 4; j++){
						if (myCons->myDSN[j] != networkPtr->device[deviceNum].nubConnections[theirDeviceNum][j]){
     6fa:	fc 01       	movw	r30, r24
     6fc:	e1 0f       	add	r30, r17
     6fe:	f1 1d       	adc	r31, r1
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	e6 0d       	add	r30, r6
     70a:	f7 1d       	adc	r31, r7
     70c:	47 81       	ldd	r20, Z+7	; 0x07
     70e:	64 13       	cpse	r22, r20
     710:	ee cf       	rjmp	.-36     	; 0x6ee <updateNetworks+0x10a>
     712:	d2 01       	movw	r26, r4
     714:	11 96       	adiw	r26, 0x01	; 1
     716:	f9 01       	movw	r30, r18
     718:	e1 0f       	add	r30, r17
     71a:	f1 1d       	adc	r31, r1
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e6 0d       	add	r30, r6
     726:	f7 1d       	adc	r31, r7
     728:	40 e0       	ldi	r20, 0x00	; 0
     72a:	b9 87       	std	Y+9, r27	; 0x09
     72c:	a8 87       	std	Y+8, r26	; 0x08
     72e:	db cf       	rjmp	.-74     	; 0x6e6 <updateNetworks+0x102>
						}
					}
				}
				
				// Found in the local list that the device is connected, but overridden in network list so update network list connection
				if (foundInLocalList & !foundInNetworkList){
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	58 2d       	mov	r21, r8
     734:	77 23       	and	r23, r23
     736:	11 f0       	breq	.+4      	; 0x73c <updateNetworks+0x158>
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	ef 2d       	mov	r30, r15
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	4e 23       	and	r20, r30
     742:	5f 23       	and	r21, r31
     744:	45 2b       	or	r20, r21
     746:	a1 f1       	breq	.+104    	; 0x7b0 <updateNetworks+0x1cc>
     748:	7a 2f       	mov	r23, r26
					networkPtr->device[deviceNum].numOfNubCon++;
     74a:	44 e2       	ldi	r20, 0x24	; 36
     74c:	2b 81       	ldd	r18, Y+3	; 0x03
     74e:	3c 81       	ldd	r19, Y+4	; 0x04
     750:	42 9f       	mul	r20, r18
     752:	f0 01       	movw	r30, r0
     754:	43 9f       	mul	r20, r19
     756:	f0 0d       	add	r31, r0
     758:	11 24       	eor	r1, r1
     75a:	e6 0d       	add	r30, r6
     75c:	f7 1d       	adc	r31, r7
     75e:	7f 5f       	subi	r23, 0xFF	; 255
     760:	75 83       	std	Z+5, r23	; 0x05
     762:	d2 01       	movw	r26, r4
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
					for (uint8_t i = 0; i < 4; i++){
						networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
     768:	e4 e2       	ldi	r30, 0x24	; 36
     76a:	b9 01       	movw	r22, r18
     76c:	e6 9f       	mul	r30, r22
     76e:	90 01       	movw	r18, r0
     770:	e7 9f       	mul	r30, r23
     772:	30 0d       	add	r19, r0
     774:	11 24       	eor	r1, r1
     776:	a3 01       	movw	r20, r6
     778:	42 0f       	add	r20, r18
     77a:	53 1f       	adc	r21, r19
     77c:	4b 5f       	subi	r20, 0xFB	; 251
     77e:	5f 4f       	sbci	r21, 0xFF	; 255
     780:	5a 83       	std	Y+2, r21	; 0x02
     782:	49 83       	std	Y+1, r20	; 0x01
     784:	4d 91       	ld	r20, X+
     786:	e9 81       	ldd	r30, Y+1	; 0x01
     788:	fa 81       	ldd	r31, Y+2	; 0x02
     78a:	50 81       	ld	r21, Z
     78c:	f9 01       	movw	r30, r18
     78e:	64 e0       	ldi	r22, 0x04	; 4
     790:	56 9f       	mul	r21, r22
     792:	e0 0d       	add	r30, r0
     794:	f1 1d       	adc	r31, r1
     796:	11 24       	eor	r1, r1
     798:	e6 0d       	add	r30, r6
     79a:	f7 1d       	adc	r31, r7
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	47 83       	std	Z+7, r20	; 0x07
     7a2:	01 96       	adiw	r24, 0x01	; 1
				}
				
				// Found in the local list that the device is connected, but overridden in network list so update network list connection
				if (foundInLocalList & !foundInNetworkList){
					networkPtr->device[deviceNum].numOfNubCon++;
					for (uint8_t i = 0; i < 4; i++){
     7a4:	84 30       	cpi	r24, 0x04	; 4
     7a6:	91 05       	cpc	r25, r1
     7a8:	69 f7       	brne	.-38     	; 0x784 <updateNetworks+0x1a0>
						networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
					}
					
					foundInLocalList = 0;
					foundInNetworkList = 0;
     7aa:	f1 2c       	mov	r15, r1
					networkPtr->device[deviceNum].numOfNubCon++;
					for (uint8_t i = 0; i < 4; i++){
						networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
					}
					
					foundInLocalList = 0;
     7ac:	00 e0       	ldi	r16, 0x00	; 0
     7ae:	83 c0       	rjmp	.+262    	; 0x8b6 <updateNetworks+0x2d2>
					foundInNetworkList = 0;
					networkUpdated = 1;
					break;
				}
				// Found in network list but not local list, new device trying to connect to this one, add to local list
				if (!foundInLocalList & foundInNetworkList){
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	58 2d       	mov	r21, r8
     7b4:	ff 20       	and	r15, r15
     7b6:	11 f0       	breq	.+4      	; 0x7bc <updateNetworks+0x1d8>
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	e7 2f       	mov	r30, r23
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	4e 23       	and	r20, r30
     7c2:	5f 23       	and	r21, r31
     7c4:	45 2b       	or	r20, r21
     7c6:	91 f1       	breq	.+100    	; 0x82c <updateNetworks+0x248>
					
					for (uint8_t i = 0; i < 4; i++){
						myCons->myNubConnections[myCons->myNumOfNubCon][i] = networkPtr->device[deviceNum].deviceDSN[i];
     7c8:	d2 01       	movw	r26, r4
     7ca:	14 96       	adiw	r26, 0x04	; 4
     7cc:	8c 91       	ld	r24, X
     7ce:	24 e2       	ldi	r18, 0x24	; 36
     7d0:	eb 81       	ldd	r30, Y+3	; 0x03
     7d2:	fc 81       	ldd	r31, Y+4	; 0x04
     7d4:	2e 9f       	mul	r18, r30
     7d6:	d0 01       	movw	r26, r0
     7d8:	2f 9f       	mul	r18, r31
     7da:	b0 0d       	add	r27, r0
     7dc:	11 24       	eor	r1, r1
     7de:	a6 0d       	add	r26, r6
     7e0:	b7 1d       	adc	r27, r7
     7e2:	11 96       	adiw	r26, 0x01	; 1
     7e4:	9c 91       	ld	r25, X
     7e6:	11 97       	sbiw	r26, 0x01	; 1
     7e8:	08 2f       	mov	r16, r24
     7ea:	10 e0       	ldi	r17, 0x00	; 0
     7ec:	b2 01       	movw	r22, r4
     7ee:	34 e0       	ldi	r19, 0x04	; 4
     7f0:	83 9f       	mul	r24, r19
     7f2:	60 0d       	add	r22, r0
     7f4:	71 1d       	adc	r23, r1
     7f6:	11 24       	eor	r1, r1
     7f8:	fb 01       	movw	r30, r22
     7fa:	96 83       	std	Z+6, r25	; 0x06
     7fc:	12 96       	adiw	r26, 0x02	; 2
     7fe:	8c 91       	ld	r24, X
     800:	12 97       	sbiw	r26, 0x02	; 2
     802:	87 83       	std	Z+7, r24	; 0x07
     804:	13 96       	adiw	r26, 0x03	; 3
     806:	8c 91       	ld	r24, X
     808:	13 97       	sbiw	r26, 0x03	; 3
     80a:	f8 01       	movw	r30, r16
     80c:	32 96       	adiw	r30, 0x02	; 2
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	e4 0d       	add	r30, r4
     818:	f5 1d       	adc	r31, r5
     81a:	80 83       	st	Z, r24
     81c:	14 96       	adiw	r26, 0x04	; 4
     81e:	8c 91       	ld	r24, X
     820:	db 01       	movw	r26, r22
     822:	19 96       	adiw	r26, 0x09	; 9
     824:	8c 93       	st	X, r24
					}
					foundInLocalList = 0;
					foundInNetworkList = 0;
     826:	f1 2c       	mov	r15, r1
				if (!foundInLocalList & foundInNetworkList){
					
					for (uint8_t i = 0; i < 4; i++){
						myCons->myNubConnections[myCons->myNumOfNubCon][i] = networkPtr->device[deviceNum].deviceDSN[i];
					}
					foundInLocalList = 0;
     828:	00 e0       	ldi	r16, 0x00	; 0
     82a:	45 c0       	rjmp	.+138    	; 0x8b6 <updateNetworks+0x2d2>
		uint8_t foundInLocalList = 0;
		uint8_t foundInNetworkList = 0;
		myCons->myNumOfNubCon = 0;
		for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
			// Searching through local list to see if device is in it
			for(uint8_t myDeviceNum = 0; myDeviceNum < myCons->myNumOfNubCon; myDeviceNum++){
     82c:	0f 5f       	subi	r16, 0xFF	; 255
     82e:	f2 01       	movw	r30, r4
     830:	44 81       	ldd	r20, Z+4	; 0x04
     832:	04 17       	cp	r16, r20
     834:	08 f0       	brcs	.+2      	; 0x838 <updateNetworks+0x254>
     836:	3d c0       	rjmp	.+122    	; 0x8b2 <updateNetworks+0x2ce>
				for (uint8_t i = 0; i < 4; i++){
					if (myCons->myNubConnections[myDeviceNum][i] != networkPtr->device[deviceNum].deviceDSN[i]){
     838:	40 2f       	mov	r20, r16
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	f2 01       	movw	r30, r4
     83e:	64 e0       	ldi	r22, 0x04	; 4
     840:	06 9f       	mul	r16, r22
     842:	e0 0d       	add	r30, r0
     844:	f1 1d       	adc	r31, r1
     846:	11 24       	eor	r1, r1
     848:	e6 81       	ldd	r30, Z+6	; 0x06
     84a:	d6 01       	movw	r26, r12
     84c:	6c 91       	ld	r22, X
     84e:	e6 13       	cpse	r30, r22
     850:	2f cf       	rjmp	.-418    	; 0x6b0 <updateNetworks+0xcc>
     852:	fa 01       	movw	r30, r20
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	e4 0d       	add	r30, r4
     85e:	f5 1d       	adc	r31, r5
     860:	d5 01       	movw	r26, r10
     862:	1c 91       	ld	r17, X
     864:	67 81       	ldd	r22, Z+7	; 0x07
     866:	16 13       	cpse	r17, r22
     868:	23 cf       	rjmp	.-442    	; 0x6b0 <updateNetworks+0xcc>
     86a:	fa 01       	movw	r30, r20
     86c:	32 96       	adiw	r30, 0x02	; 2
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	ee 0f       	add	r30, r30
     874:	ff 1f       	adc	r31, r31
     876:	e4 0d       	add	r30, r4
     878:	f5 1d       	adc	r31, r5
     87a:	d1 01       	movw	r26, r2
     87c:	1c 91       	ld	r17, X
     87e:	60 81       	ld	r22, Z
     880:	16 13       	cpse	r17, r22
     882:	16 cf       	rjmp	.-468    	; 0x6b0 <updateNetworks+0xcc>
     884:	44 0f       	add	r20, r20
     886:	55 1f       	adc	r21, r21
     888:	44 0f       	add	r20, r20
     88a:	55 1f       	adc	r21, r21
     88c:	f2 01       	movw	r30, r4
     88e:	e4 0f       	add	r30, r20
     890:	f5 1f       	adc	r31, r21
     892:	51 85       	ldd	r21, Z+9	; 0x09
     894:	e9 81       	ldd	r30, Y+1	; 0x01
     896:	fa 81       	ldd	r31, Y+2	; 0x02
     898:	40 81       	ld	r20, Z
     89a:	54 17       	cp	r21, r20
     89c:	09 f4       	brne	.+2      	; 0x8a0 <updateNetworks+0x2bc>
     89e:	06 cf       	rjmp	.-500    	; 0x6ac <updateNetworks+0xc8>
     8a0:	07 cf       	rjmp	.-498    	; 0x6b0 <updateNetworks+0xcc>
		// If this device is in its list but not mine, add to local list
		
		uint8_t foundInLocalList = 0;
		uint8_t foundInNetworkList = 0;
		myCons->myNumOfNubCon = 0;
		for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
     8a2:	e1 2c       	mov	r14, r1
     8a4:	f1 2c       	mov	r15, r1
     8a6:	00 e0       	ldi	r16, 0x00	; 0
						}
					}
				}
				
				// Found in the local list that the device is connected, but overridden in network list so update network list connection
				if (foundInLocalList & !foundInNetworkList){
     8a8:	81 2c       	mov	r8, r1
						if (myCons->myDSN[j] != networkPtr->device[deviceNum].nubConnections[theirDeviceNum][j]){
							break;
						}
						if (j >=3){
							myCons->myNumOfNubCon++;
							foundInNetworkList = 1;
     8aa:	99 24       	eor	r9, r9
     8ac:	93 94       	inc	r9
     8ae:	ed 82       	std	Y+5, r14	; 0x05
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <updateNetworks+0x2d2>
     8b2:	0f 2d       	mov	r16, r15
     8b4:	f7 2e       	mov	r15, r23
		// If this device is in its list but not mine, add to local list
		
		uint8_t foundInLocalList = 0;
		uint8_t foundInNetworkList = 0;
		myCons->myNumOfNubCon = 0;
		for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
     8b6:	fd 81       	ldd	r31, Y+5	; 0x05
     8b8:	ff 5f       	subi	r31, 0xFF	; 255
     8ba:	fd 83       	std	Y+5, r31	; 0x05
     8bc:	d3 01       	movw	r26, r6
     8be:	8c 91       	ld	r24, X
     8c0:	f8 17       	cp	r31, r24
     8c2:	d0 f5       	brcc	.+116    	; 0x938 <__stack+0x39>
			// Searching through local list to see if device is in it
			for(uint8_t myDeviceNum = 0; myDeviceNum < myCons->myNumOfNubCon; myDeviceNum++){
     8c4:	f2 01       	movw	r30, r4
     8c6:	84 81       	ldd	r24, Z+4	; 0x04
     8c8:	88 23       	and	r24, r24
     8ca:	a9 f3       	breq	.-22     	; 0x8b6 <updateNetworks+0x2d2>
						foundInLocalList = 1;
						
					}
				}
				// Now Searching their nub connection list to see if local nub is connected
				for(uint8_t theirDeviceNum = 0; theirDeviceNum < networkPtr->device[deviceNum].numOfNubCon; theirDeviceNum++){
     8cc:	3d 81       	ldd	r19, Y+5	; 0x05
     8ce:	23 2f       	mov	r18, r19
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	3c 83       	std	Y+4, r19	; 0x04
     8d4:	2b 83       	std	Y+3, r18	; 0x03
     8d6:	22 0f       	add	r18, r18
     8d8:	33 1f       	adc	r19, r19
     8da:	22 0f       	add	r18, r18
     8dc:	33 1f       	adc	r19, r19
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	4b 81       	ldd	r20, Y+3	; 0x03
     8e4:	5c 81       	ldd	r21, Y+4	; 0x04
     8e6:	24 0f       	add	r18, r20
     8e8:	35 1f       	adc	r19, r21
     8ea:	60 e0       	ldi	r22, 0x00	; 0
		myCons->myNumOfNubCon = 0;
		for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
			// Searching through local list to see if device is in it
			for(uint8_t myDeviceNum = 0; myDeviceNum < myCons->myNumOfNubCon; myDeviceNum++){
				for (uint8_t i = 0; i < 4; i++){
					if (myCons->myNubConnections[myDeviceNum][i] != networkPtr->device[deviceNum].deviceDSN[i]){
     8ec:	a4 e2       	ldi	r26, 0x24	; 36
     8ee:	a4 9f       	mul	r26, r20
     8f0:	c0 01       	movw	r24, r0
     8f2:	a5 9f       	mul	r26, r21
     8f4:	90 0d       	add	r25, r0
     8f6:	11 24       	eor	r1, r1
     8f8:	86 0d       	add	r24, r6
     8fa:	97 1d       	adc	r25, r7
     8fc:	9f 83       	std	Y+7, r25	; 0x07
     8fe:	8e 83       	std	Y+6, r24	; 0x06
     900:	6c 01       	movw	r12, r24
     902:	bf ef       	ldi	r27, 0xFF	; 255
     904:	cb 1a       	sub	r12, r27
     906:	db 0a       	sbc	r13, r27
     908:	5c 01       	movw	r10, r24
     90a:	e2 e0       	ldi	r30, 0x02	; 2
     90c:	ae 0e       	add	r10, r30
     90e:	b1 1c       	adc	r11, r1
     910:	1c 01       	movw	r2, r24
     912:	f3 e0       	ldi	r31, 0x03	; 3
     914:	2f 0e       	add	r2, r31
     916:	31 1c       	adc	r3, r1
     918:	04 96       	adiw	r24, 0x04	; 4
     91a:	9a 83       	std	Y+2, r25	; 0x02
     91c:	89 83       	std	Y+1, r24	; 0x01
						foundInLocalList = 1;
						
					}
				}
				// Now Searching their nub connection list to see if local nub is connected
				for(uint8_t theirDeviceNum = 0; theirDeviceNum < networkPtr->device[deviceNum].numOfNubCon; theirDeviceNum++){
     91e:	4e 81       	ldd	r20, Y+6	; 0x06
     920:	5f 81       	ldd	r21, Y+7	; 0x07
     922:	4b 5f       	subi	r20, 0xFB	; 251
     924:	5f 4f       	sbci	r21, 0xFF	; 255
					for (uint8_t j = 0; j < 4; j++){
						if (myCons->myDSN[j] != networkPtr->device[deviceNum].nubConnections[theirDeviceNum][j]){
     926:	c9 01       	movw	r24, r18
     928:	2e 5f       	subi	r18, 0xFE	; 254
     92a:	3f 4f       	sbci	r19, 0xFF	; 255
     92c:	7f 2d       	mov	r23, r15
     92e:	f0 2e       	mov	r15, r16
     930:	06 2f       	mov	r16, r22
     932:	5f 83       	std	Y+7, r21	; 0x07
     934:	4e 83       	std	Y+6, r20	; 0x06
     936:	80 cf       	rjmp	.-256    	; 0x838 <updateNetworks+0x254>
		}
	}
	
	
	// Searching for local device dsn
	for(uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
     938:	f3 01       	movw	r30, r6
     93a:	f0 81       	ld	r31, Z
     93c:	f9 83       	std	Y+1, r31	; 0x01
     93e:	ff 23       	and	r31, r31
     940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
     942:	32 c1       	rjmp	.+612    	; 0xba8 <__stack+0x2a9>
		for (uint8_t i = 0; i < 4;i++ ){
			if (networkPtr->device[deviceNum].deviceDSN[i] != myCons->myDSN[i]){
     944:	d2 01       	movw	r26, r4
     946:	1c 91       	ld	r17, X
     948:	d3 01       	movw	r26, r6
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	1b 82       	std	Y+3, r1	; 0x03
     952:	04 e2       	ldi	r16, 0x24	; 36
				break;
			}
			if (i >= 3){
				flag = 1;	// found local dsn in list
     954:	ff 24       	eor	r15, r15
     956:	f3 94       	inc	r15
     958:	d1 2c       	mov	r13, r1
     95a:	cf 2e       	mov	r12, r31
     95c:	0f c1       	rjmp	.+542    	; 0xb7c <__stack+0x27d>
     95e:	df 2c       	mov	r13, r15
	
	
	// Searching for local device dsn
	for(uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
		for (uint8_t i = 0; i < 4;i++ ){
			if (networkPtr->device[deviceNum].deviceDSN[i] != myCons->myDSN[i]){
     960:	82 2f       	mov	r24, r18
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	fa 01       	movw	r30, r20
     966:	e8 0f       	add	r30, r24
     968:	f9 1f       	adc	r31, r25
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	84 0d       	add	r24, r4
     96e:	95 1d       	adc	r25, r5
     970:	e1 80       	ldd	r14, Z+1	; 0x01
     972:	fc 01       	movw	r30, r24
     974:	80 81       	ld	r24, Z
     976:	e8 12       	cpse	r14, r24
     978:	07 c0       	rjmp	.+14     	; 0x988 <__stack+0x89>
				break;
			}
			if (i >= 3){
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	82 0f       	add	r24, r18
     97e:	83 30       	cpi	r24, 0x03	; 3
     980:	08 f0       	brcs	.+2      	; 0x984 <__stack+0x85>
     982:	9a c1       	rjmp	.+820    	; 0xcb8 <__stack+0x3b9>
	}
	
	
	// Searching for local device dsn
	for(uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
		for (uint8_t i = 0; i < 4;i++ ){
     984:	24 30       	cpi	r18, 0x04	; 4
     986:	60 f3       	brcs	.-40     	; 0x960 <__stack+0x61>
			if (i >= 3){
				flag = 1;	// found local dsn in list
			}
		}
		// Device found
		if(flag == 1){
     988:	f1 e0       	ldi	r31, 0x01	; 1
     98a:	df 12       	cpse	r13, r31
     98c:	f1 c0       	rjmp	.+482    	; 0xb70 <__stack+0x271>
				// Checks the values received from the network and checks them against the local values
				if (myCons->myNumOfNubCon != networkPtr->device[deviceNum].numOfNubCon){
     98e:	d2 01       	movw	r26, r4
     990:	14 96       	adiw	r26, 0x04	; 4
     992:	fc 90       	ld	r15, X
     994:	14 97       	sbiw	r26, 0x04	; 4
					flag = 0;
				}
				if (myCons->myNumOfPhoneCon != networkPtr->device[deviceNum].numOfPhoneCon){
     996:	15 96       	adiw	r26, 0x05	; 5
     998:	ec 90       	ld	r14, X
     99a:	43 2f       	mov	r20, r19
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	f3 01       	movw	r30, r6
     9a0:	b4 e2       	ldi	r27, 0x24	; 36
     9a2:	3b 9f       	mul	r19, r27
     9a4:	e0 0d       	add	r30, r0
     9a6:	f1 1d       	adc	r31, r1
     9a8:	11 24       	eor	r1, r1
     9aa:	86 81       	ldd	r24, Z+6	; 0x06
     9ac:	e8 12       	cpse	r14, r24
     9ae:	5e c0       	rjmp	.+188    	; 0xa6c <__stack+0x16d>
			}
		}
		// Device found
		if(flag == 1){
				// Checks the values received from the network and checks them against the local values
				if (myCons->myNumOfNubCon != networkPtr->device[deviceNum].numOfNubCon){
     9b0:	84 e2       	ldi	r24, 0x24	; 36
     9b2:	84 9f       	mul	r24, r20
     9b4:	f0 01       	movw	r30, r0
     9b6:	85 9f       	mul	r24, r21
     9b8:	f0 0d       	add	r31, r0
     9ba:	11 24       	eor	r1, r1
     9bc:	e6 0d       	add	r30, r6
     9be:	f7 1d       	adc	r31, r7
					flag = 0;
				}
				if (myCons->myNumOfPhoneCon != networkPtr->device[deviceNum].numOfPhoneCon){
					flag = 0;
				}
				if (flag != 0){
     9c0:	85 81       	ldd	r24, Z+5	; 0x05
     9c2:	f8 12       	cpse	r15, r24
     9c4:	53 c0       	rjmp	.+166    	; 0xa6c <__stack+0x16d>
					// Checking nub connections
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     9c6:	ff 20       	and	r15, r15
     9c8:	09 f4       	brne	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	7a c1       	rjmp	.+756    	; 0xcc0 <__stack+0x3c1>
     9cc:	e4 e2       	ldi	r30, 0x24	; 36
     9ce:	3e 9f       	mul	r19, r30
     9d0:	c0 01       	movw	r24, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	b3 01       	movw	r22, r6
     9d6:	68 0f       	add	r22, r24
     9d8:	79 1f       	adc	r23, r25
     9da:	5a 82       	std	Y+2, r5	; 0x02
     9dc:	49 82       	std	Y+1, r4	; 0x01
     9de:	08 96       	adiw	r24, 0x08	; 8
     9e0:	86 0d       	add	r24, r6
     9e2:	97 1d       	adc	r25, r7
     9e4:	d1 2c       	mov	r13, r1
     9e6:	13 c0       	rjmp	.+38     	; 0xa0e <__stack+0x10f>
						for( uint8_t j = 0; j < 4; j++){
							if(networkPtr->device[deviceNum].nubConnections[i][j] != myCons->myNubConnections[i][j]){
     9e8:	01 91       	ld	r16, Z+
     9ea:	1d 91       	ld	r17, X+
     9ec:	01 13       	cpse	r16, r17
     9ee:	3e c0       	rjmp	.+124    	; 0xa6c <__stack+0x16d>
					flag = 0;
				}
				if (flag != 0){
					// Checking nub connections
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
						for( uint8_t j = 0; j < 4; j++){
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	24 30       	cpi	r18, 0x04	; 4
     9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__stack+0xe9>
				if (myCons->myNumOfPhoneCon != networkPtr->device[deviceNum].numOfPhoneCon){
					flag = 0;
				}
				if (flag != 0){
					// Checking nub connections
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     9f6:	d3 94       	inc	r13
     9f8:	6c 5f       	subi	r22, 0xFC	; 252
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	a9 81       	ldd	r26, Y+1	; 0x01
     9fe:	ba 81       	ldd	r27, Y+2	; 0x02
     a00:	14 96       	adiw	r26, 0x04	; 4
     a02:	ba 83       	std	Y+2, r27	; 0x02
     a04:	a9 83       	std	Y+1, r26	; 0x01
     a06:	04 96       	adiw	r24, 0x04	; 4
     a08:	fd 14       	cp	r15, r13
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	59 c1       	rjmp	.+690    	; 0xcc0 <__stack+0x3c1>
						for( uint8_t j = 0; j < 4; j++){
							if(networkPtr->device[deviceNum].nubConnections[i][j] != myCons->myNubConnections[i][j]){
     a0e:	db 01       	movw	r26, r22
     a10:	17 96       	adiw	r26, 0x07	; 7
     a12:	ec 91       	ld	r30, X
     a14:	a9 81       	ldd	r26, Y+1	; 0x01
     a16:	ba 81       	ldd	r27, Y+2	; 0x02
     a18:	16 96       	adiw	r26, 0x06	; 6
     a1a:	2c 91       	ld	r18, X
     a1c:	16 97       	sbiw	r26, 0x06	; 6
     a1e:	e2 13       	cpse	r30, r18
     a20:	25 c0       	rjmp	.+74     	; 0xa6c <__stack+0x16d>
     a22:	17 96       	adiw	r26, 0x07	; 7
     a24:	fc 01       	movw	r30, r24
					flag = 0;
				}
				if (flag != 0){
					// Checking nub connections
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
						for( uint8_t j = 0; j < 4; j++){
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	df cf       	rjmp	.-66     	; 0x9e8 <__stack+0xe9>
				}
				if (flag != 0){
					// Checking phone connections
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
						for( uint8_t j = 0; j < 6; j++){
							if(networkPtr->device[deviceNum].phoneConnections[i][j] != myCons->myPhoneConnections[i][j]){
     a2a:	21 91       	ld	r18, Z+
     a2c:	9d 91       	ld	r25, X+
     a2e:	29 13       	cpse	r18, r25
     a30:	1d c0       	rjmp	.+58     	; 0xa6c <__stack+0x16d>
					}
				}
				if (flag != 0){
					// Checking phone connections
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
						for( uint8_t j = 0; j < 6; j++){
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	86 30       	cpi	r24, 0x06	; 6
     a36:	c9 f7       	brne	.-14     	; 0xa2a <__stack+0x12b>
						}
					}
				}
				if (flag != 0){
					// Checking phone connections
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
     a38:	d3 94       	inc	r13
     a3a:	0a 5f       	subi	r16, 0xFA	; 250
     a3c:	1f 4f       	sbci	r17, 0xFF	; 255
     a3e:	e9 81       	ldd	r30, Y+1	; 0x01
     a40:	fa 81       	ldd	r31, Y+2	; 0x02
     a42:	36 96       	adiw	r30, 0x06	; 6
     a44:	fa 83       	std	Y+2, r31	; 0x02
     a46:	e9 83       	std	Y+1, r30	; 0x01
     a48:	6a 5f       	subi	r22, 0xFA	; 250
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	ed 14       	cp	r14, r13
     a4e:	09 f4       	brne	.+2      	; 0xa52 <__stack+0x153>
     a50:	50 c1       	rjmp	.+672    	; 0xcf2 <__stack+0x3f3>
						for( uint8_t j = 0; j < 6; j++){
							if(networkPtr->device[deviceNum].phoneConnections[i][j] != myCons->myPhoneConnections[i][j]){
     a52:	d8 01       	movw	r26, r16
     a54:	53 96       	adiw	r26, 0x13	; 19
     a56:	9c 91       	ld	r25, X
     a58:	e9 81       	ldd	r30, Y+1	; 0x01
     a5a:	fa 81       	ldd	r31, Y+2	; 0x02
     a5c:	82 89       	ldd	r24, Z+18	; 0x12
     a5e:	98 13       	cpse	r25, r24
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__stack+0x16d>
     a62:	df 01       	movw	r26, r30
     a64:	53 96       	adiw	r26, 0x13	; 19
     a66:	fb 01       	movw	r30, r22
					}
				}
				if (flag != 0){
					// Checking phone connections
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
						for( uint8_t j = 0; j < 6; j++){
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	df cf       	rjmp	.-66     	; 0xa2a <__stack+0x12b>
				}
				
				// Data received is different than local data, so update network back with local data
				if (flag == 0){
					
					networkPtr->device[deviceNum].numOfNubCon = myCons->myNumOfNubCon;
     a6c:	84 e2       	ldi	r24, 0x24	; 36
     a6e:	84 9f       	mul	r24, r20
     a70:	f0 01       	movw	r30, r0
     a72:	85 9f       	mul	r24, r21
     a74:	f0 0d       	add	r31, r0
     a76:	11 24       	eor	r1, r1
     a78:	e6 0d       	add	r30, r6
     a7a:	f7 1d       	adc	r31, r7
     a7c:	f5 82       	std	Z+5, r15	; 0x05
					networkPtr->device[deviceNum].numOfPhoneCon = myCons->myNumOfPhoneCon;
     a7e:	d2 01       	movw	r26, r4
     a80:	15 96       	adiw	r26, 0x05	; 5
     a82:	8c 91       	ld	r24, X
     a84:	15 97       	sbiw	r26, 0x05	; 5
     a86:	86 83       	std	Z+6, r24	; 0x06
					
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     a88:	14 96       	adiw	r26, 0x04	; 4
     a8a:	8c 91       	ld	r24, X
     a8c:	88 23       	and	r24, r24
     a8e:	09 f4       	brne	.+2      	; 0xa92 <__stack+0x193>
     a90:	44 c0       	rjmp	.+136    	; 0xb1a <__stack+0x21b>
     a92:	20 e0       	ldi	r18, 0x00	; 0
						for( uint8_t j = 0; j < 4; j++){
							networkPtr->device[deviceNum].nubConnections[i][j] = myCons->myNubConnections[i][j];
     a94:	ca 01       	movw	r24, r20
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	48 0f       	add	r20, r24
     aa4:	59 1f       	adc	r21, r25
     aa6:	82 2f       	mov	r24, r18
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	82 01       	movw	r16, r4
     aac:	b4 e0       	ldi	r27, 0x04	; 4
     aae:	2b 9f       	mul	r18, r27
     ab0:	00 0d       	add	r16, r0
     ab2:	11 1d       	adc	r17, r1
     ab4:	11 24       	eor	r1, r1
     ab6:	d8 01       	movw	r26, r16
     ab8:	16 96       	adiw	r26, 0x06	; 6
     aba:	ec 91       	ld	r30, X
     abc:	ba 01       	movw	r22, r20
     abe:	68 0f       	add	r22, r24
     ac0:	79 1f       	adc	r23, r25
     ac2:	db 01       	movw	r26, r22
     ac4:	aa 0f       	add	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	aa 0f       	add	r26, r26
     aca:	bb 1f       	adc	r27, r27
     acc:	a6 0d       	add	r26, r6
     ace:	b7 1d       	adc	r27, r7
     ad0:	ba 83       	std	Y+2, r27	; 0x02
     ad2:	a9 83       	std	Y+1, r26	; 0x01
     ad4:	17 96       	adiw	r26, 0x07	; 7
     ad6:	ec 93       	st	X, r30
     ad8:	f8 01       	movw	r30, r16
     ada:	a7 81       	ldd	r26, Z+7	; 0x07
     adc:	fb 01       	movw	r30, r22
     ade:	32 96       	adiw	r30, 0x02	; 2
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	e6 0d       	add	r30, r6
     aea:	f7 1d       	adc	r31, r7
     aec:	a0 83       	st	Z, r26
     aee:	dc 01       	movw	r26, r24
     af0:	12 96       	adiw	r26, 0x02	; 2
     af2:	aa 0f       	add	r26, r26
     af4:	bb 1f       	adc	r27, r27
     af6:	aa 0f       	add	r26, r26
     af8:	bb 1f       	adc	r27, r27
     afa:	a4 0d       	add	r26, r4
     afc:	b5 1d       	adc	r27, r5
     afe:	8c 91       	ld	r24, X
     b00:	81 83       	std	Z+1, r24	; 0x01
     b02:	d8 01       	movw	r26, r16
     b04:	19 96       	adiw	r26, 0x09	; 9
     b06:	8c 91       	ld	r24, X
     b08:	e9 81       	ldd	r30, Y+1	; 0x01
     b0a:	fa 81       	ldd	r31, Y+2	; 0x02
     b0c:	82 87       	std	Z+10, r24	; 0x0a
				if (flag == 0){
					
					networkPtr->device[deviceNum].numOfNubCon = myCons->myNumOfNubCon;
					networkPtr->device[deviceNum].numOfPhoneCon = myCons->myNumOfPhoneCon;
					
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	d2 01       	movw	r26, r4
     b12:	14 96       	adiw	r26, 0x04	; 4
     b14:	8c 91       	ld	r24, X
     b16:	28 17       	cp	r18, r24
     b18:	30 f2       	brcs	.-116    	; 0xaa6 <__stack+0x1a7>
						for( uint8_t j = 0; j < 4; j++){
							networkPtr->device[deviceNum].nubConnections[i][j] = myCons->myNubConnections[i][j];
						}
					}
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
     b1a:	f2 01       	movw	r30, r4
     b1c:	85 81       	ldd	r24, Z+5	; 0x05
     b1e:	88 23       	and	r24, r24
     b20:	09 f4       	brne	.+2      	; 0xb24 <__stack+0x225>
     b22:	e7 c0       	rjmp	.+462    	; 0xcf2 <__stack+0x3f3>
     b24:	f4 e2       	ldi	r31, 0x24	; 36
     b26:	3f 9f       	mul	r19, r31
     b28:	90 01       	movw	r18, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	2d 5e       	subi	r18, 0xED	; 237
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	0b c0       	rjmp	.+22     	; 0xb4a <__stack+0x24b>
						for( uint8_t j = 0; j < 6; j++){
							networkPtr->device[deviceNum].phoneConnections[i][j] = myCons->myPhoneConnections[i][j];
     b34:	9d 91       	ld	r25, X+
     b36:	91 93       	st	Z+, r25
     b38:	81 50       	subi	r24, 0x01	; 1
						for( uint8_t j = 0; j < 4; j++){
							networkPtr->device[deviceNum].nubConnections[i][j] = myCons->myNubConnections[i][j];
						}
					}
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
						for( uint8_t j = 0; j < 6; j++){
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <__stack+0x235>
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
						for( uint8_t j = 0; j < 4; j++){
							networkPtr->device[deviceNum].nubConnections[i][j] = myCons->myNubConnections[i][j];
						}
					}
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
     b3c:	4f 5f       	subi	r20, 0xFF	; 255
     b3e:	d2 01       	movw	r26, r4
     b40:	15 96       	adiw	r26, 0x05	; 5
     b42:	8c 91       	ld	r24, X
     b44:	48 17       	cp	r20, r24
     b46:	08 f0       	brcs	.+2      	; 0xb4a <__stack+0x24b>
     b48:	d4 c0       	rjmp	.+424    	; 0xcf2 <__stack+0x3f3>
     b4a:	84 2f       	mov	r24, r20
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	fc 01       	movw	r30, r24
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	e8 0f       	add	r30, r24
     b56:	f9 1f       	adc	r31, r25
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	df 01       	movw	r26, r30
     b5e:	52 96       	adiw	r26, 0x12	; 18
     b60:	a4 0d       	add	r26, r4
     b62:	b5 1d       	adc	r27, r5
     b64:	e2 0f       	add	r30, r18
     b66:	f3 1f       	adc	r31, r19
     b68:	e6 0d       	add	r30, r6
     b6a:	f7 1d       	adc	r31, r7
				if (flag == 0){
					
					networkPtr->device[deviceNum].numOfNubCon = myCons->myNumOfNubCon;
					networkPtr->device[deviceNum].numOfPhoneCon = myCons->myNumOfPhoneCon;
					
					for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     b6c:	86 e0       	ldi	r24, 0x06	; 6
     b6e:	e2 cf       	rjmp	.-60     	; 0xb34 <__stack+0x235>
		}
	}
	
	
	// Searching for local device dsn
	for(uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
     b70:	3f 5f       	subi	r19, 0xFF	; 255
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	7f 4f       	sbci	r23, 0xFF	; 255
     b76:	94 96       	adiw	r26, 0x24	; 36
     b78:	3c 15       	cp	r19, r12
     b7a:	71 f0       	breq	.+28     	; 0xb98 <__stack+0x299>
		for (uint8_t i = 0; i < 4;i++ ){
			if (networkPtr->device[deviceNum].deviceDSN[i] != myCons->myDSN[i]){
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	8c 91       	ld	r24, X
     b80:	11 97       	sbiw	r26, 0x01	; 1
     b82:	81 13       	cpse	r24, r17
     b84:	01 cf       	rjmp	.-510    	; 0x988 <__stack+0x89>
     b86:	21 e0       	ldi	r18, 0x01	; 1
     b88:	06 9f       	mul	r16, r22
     b8a:	a0 01       	movw	r20, r0
     b8c:	07 9f       	mul	r16, r23
     b8e:	50 0d       	add	r21, r0
     b90:	11 24       	eor	r1, r1
     b92:	46 0d       	add	r20, r6
     b94:	57 1d       	adc	r21, r7
     b96:	f1 ce       	rjmp	.-542    	; 0x97a <__stack+0x7b>
     b98:	db 82       	std	Y+3, r13	; 0x03
     b9a:	c9 82       	std	Y+1, r12	; 0x01
				}			
		}
	}
	
	// If device DSN is not found at all in search, add device connections to end network list if there is room
	if (flag == 0){
     b9c:	d1 10       	cpse	r13, r1
     b9e:	a9 c0       	rjmp	.+338    	; 0xcf2 <__stack+0x3f3>
		if (networkPtr->numOfDevices != MaxNetworkSize){
     ba0:	bc 2d       	mov	r27, r12
     ba2:	b5 30       	cpi	r27, 0x05	; 5
     ba4:	09 f4       	brne	.+2      	; 0xba8 <__stack+0x2a9>
     ba6:	a5 c0       	rjmp	.+330    	; 0xcf2 <__stack+0x3f3>
			networkPtr->numOfDevices ++;
     ba8:	49 81       	ldd	r20, Y+1	; 0x01
     baa:	4f 5f       	subi	r20, 0xFF	; 255
     bac:	f3 01       	movw	r30, r6
     bae:	40 83       	st	Z, r20
			networkPtr->device[networkPtr->numOfDevices].numOfNubCon = myCons->myNumOfNubCon;
     bb0:	d2 01       	movw	r26, r4
     bb2:	14 96       	adiw	r26, 0x04	; 4
     bb4:	2c 91       	ld	r18, X
     bb6:	84 2f       	mov	r24, r20
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	b4 e2       	ldi	r27, 0x24	; 36
     bbc:	4b 9f       	mul	r20, r27
     bbe:	e0 0d       	add	r30, r0
     bc0:	f1 1d       	adc	r31, r1
     bc2:	11 24       	eor	r1, r1
     bc4:	25 83       	std	Z+5, r18	; 0x05
			networkPtr->device[networkPtr->numOfDevices].numOfNubCon = myCons->myNumOfPhoneCon;
     bc6:	d2 01       	movw	r26, r4
     bc8:	15 96       	adiw	r26, 0x05	; 5
     bca:	2c 91       	ld	r18, X
     bcc:	15 97       	sbiw	r26, 0x05	; 5
     bce:	25 83       	std	Z+5, r18	; 0x05
			
			for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	2c 91       	ld	r18, X
     bd4:	22 23       	and	r18, r18
     bd6:	09 f4       	brne	.+2      	; 0xbda <__stack+0x2db>
     bd8:	44 c0       	rjmp	.+136    	; 0xc62 <__stack+0x363>
     bda:	50 e0       	ldi	r21, 0x00	; 0
				for( uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[i][j] = myCons->myNubConnections[i][j];
     bdc:	9c 01       	movw	r18, r24
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	28 0f       	add	r18, r24
     bec:	39 1f       	adc	r19, r25
     bee:	85 2f       	mov	r24, r21
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	82 01       	movw	r16, r4
     bf4:	b4 e0       	ldi	r27, 0x04	; 4
     bf6:	5b 9f       	mul	r21, r27
     bf8:	00 0d       	add	r16, r0
     bfa:	11 1d       	adc	r17, r1
     bfc:	11 24       	eor	r1, r1
     bfe:	d8 01       	movw	r26, r16
     c00:	16 96       	adiw	r26, 0x06	; 6
     c02:	ec 91       	ld	r30, X
     c04:	b9 01       	movw	r22, r18
     c06:	68 0f       	add	r22, r24
     c08:	79 1f       	adc	r23, r25
     c0a:	db 01       	movw	r26, r22
     c0c:	aa 0f       	add	r26, r26
     c0e:	bb 1f       	adc	r27, r27
     c10:	aa 0f       	add	r26, r26
     c12:	bb 1f       	adc	r27, r27
     c14:	a6 0d       	add	r26, r6
     c16:	b7 1d       	adc	r27, r7
     c18:	ba 83       	std	Y+2, r27	; 0x02
     c1a:	a9 83       	std	Y+1, r26	; 0x01
     c1c:	17 96       	adiw	r26, 0x07	; 7
     c1e:	ec 93       	st	X, r30
     c20:	f8 01       	movw	r30, r16
     c22:	a7 81       	ldd	r26, Z+7	; 0x07
     c24:	fb 01       	movw	r30, r22
     c26:	32 96       	adiw	r30, 0x02	; 2
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e6 0d       	add	r30, r6
     c32:	f7 1d       	adc	r31, r7
     c34:	a0 83       	st	Z, r26
     c36:	dc 01       	movw	r26, r24
     c38:	12 96       	adiw	r26, 0x02	; 2
     c3a:	aa 0f       	add	r26, r26
     c3c:	bb 1f       	adc	r27, r27
     c3e:	aa 0f       	add	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	a4 0d       	add	r26, r4
     c44:	b5 1d       	adc	r27, r5
     c46:	8c 91       	ld	r24, X
     c48:	81 83       	std	Z+1, r24	; 0x01
     c4a:	d8 01       	movw	r26, r16
     c4c:	19 96       	adiw	r26, 0x09	; 9
     c4e:	8c 91       	ld	r24, X
     c50:	e9 81       	ldd	r30, Y+1	; 0x01
     c52:	fa 81       	ldd	r31, Y+2	; 0x02
     c54:	82 87       	std	Z+10, r24	; 0x0a
		if (networkPtr->numOfDevices != MaxNetworkSize){
			networkPtr->numOfDevices ++;
			networkPtr->device[networkPtr->numOfDevices].numOfNubCon = myCons->myNumOfNubCon;
			networkPtr->device[networkPtr->numOfDevices].numOfNubCon = myCons->myNumOfPhoneCon;
			
			for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     c56:	5f 5f       	subi	r21, 0xFF	; 255
     c58:	d2 01       	movw	r26, r4
     c5a:	14 96       	adiw	r26, 0x04	; 4
     c5c:	8c 91       	ld	r24, X
     c5e:	58 17       	cp	r21, r24
     c60:	30 f2       	brcs	.-116    	; 0xbee <__stack+0x2ef>
				for( uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[i][j] = myCons->myNubConnections[i][j];
				}
			}
			for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
     c62:	f2 01       	movw	r30, r4
     c64:	85 81       	ldd	r24, Z+5	; 0x05
     c66:	88 23       	and	r24, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <__stack+0x36d>
     c6a:	43 c0       	rjmp	.+134    	; 0xcf2 <__stack+0x3f3>
     c6c:	f4 e2       	ldi	r31, 0x24	; 36
     c6e:	4f 9f       	mul	r20, r31
     c70:	a0 01       	movw	r20, r0
     c72:	11 24       	eor	r1, r1
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	4d 5e       	subi	r20, 0xED	; 237
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__stack+0x391>
				for( uint8_t j = 0; j < 6; j++){
					networkPtr->device[networkPtr->numOfDevices].phoneConnections[i][j] = myCons->myPhoneConnections[i][j];
     c7c:	9d 91       	ld	r25, X+
     c7e:	91 93       	st	Z+, r25
     c80:	81 50       	subi	r24, 0x01	; 1
				for( uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[i][j] = myCons->myNubConnections[i][j];
				}
			}
			for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
				for( uint8_t j = 0; j < 6; j++){
     c82:	e1 f7       	brne	.-8      	; 0xc7c <__stack+0x37d>
			for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
				for( uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[i][j] = myCons->myNubConnections[i][j];
				}
			}
			for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
     c84:	6f 5f       	subi	r22, 0xFF	; 255
     c86:	d2 01       	movw	r26, r4
     c88:	15 96       	adiw	r26, 0x05	; 5
     c8a:	8c 91       	ld	r24, X
     c8c:	68 17       	cp	r22, r24
     c8e:	88 f5       	brcc	.+98     	; 0xcf2 <__stack+0x3f3>
     c90:	86 2f       	mov	r24, r22
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9c 01       	movw	r18, r24
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	82 0f       	add	r24, r18
     c9c:	93 1f       	adc	r25, r19
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	dc 01       	movw	r26, r24
     ca4:	52 96       	adiw	r26, 0x12	; 18
     ca6:	a4 0d       	add	r26, r4
     ca8:	b5 1d       	adc	r27, r5
     caa:	84 0f       	add	r24, r20
     cac:	95 1f       	adc	r25, r21
     cae:	f3 01       	movw	r30, r6
     cb0:	e8 0f       	add	r30, r24
     cb2:	f9 1f       	adc	r31, r25
		if (networkPtr->numOfDevices != MaxNetworkSize){
			networkPtr->numOfDevices ++;
			networkPtr->device[networkPtr->numOfDevices].numOfNubCon = myCons->myNumOfNubCon;
			networkPtr->device[networkPtr->numOfDevices].numOfNubCon = myCons->myNumOfPhoneCon;
			
			for (uint8_t i = 0; i < myCons->myNumOfNubCon; i ++){
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	e2 cf       	rjmp	.-60     	; 0xc7c <__stack+0x37d>
	}
	
	
	// Searching for local device dsn
	for(uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
		for (uint8_t i = 0; i < 4;i++ ){
     cb8:	24 30       	cpi	r18, 0x04	; 4
     cba:	08 f4       	brcc	.+2      	; 0xcbe <__stack+0x3bf>
     cbc:	50 ce       	rjmp	.-864    	; 0x95e <__stack+0x5f>
     cbe:	67 ce       	rjmp	.-818    	; 0x98e <__stack+0x8f>
						}
					}
				}
				if (flag != 0){
					// Checking phone connections
					for (uint8_t i = 0; i < myCons->myNumOfPhoneCon; i ++){
     cc0:	ee 20       	and	r14, r14
     cc2:	b9 f0       	breq	.+46     	; 0xcf2 <__stack+0x3f3>
     cc4:	b4 e2       	ldi	r27, 0x24	; 36
     cc6:	3b 9f       	mul	r19, r27
     cc8:	c0 01       	movw	r24, r0
     cca:	11 24       	eor	r1, r1
     ccc:	83 01       	movw	r16, r6
     cce:	08 0f       	add	r16, r24
     cd0:	19 1f       	adc	r17, r25
     cd2:	5a 82       	std	Y+2, r5	; 0x02
     cd4:	49 82       	std	Y+1, r4	; 0x01
     cd6:	44 96       	adiw	r24, 0x14	; 20
     cd8:	b3 01       	movw	r22, r6
     cda:	68 0f       	add	r22, r24
     cdc:	79 1f       	adc	r23, r25
     cde:	d1 2c       	mov	r13, r1
     ce0:	b8 ce       	rjmp	.-656    	; 0xa52 <__stack+0x153>
     ce2:	e3 ec       	ldi	r30, 0xC3	; 195
     ce4:	f9 e0       	ldi	r31, 0x09	; 9
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <__stack+0x3e7>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <__stack+0x3ed>
     cec:	00 00       	nop
     cee:	85 e6       	ldi	r24, 0x65	; 101
     cf0:	ae cc       	rjmp	.-1700   	; 0x64e <updateNetworks+0x6a>
		}
		networkUpdated = 1;
		return networkUpdated;	// Network has been updated
	}
	return networkUpdated;	// Network has been updated
}
     cf2:	29 96       	adiw	r28, 0x09	; 9
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	9f 90       	pop	r9
     d14:	8f 90       	pop	r8
     d16:	7f 90       	pop	r7
     d18:	6f 90       	pop	r6
     d1a:	5f 90       	pop	r5
     d1c:	4f 90       	pop	r4
     d1e:	3f 90       	pop	r3
     d20:	2f 90       	pop	r2
     d22:	08 95       	ret

00000d24 <handleMessages>:

			  



uint8_t handleMessages(uint8_t *myDSN, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
     d24:	2f 92       	push	r2
     d26:	3f 92       	push	r3
     d28:	4f 92       	push	r4
     d2a:	5f 92       	push	r5
     d2c:	6f 92       	push	r6
     d2e:	7f 92       	push	r7
     d30:	8f 92       	push	r8
     d32:	9f 92       	push	r9
     d34:	af 92       	push	r10
     d36:	bf 92       	push	r11
     d38:	cf 92       	push	r12
     d3a:	df 92       	push	r13
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	6d 97       	sbiw	r28, 0x1d	; 29
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	6c 01       	movw	r12, r24
     d5a:	7b 01       	movw	r14, r22
     d5c:	59 8f       	std	Y+25, r21	; 0x19
     d5e:	48 8f       	std	Y+24, r20	; 0x18
     d60:	49 01       	movw	r8, r18
     d62:	58 01       	movw	r10, r16
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
     d64:	6d b6       	in	r6, 0x3d	; 61
     d66:	7e b6       	in	r7, 0x3e	; 62


uint8_t handleMessages(uint8_t *myDSN, struct networkStructure *networkPtr, uint16_t sizeOfNetwork, uint8_t *networkPtr2, struct myConData* myCons){
	
	uint8_t value;
	uint8_t msgType = (uint8_t) getChar(0);		// Message type is stored as the first byte
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
	
	uint8_t sourceDSN[4];
	// Message that HUMPRO received over air
	
	
	if (msgType == 0x01){
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	09 f0       	breq	.+2      	; 0xd74 <handleMessages+0x50>
     d72:	c8 c0       	rjmp	.+400    	; 0xf04 <handleMessages+0x1e0>
     d74:	2d b6       	in	r2, 0x3d	; 61
     d76:	3e b6       	in	r3, 0x3e	; 62
		// [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte), 
		//  msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
		
		uint8_t deviceNumInPath = getChar(0) + 1;		// Increment to this device
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     d7e:	55 24       	eor	r5, r5
     d80:	53 94       	inc	r5
     d82:	58 0e       	add	r5, r24
		uint8_t msgPathSize = getChar(0);
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     d8a:	98 2e       	mov	r9, r24
		uint8_t msgSize = getChar(0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     d92:	88 2e       	mov	r8, r24
		uint8_t msg[msgSize];
     d94:	2d b7       	in	r18, 0x3d	; 61
     d96:	3e b7       	in	r19, 0x3e	; 62
     d98:	28 1b       	sub	r18, r24
     d9a:	31 09       	sbc	r19, r1
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	3e bf       	out	0x3e, r19	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	2d bf       	out	0x3d, r18	; 61
     da6:	8d b7       	in	r24, 0x3d	; 61
     da8:	9e b7       	in	r25, 0x3e	; 62
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	9f 8b       	std	Y+23, r25	; 0x17
     dae:	8e 8b       	std	Y+22, r24	; 0x16
		uint8_t msgPath[msgPathSize*4];
     db0:	e9 2c       	mov	r14, r9
     db2:	f1 2c       	mov	r15, r1
     db4:	ee 0c       	add	r14, r14
     db6:	ff 1c       	adc	r15, r15
     db8:	ee 0c       	add	r14, r14
     dba:	ff 1c       	adc	r15, r15
     dbc:	ad b7       	in	r26, 0x3d	; 61
     dbe:	be b7       	in	r27, 0x3e	; 62
     dc0:	ae 19       	sub	r26, r14
     dc2:	bf 09       	sbc	r27, r15
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	be bf       	out	0x3e, r27	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	ad bf       	out	0x3d, r26	; 61
     dce:	ed b7       	in	r30, 0x3d	; 61
     dd0:	fe b7       	in	r31, 0x3e	; 62
     dd2:	31 96       	adiw	r30, 0x01	; 1
     dd4:	f9 8f       	std	Y+25, r31	; 0x19
     dd6:	e8 8f       	std	Y+24, r30	; 0x18
     dd8:	5f 01       	movw	r10, r30
		for (uint8_t i = 0; i < msgPathSize*4; i ++){
     dda:	1e 14       	cp	r1, r14
     ddc:	1f 04       	cpc	r1, r15
     dde:	0c f0       	brlt	.+2      	; 0xde2 <handleMessages+0xbe>
     de0:	ea c2       	rjmp	.+1492   	; 0x13b6 <handleMessages+0x692>
     de2:	00 e0       	ldi	r16, 0x00	; 0
     de4:	10 e0       	ldi	r17, 0x00	; 0
     de6:	41 2c       	mov	r4, r1
			msgPath[i] = getChar(0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     dee:	f5 01       	movw	r30, r10
     df0:	e0 0f       	add	r30, r16
     df2:	f1 1f       	adc	r31, r17
     df4:	80 83       	st	Z, r24
		uint8_t deviceNumInPath = getChar(0) + 1;		// Increment to this device
		uint8_t msgPathSize = getChar(0);
		uint8_t msgSize = getChar(0);
		uint8_t msg[msgSize];
		uint8_t msgPath[msgPathSize*4];
		for (uint8_t i = 0; i < msgPathSize*4; i ++){
     df6:	43 94       	inc	r4
     df8:	04 2d       	mov	r16, r4
     dfa:	10 e0       	ldi	r17, 0x00	; 0
     dfc:	0e 15       	cp	r16, r14
     dfe:	1f 05       	cpc	r17, r15
     e00:	9c f3       	brlt	.-26     	; 0xde8 <handleMessages+0xc4>
     e02:	d9 c2       	rjmp	.+1458   	; 0x13b6 <handleMessages+0x692>
			msgPath[i] = getChar(0);
		}
		
		uint8_t destPhoneAdd[6];
		for (uint8_t i = 0; i < 6; i ++){
			destPhoneAdd[i] = getChar(0);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     e0a:	d8 01       	movw	r26, r16
     e0c:	8d 93       	st	X+, r24
     e0e:	8d 01       	movw	r16, r26
		for (uint8_t i = 0; i < msgPathSize*4; i ++){
			msgPath[i] = getChar(0);
		}
		
		uint8_t destPhoneAdd[6];
		for (uint8_t i = 0; i < 6; i ++){
     e10:	ae 15       	cp	r26, r14
     e12:	bf 05       	cpc	r27, r15
     e14:	b9 f7       	brne	.-18     	; 0xe04 <handleMessages+0xe0>
     e16:	8e 01       	movw	r16, r28
     e18:	0b 5f       	subi	r16, 0xFB	; 251
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	7e 01       	movw	r14, r28
     e1e:	bb e0       	ldi	r27, 0x0B	; 11
     e20:	eb 0e       	add	r14, r27
     e22:	f1 1c       	adc	r15, r1
			destPhoneAdd[i] = getChar(0);
		}
	
		uint8_t srcPhoneAdd[6];
		for (uint8_t i = 0; i < 6; i ++){
			srcPhoneAdd[i] = getChar(0);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     e2a:	f8 01       	movw	r30, r16
     e2c:	81 93       	st	Z+, r24
     e2e:	8f 01       	movw	r16, r30
		for (uint8_t i = 0; i < 6; i ++){
			destPhoneAdd[i] = getChar(0);
		}
	
		uint8_t srcPhoneAdd[6];
		for (uint8_t i = 0; i < 6; i ++){
     e30:	ee 15       	cp	r30, r14
     e32:	ff 05       	cpc	r31, r15
     e34:	b9 f7       	brne	.-18     	; 0xe24 <handleMessages+0x100>
			srcPhoneAdd[i] = getChar(0);
		}
		for (uint8_t i = 0; i < msgSize; i++){
     e36:	88 20       	and	r8, r8
     e38:	a1 f0       	breq	.+40     	; 0xe62 <handleMessages+0x13e>
     e3a:	0e 89       	ldd	r16, Y+22	; 0x16
     e3c:	1f 89       	ldd	r17, Y+23	; 0x17
     e3e:	ee 24       	eor	r14, r14
     e40:	ea 94       	dec	r14
     e42:	e8 0c       	add	r14, r8
     e44:	f1 2c       	mov	r15, r1
     e46:	ff ef       	ldi	r31, 0xFF	; 255
     e48:	ef 1a       	sub	r14, r31
     e4a:	ff 0a       	sbc	r15, r31
     e4c:	e0 0e       	add	r14, r16
     e4e:	f1 1e       	adc	r15, r17
			msg[i] = getChar(0);
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     e56:	d8 01       	movw	r26, r16
     e58:	8d 93       	st	X+, r24
     e5a:	8d 01       	movw	r16, r26
	
		uint8_t srcPhoneAdd[6];
		for (uint8_t i = 0; i < 6; i ++){
			srcPhoneAdd[i] = getChar(0);
		}
		for (uint8_t i = 0; i < msgSize; i++){
     e5c:	ea 16       	cp	r14, r26
     e5e:	fb 06       	cpc	r15, r27
     e60:	b9 f7       	brne	.-18     	; 0xe50 <handleMessages+0x12c>
			msg[i] = getChar(0);
		}
		
		// Seeing if the this device is the last in the path, if so send message data to esp to be transmitted to the phone
		if (deviceNumInPath == msgPathSize){
     e62:	59 10       	cpse	r5, r9
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <handleMessages+0x164>
			uint8_t espMsg[] = {msgType,destPhoneAdd,srcPhoneAdd,msgSize,msg};
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 8b       	std	Y+17, r24	; 0x11
     e6a:	ce 01       	movw	r24, r28
     e6c:	0b 96       	adiw	r24, 0x0b	; 11
     e6e:	8a 8b       	std	Y+18, r24	; 0x12
     e70:	06 97       	sbiw	r24, 0x06	; 6
     e72:	8b 8b       	std	Y+19, r24	; 0x13
     e74:	8c 8a       	std	Y+20, r8	; 0x14
     e76:	be 89       	ldd	r27, Y+22	; 0x16
     e78:	bd 8b       	std	Y+21, r27	; 0x15
			TXWrite(espMsg,sizeof(espMsg),1);
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	65 e0       	ldi	r22, 0x05	; 5
     e80:	0c 96       	adiw	r24, 0x0c	; 12
     e82:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
     e86:	38 c0       	rjmp	.+112    	; 0xef8 <handleMessages+0x1d4>
		}
		
		// If not pass along the message to the next NUB device
		else{
			uint8_t msgHeader[] = {msgType,deviceNumInPath,msgPathSize,msgSize};
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	89 8b       	std	Y+17, r24	; 0x11
     e8c:	5a 8a       	std	Y+18, r5	; 0x12
     e8e:	9b 8a       	std	Y+19, r9	; 0x13
     e90:	8c 8a       	std	Y+20, r8	; 0x14
	
			writeDestDSN(msgPath[deviceNumInPath + 1]);		// The next devices DSN
     e92:	e8 8d       	ldd	r30, Y+24	; 0x18
     e94:	f9 8d       	ldd	r31, Y+25	; 0x19
     e96:	e5 0d       	add	r30, r5
     e98:	f1 1d       	adc	r31, r1
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <writeDestDSN>
	
			// Send [msgType (1 byte), deviceNumInPath (1 byte), msgPathSize (1 byte), msgSize (1 byte), 
			//       msgPath (var), destination phone address (6 bytes), source phone address (6 bytes), message (var)]
	
			TXWrite(msgHeader,sizeof(msgHeader),0);
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	64 e0       	ldi	r22, 0x04	; 4
     ea8:	ce 01       	movw	r24, r28
     eaa:	41 96       	adiw	r24, 0x11	; 17
     eac:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			TXWrite(msgPath,msgPathSize*4,0);
     eb0:	69 2d       	mov	r22, r9
     eb2:	66 0f       	add	r22, r22
     eb4:	66 0f       	add	r22, r22
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	88 8d       	ldd	r24, Y+24	; 0x18
     ebc:	99 8d       	ldd	r25, Y+25	; 0x19
     ebe:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			TXWrite(destPhoneAdd,6,0);			// mac address
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	66 e0       	ldi	r22, 0x06	; 6
     ec8:	ce 01       	movw	r24, r28
     eca:	0b 96       	adiw	r24, 0x0b	; 11
     ecc:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
			TXWrite(srcPhoneAdd,6,0);			// mac address
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	66 e0       	ldi	r22, 0x06	; 6
     ed6:	ce 01       	movw	r24, r28
     ed8:	05 96       	adiw	r24, 0x05	; 5
     eda:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
	
			TXWrite(msg, msgSize,0);
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	68 2d       	mov	r22, r8
     ee4:	8e 89       	ldd	r24, Y+22	; 0x16
     ee6:	9f 89       	ldd	r25, Y+23	; 0x17
     ee8:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
		
			sendAck(myDSN,sourceDSN);
     eec:	be 01       	movw	r22, r28
     eee:	6f 5f       	subi	r22, 0xFF	; 255
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	c6 01       	movw	r24, r12
     ef4:	0e 94 4c 02 	call	0x498	; 0x498 <sendAck>
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	3e be       	out	0x3e, r3	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	2d be       	out	0x3d, r2	; 61
     f02:	56 c2       	rjmp	.+1196   	; 0x13b0 <handleMessages+0x68c>
			}
	}
	if (msgType == 0x03){												// Network adjustment 
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	09 f5       	brne	.+66     	; 0xf4a <handleMessages+0x226>
		
		sourceDSN[0] = (uint8_t) getChar(0);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f0e:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = (uint8_t) getChar(0);
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f16:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = (uint8_t) getChar(0);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f1e:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = (uint8_t) getChar(0);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f26:	8c 83       	std	Y+4, r24	; 0x04
		uint16_t networkSize = getChar(0);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		uint8_t newCon = getChar(0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		// Received message format: {msgType,myDSN[0],myDSN[1],myDSN[2],myDSN[3],networkSize,newCon,networkPtr};
		
		uint8_t sendToNeighbors = 1;
		
		updateNetworks(networkPtr,sizeOfNetwork,networkPtr2,myCons,newCon);
     f34:	08 2f       	mov	r16, r24
     f36:	10 e0       	ldi	r17, 0x00	; 0
     f38:	95 01       	movw	r18, r10
     f3a:	a4 01       	movw	r20, r8
     f3c:	68 8d       	ldd	r22, Y+24	; 0x18
     f3e:	79 8d       	ldd	r23, Y+25	; 0x19
     f40:	c7 01       	movw	r24, r14
     f42:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <updateNetworks>
				TXWrite(networkPtr,sizeOfNetwork,0);
			}
			return 1;
		}
		else{
			return 0;
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	4d c2       	rjmp	.+1178   	; 0x13e4 <handleMessages+0x6c0>
		}
		
	}
	
	// Acknowledgment received
	if(msgType == 0x04){
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	49 f4       	brne	.+18     	; 0xf60 <handleMessages+0x23c>
		TXWrite(0x16,1,0);
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	86 e1       	ldi	r24, 0x16	; 22
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
		return 0x04;													// Will change later when checking connections
     f5c:	84 e0       	ldi	r24, 0x04	; 4
     f5e:	42 c2       	rjmp	.+1156   	; 0x13e4 <handleMessages+0x6c0>
	}
	
	// Trying to connect
	if(msgType == 0x05){
     f60:	85 30       	cpi	r24, 0x05	; 5
     f62:	09 f0       	breq	.+2      	; 0xf66 <handleMessages+0x242>
     f64:	1c c2       	rjmp	.+1080   	; 0x139e <handleMessages+0x67a>
		
		// Just sent myData, add to structure and send structure
		uint8_t sizeOfMessage;
		uint8_t deviceFound = 0;
		sizeOfMessage = getChar(0);
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f6c:	8d 8f       	std	Y+29, r24	; 0x1d
		sourceDSN[0] = getChar(0); 
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f74:	89 83       	std	Y+1, r24	; 0x01
		sourceDSN[1] = getChar(0); 
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f7c:	8a 83       	std	Y+2, r24	; 0x02
		sourceDSN[2] = getChar(0); 
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f84:	8b 83       	std	Y+3, r24	; 0x03
		sourceDSN[3] = getChar(0); 
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     f8c:	8c 83       	std	Y+4, r24	; 0x04
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) & (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
     f8e:	f7 01       	movw	r30, r14
     f90:	80 81       	ld	r24, Z
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	d8 01       	movw	r26, r16
     f96:	14 96       	adiw	r26, 0x04	; 4
     f98:	2c 91       	ld	r18, X
     f9a:	23 30       	cpi	r18, 0x03	; 3
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <handleMessages+0x27c>
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	99 23       	and	r25, r25
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <handleMessages+0x282>
     fa4:	06 c2       	rjmp	.+1036   	; 0x13b2 <handleMessages+0x68e>
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	85 30       	cpi	r24, 0x05	; 5
     faa:	08 f0       	brcs	.+2      	; 0xfae <handleMessages+0x28a>
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	99 23       	and	r25, r25
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <handleMessages+0x290>
     fb2:	ff c1       	rjmp	.+1022   	; 0x13b2 <handleMessages+0x68e>
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
     fb4:	81 11       	cpse	r24, r1
     fb6:	2c c0       	rjmp	.+88     	; 0x1010 <handleMessages+0x2ec>
     fb8:	6b c0       	rjmp	.+214    	; 0x1090 <handleMessages+0x36c>
					}
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
     fba:	0a 8d       	ldd	r16, Y+26	; 0x1a
     fbc:	01 30       	cpi	r16, 0x01	; 1
     fbe:	11 f5       	brne	.+68     	; 0x1004 <handleMessages+0x2e0>
					for (uint16_t j = 0; j < sizeOfMessage; j++){
     fc0:	41 14       	cp	r4, r1
     fc2:	51 04       	cpc	r5, r1
     fc4:	f9 f0       	breq	.+62     	; 0x1004 <handleMessages+0x2e0>
						*(networkPtr2 + 1 + DEVICESIZE*deviceNum +  j*sizeof(uint8_t) + 4) = getChar(0);
     fc6:	cc 0c       	add	r12, r12
     fc8:	dd 1c       	adc	r13, r13
     fca:	c6 01       	movw	r24, r12
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	c8 0e       	add	r12, r24
     fda:	d9 1e       	adc	r13, r25
     fdc:	86 01       	movw	r16, r12
     fde:	09 5e       	subi	r16, 0xE9	; 233
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	08 0d       	add	r16, r8
     fe4:	19 1d       	adc	r17, r9
     fe6:	2b 8d       	ldd	r18, Y+27	; 0x1b
     fe8:	3c 8d       	ldd	r19, Y+28	; 0x1c
     fea:	c2 0e       	add	r12, r18
     fec:	d3 1e       	adc	r13, r19
     fee:	c8 0c       	add	r12, r8
     ff0:	d9 1c       	adc	r13, r9
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
     ff8:	d8 01       	movw	r26, r16
     ffa:	8d 93       	st	X+, r24
     ffc:	8d 01       	movw	r16, r26
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
     ffe:	ca 16       	cp	r12, r26
    1000:	db 06       	cpc	r13, r27
    1002:	b9 f7       	brne	.-18     	; 0xff2 <handleMessages+0x2ce>
		sourceDSN[2] = getChar(0); 
		sourceDSN[3] = getChar(0); 
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) & (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    1004:	33 94       	inc	r3
    1006:	f7 01       	movw	r30, r14
    1008:	80 81       	ld	r24, Z
    100a:	38 16       	cp	r3, r24
    100c:	78 f0       	brcs	.+30     	; 0x102c <handleMessages+0x308>
    100e:	3d c0       	rjmp	.+122    	; 0x108a <handleMessages+0x366>
    1010:	31 2c       	mov	r3, r1
    1012:	1a 8e       	std	Y+26, r1	; 0x1a
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1014:	0f 2e       	mov	r0, r31
    1016:	f4 e2       	ldi	r31, 0x24	; 36
    1018:	2f 2e       	mov	r2, r31
    101a:	f0 2d       	mov	r31, r0
				}
				uint8_t nubConnections[MAX_NUB_CON][4];	// The DSN addresses of the connected devices
				uint8_t phoneConnections[MAX_PHONE_CON][6];	// The mac addresses of connected phones
				// Device has been found in current network structure, update it with the new data
				if (deviceFound == 1){
					for (uint16_t j = 0; j < sizeOfMessage; j++){
    101c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    101e:	40 2e       	mov	r4, r16
    1020:	51 2c       	mov	r5, r1
    1022:	92 01       	movw	r18, r4
    1024:	29 5e       	subi	r18, 0xE9	; 233
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	3c 8f       	std	Y+28, r19	; 0x1c
    102a:	2b 8f       	std	Y+27, r18	; 0x1b
		
		
		if ((networkPtr->numOfDevices < MaxNetworkSize) & (myCons->myNumOfNubCon < MAX_NUB_CON)){	// Making sure there is room
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    102c:	c3 2c       	mov	r12, r3
    102e:	d1 2c       	mov	r13, r1
    1030:	99 81       	ldd	r25, Y+1	; 0x01
    1032:	f7 01       	movw	r30, r14
    1034:	23 9c       	mul	r2, r3
    1036:	e0 0d       	add	r30, r0
    1038:	f1 1d       	adc	r31, r1
    103a:	11 24       	eor	r1, r1
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	98 13       	cpse	r25, r24
    1040:	bc cf       	rjmp	.-136    	; 0xfba <handleMessages+0x296>
    1042:	2c 9c       	mul	r2, r12
    1044:	f0 01       	movw	r30, r0
    1046:	2d 9c       	mul	r2, r13
    1048:	f0 0d       	add	r31, r0
    104a:	11 24       	eor	r1, r1
    104c:	ee 0d       	add	r30, r14
    104e:	ff 1d       	adc	r31, r15
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	98 13       	cpse	r25, r24
    1056:	b1 cf       	rjmp	.-158    	; 0xfba <handleMessages+0x296>
    1058:	2c 9c       	mul	r2, r12
    105a:	f0 01       	movw	r30, r0
    105c:	2d 9c       	mul	r2, r13
    105e:	f0 0d       	add	r31, r0
    1060:	11 24       	eor	r1, r1
    1062:	ee 0d       	add	r30, r14
    1064:	ff 1d       	adc	r31, r15
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	83 81       	ldd	r24, Z+3	; 0x03
    106a:	98 13       	cpse	r25, r24
    106c:	a6 cf       	rjmp	.-180    	; 0xfba <handleMessages+0x296>
    106e:	2c 9c       	mul	r2, r12
    1070:	f0 01       	movw	r30, r0
    1072:	2d 9c       	mul	r2, r13
    1074:	f0 0d       	add	r31, r0
    1076:	11 24       	eor	r1, r1
    1078:	ee 0d       	add	r30, r14
    107a:	ff 1d       	adc	r31, r15
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	84 81       	ldd	r24, Z+4	; 0x04
    1080:	98 13       	cpse	r25, r24
    1082:	9b cf       	rjmp	.-202    	; 0xfba <handleMessages+0x296>
    1084:	01 e0       	ldi	r16, 0x01	; 1
    1086:	0a 8f       	std	Y+26, r16	; 0x1a
    1088:	9b cf       	rjmp	.-202    	; 0xfc0 <handleMessages+0x29c>
					}
					
				}
			}
			// Adding device data to the next empty place in the network
			if (deviceFound == 0){
    108a:	0a 8d       	ldd	r16, Y+26	; 0x1a
    108c:	01 11       	cpse	r16, r1
    108e:	97 c0       	rjmp	.+302    	; 0x11be <handleMessages+0x49a>
    1090:	2d b7       	in	r18, 0x3d	; 61
    1092:	3e b7       	in	r19, 0x3e	; 62
    1094:	3f 8b       	std	Y+23, r19	; 0x17
    1096:	2e 8b       	std	Y+22, r18	; 0x16
				uint8_t message[sizeOfMessage];
    1098:	0d 8d       	ldd	r16, Y+29	; 0x1d
    109a:	20 2e       	mov	r2, r16
    109c:	31 2c       	mov	r3, r1
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	fc 01       	movw	r30, r24
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	8e 0f       	add	r24, r30
    10b4:	9f 1f       	adc	r25, r31
    10b6:	f4 01       	movw	r30, r8
    10b8:	e8 0f       	add	r30, r24
    10ba:	f9 1f       	adc	r31, r25
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	83 8b       	std	Z+19, r24	; 0x13
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
    10c0:	d7 01       	movw	r26, r14
    10c2:	8c 91       	ld	r24, X
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	fc 01       	movw	r30, r24
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	8e 0f       	add	r24, r30
    10da:	9f 1f       	adc	r25, r31
    10dc:	f4 01       	movw	r30, r8
    10de:	e8 0f       	add	r30, r24
    10e0:	f9 1f       	adc	r31, r25
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	84 8b       	std	Z+20, r24	; 0x14
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
    10e6:	8c 91       	ld	r24, X
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	fc 01       	movw	r30, r24
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	8e 0f       	add	r24, r30
    10fe:	9f 1f       	adc	r25, r31
    1100:	f4 01       	movw	r30, r8
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	85 8b       	std	Z+21, r24	; 0x15
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
    110a:	8c 91       	ld	r24, X
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	fc 01       	movw	r30, r24
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	8e 0f       	add	r24, r30
    1122:	9f 1f       	adc	r25, r31
    1124:	f4 01       	movw	r30, r8
    1126:	e8 0f       	add	r30, r24
    1128:	f9 1f       	adc	r31, r25
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	86 8b       	std	Z+22, r24	; 0x16
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    112e:	21 14       	cp	r2, r1
    1130:	31 04       	cpc	r3, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <handleMessages+0x412>
    1134:	48 c1       	rjmp	.+656    	; 0x13c6 <handleMessages+0x6a2>
    1136:	c1 2c       	mov	r12, r1
    1138:	d1 2c       	mov	r13, r1
    113a:	e3 ec       	ldi	r30, 0xC3	; 195
    113c:	f9 e0       	ldi	r31, 0x09	; 9
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <handleMessages+0x41a>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <handleMessages+0x420>
    1144:	00 00       	nop
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
    1146:	d7 01       	movw	r26, r14
    1148:	0c 91       	ld	r16, X
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	00 0f       	add	r16, r16
    114e:	11 1f       	adc	r17, r17
    1150:	c8 01       	movw	r24, r16
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	08 0f       	add	r16, r24
    1160:	19 1f       	adc	r17, r25
    1162:	09 5e       	subi	r16, 0xE9	; 233
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	0c 0d       	add	r16, r12
    1168:	1d 1d       	adc	r17, r13
    116a:	08 0d       	add	r16, r8
    116c:	19 1d       	adc	r17, r9
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1174:	f8 01       	movw	r30, r16
    1176:	80 83       	st	Z, r24
				
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 0) = sourceDSN[0];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 1) = sourceDSN[1];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 2) = sourceDSN[2];
				*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + 3) = sourceDSN[3];
				for (uint16_t j = 0; j < sizeOfMessage; j++){
    1178:	ff ef       	ldi	r31, 0xFF	; 255
    117a:	cf 1a       	sub	r12, r31
    117c:	df 0a       	sbc	r13, r31
    117e:	2c 14       	cp	r2, r12
    1180:	3d 04       	cpc	r3, r13
    1182:	d9 f6       	brne	.-74     	; 0x113a <handleMessages+0x416>
    1184:	20 c1       	rjmp	.+576    	; 0x13c6 <handleMessages+0x6a2>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] = myCons->myDSN[j];
    1186:	6d 91       	ld	r22, X+
    1188:	f9 01       	movw	r30, r18
    118a:	70 81       	ld	r23, Z
    118c:	fa 01       	movw	r30, r20
    118e:	04 e0       	ldi	r16, 0x04	; 4
    1190:	70 9f       	mul	r23, r16
    1192:	e0 0d       	add	r30, r0
    1194:	f1 1d       	adc	r31, r1
    1196:	11 24       	eor	r1, r1
    1198:	ee 0d       	add	r30, r14
    119a:	ff 1d       	adc	r31, r15
    119c:	e8 0f       	add	r30, r24
    119e:	f9 1f       	adc	r31, r25
    11a0:	67 83       	std	Z+7, r22	; 0x07
    11a2:	01 96       	adiw	r24, 0x01	; 1
					_delay_ms(10);
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	91 05       	cpc	r25, r1
    11a8:	71 f7       	brne	.-36     	; 0x1186 <handleMessages+0x462>
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] = myCons->myDSN[j];
				}
				networkPtr->numOfDevices++;
    11aa:	1f 5f       	subi	r17, 0xFF	; 255
    11ac:	d7 01       	movw	r26, r14
    11ae:	1c 93       	st	X, r17
    11b0:	8e 88       	ldd	r8, Y+22	; 0x16
    11b2:	9f 88       	ldd	r9, Y+23	; 0x17
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	9e be       	out	0x3e, r9	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	8d be       	out	0x3d, r8	; 61
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    11be:	d7 01       	movw	r26, r14
    11c0:	5c 91       	ld	r21, X
    11c2:	55 23       	and	r21, r21
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <handleMessages+0x4a4>
    11c6:	de c0       	rjmp	.+444    	; 0x1384 <handleMessages+0x660>
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    11c8:	69 81       	ldd	r22, Y+1	; 0x01
    11ca:	27 01       	movw	r4, r14
    11cc:	7a 81       	ldd	r23, Y+2	; 0x02
    11ce:	1b 81       	ldd	r17, Y+3	; 0x03
    11d0:	0c 81       	ldd	r16, Y+4	; 0x04
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	c0 c0       	rjmp	.+384    	; 0x1358 <handleMessages+0x634>
    11d8:	94 2f       	mov	r25, r20
    11da:	05 c0       	rjmp	.+10     	; 0x11e6 <handleMessages+0x4c2>
    11dc:	94 2f       	mov	r25, r20
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <handleMessages+0x4c2>
    11e0:	94 2f       	mov	r25, r20
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <handleMessages+0x4c2>
    11e4:	94 2f       	mov	r25, r20
					if (i >= 3){
						deviceFound = 1;
					}
				}
				if (deviceFound == 1){
    11e6:	41 30       	cpi	r20, 0x01	; 1
    11e8:	09 f0       	breq	.+2      	; 0x11ec <handleMessages+0x4c8>
    11ea:	b1 c0       	rjmp	.+354    	; 0x134e <handleMessages+0x62a>
    11ec:	b5 01       	movw	r22, r10
    11ee:	ae 01       	movw	r20, r28
    11f0:	4f 5f       	subi	r20, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
						deviceFound = 1;
					}
				}
				if (deviceFound == 1){
					for (uint8_t i = 0; i < 4; i++){
						networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
    11f8:	28 2e       	mov	r2, r24
    11fa:	31 2c       	mov	r3, r1
    11fc:	b4 e2       	ldi	r27, 0x24	; 36
    11fe:	8b 9f       	mul	r24, r27
    1200:	80 01       	movw	r16, r0
    1202:	11 24       	eor	r1, r1
    1204:	d7 01       	movw	r26, r14
    1206:	a0 0f       	add	r26, r16
    1208:	b1 1f       	adc	r27, r17
    120a:	6d 01       	movw	r12, r26
    120c:	e5 e0       	ldi	r30, 0x05	; 5
    120e:	ce 0e       	add	r12, r30
    1210:	d1 1c       	adc	r13, r1
    1212:	3f 8a       	std	Y+23, r3	; 0x17
    1214:	2e 8a       	std	Y+22, r2	; 0x16
    1216:	db 01       	movw	r26, r22
    1218:	ed 91       	ld	r30, X+
    121a:	bd 01       	movw	r22, r26
    121c:	d6 01       	movw	r26, r12
    121e:	fc 91       	ld	r31, X
    1220:	d8 01       	movw	r26, r16
    1222:	94 e0       	ldi	r25, 0x04	; 4
    1224:	f9 9f       	mul	r31, r25
    1226:	a0 0d       	add	r26, r0
    1228:	b1 1d       	adc	r27, r1
    122a:	11 24       	eor	r1, r1
    122c:	ae 0d       	add	r26, r14
    122e:	bf 1d       	adc	r27, r15
    1230:	a2 0f       	add	r26, r18
    1232:	b3 1f       	adc	r27, r19
    1234:	17 96       	adiw	r26, 0x07	; 7
    1236:	ec 93       	st	X, r30
						myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
    1238:	d5 01       	movw	r26, r10
    123a:	14 96       	adiw	r26, 0x04	; 4
    123c:	ec 91       	ld	r30, X
    123e:	da 01       	movw	r26, r20
    1240:	9d 90       	ld	r9, X+
    1242:	ad 01       	movw	r20, r26
    1244:	d5 01       	movw	r26, r10
    1246:	f4 e0       	ldi	r31, 0x04	; 4
    1248:	ef 9f       	mul	r30, r31
    124a:	a0 0d       	add	r26, r0
    124c:	b1 1d       	adc	r27, r1
    124e:	11 24       	eor	r1, r1
    1250:	a2 0f       	add	r26, r18
    1252:	b3 1f       	adc	r27, r19
    1254:	16 96       	adiw	r26, 0x06	; 6
    1256:	9c 92       	st	X, r9
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
					if (i >= 3){
						deviceFound = 1;
					}
				}
				if (deviceFound == 1){
					for (uint8_t i = 0; i < 4; i++){
    125c:	24 30       	cpi	r18, 0x04	; 4
    125e:	31 05       	cpc	r19, r1
    1260:	c1 f6       	brne	.-80     	; 0x1212 <handleMessages+0x4ee>
						networkPtr->device[deviceNum].nubConnections[networkPtr->device[deviceNum].numOfNubCon][i] = myCons->myDSN[i];
						myCons->myNubConnections[myCons->myNumOfNubCon][i] = sourceDSN[i];
					}
					myCons->myNumOfNubCon ++;
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	9e 0f       	add	r25, r30
    1266:	d5 01       	movw	r26, r10
    1268:	14 96       	adiw	r26, 0x04	; 4
    126a:	9c 93       	st	X, r25
					networkPtr->device[deviceNum].numOfNubCon ++;
    126c:	94 e2       	ldi	r25, 0x24	; 36
    126e:	92 9d       	mul	r25, r2
    1270:	d0 01       	movw	r26, r0
    1272:	93 9d       	mul	r25, r3
    1274:	b0 0d       	add	r27, r0
    1276:	11 24       	eor	r1, r1
    1278:	ae 0d       	add	r26, r14
    127a:	bf 1d       	adc	r27, r15
    127c:	15 96       	adiw	r26, 0x05	; 5
    127e:	9c 91       	ld	r25, X
    1280:	15 97       	sbiw	r26, 0x05	; 5
    1282:	9f 5f       	subi	r25, 0xFF	; 255
    1284:	15 96       	adiw	r26, 0x05	; 5
    1286:	9c 93       	st	X, r25
					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    1288:	d7 01       	movw	r26, r14
    128a:	5c 91       	ld	r21, X
    128c:	55 23       	and	r21, r21
    128e:	09 f4       	brne	.+2      	; 0x1292 <handleMessages+0x56e>
    1290:	79 c0       	rjmp	.+242    	; 0x1384 <handleMessages+0x660>
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    1292:	f5 01       	movw	r30, r10
    1294:	60 81       	ld	r22, Z
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	41 c0       	rjmp	.+130    	; 0x131e <handleMessages+0x5fa>
    129c:	24 2f       	mov	r18, r20
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <handleMessages+0x586>
    12a0:	24 2f       	mov	r18, r20
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <handleMessages+0x586>
    12a4:	24 2f       	mov	r18, r20
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <handleMessages+0x586>
    12a8:	24 2f       	mov	r18, r20
								deviceFound = 1;
							}
						}
						
						
						if (deviceFound == 1){
    12aa:	41 30       	cpi	r20, 0x01	; 1
    12ac:	89 f5       	brne	.+98     	; 0x1310 <handleMessages+0x5ec>
    12ae:	d7 01       	movw	r26, r14
    12b0:	f4 e2       	ldi	r31, 0x24	; 36
    12b2:	8f 9f       	mul	r24, r31
    12b4:	a0 0d       	add	r26, r0
    12b6:	b1 1d       	adc	r27, r1
    12b8:	11 24       	eor	r1, r1
    12ba:	11 96       	adiw	r26, 0x01	; 1
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
						}
						
						
						if (deviceFound == 1){
							for (uint16_t j = 0; j < 4; j++){
								networkPtr->device[myDeviceNum].nubConnections[myCons->myNumOfNubCon - 1][j] = networkPtr->device[deviceNum].deviceDSN[j];
    12c0:	49 2f       	mov	r20, r25
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	04 e2       	ldi	r16, 0x24	; 36
    12c6:	90 9f       	mul	r25, r16
    12c8:	c0 01       	movw	r24, r0
    12ca:	11 24       	eor	r1, r1
    12cc:	6d 91       	ld	r22, X+
    12ce:	f5 01       	movw	r30, r10
    12d0:	74 81       	ldd	r23, Z+4	; 0x04
    12d2:	e7 2f       	mov	r30, r23
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	e8 0f       	add	r30, r24
    12e2:	f9 1f       	adc	r31, r25
    12e4:	ee 0d       	add	r30, r14
    12e6:	ff 1d       	adc	r31, r15
    12e8:	e2 0f       	add	r30, r18
    12ea:	f3 1f       	adc	r31, r19
    12ec:	67 83       	std	Z+7, r22	; 0x07
							}
						}
						
						
						if (deviceFound == 1){
							for (uint16_t j = 0; j < 4; j++){
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	24 30       	cpi	r18, 0x04	; 4
    12f4:	31 05       	cpc	r19, r1
    12f6:	51 f7       	brne	.-44     	; 0x12cc <handleMessages+0x5a8>
								networkPtr->device[myDeviceNum].nubConnections[myCons->myNumOfNubCon - 1][j] = networkPtr->device[deviceNum].deviceDSN[j];
								
							}
							
							networkPtr->device[myDeviceNum].numOfNubCon ++;
    12f8:	84 e2       	ldi	r24, 0x24	; 36
    12fa:	84 9f       	mul	r24, r20
    12fc:	f0 01       	movw	r30, r0
    12fe:	85 9f       	mul	r24, r21
    1300:	f0 0d       	add	r31, r0
    1302:	11 24       	eor	r1, r1
    1304:	ee 0d       	add	r30, r14
    1306:	ff 1d       	adc	r31, r15
    1308:	85 81       	ldd	r24, Z+5	; 0x05
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	85 83       	std	Z+5, r24	; 0x05
							break;
    130e:	3a c0       	rjmp	.+116    	; 0x1384 <handleMessages+0x660>
					networkPtr->device[deviceNum].numOfNubCon ++;
					
					
					// In the next two loops it searches for its own dsn to add the new connection to its list in the network
					deviceFound = 0;
					for (uint8_t myDeviceNum = 0; myDeviceNum < networkPtr->numOfDevices; myDeviceNum++){
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	f4 e2       	ldi	r31, 0x24	; 36
    1314:	4f 0e       	add	r4, r31
    1316:	51 1c       	adc	r5, r1
    1318:	95 17       	cp	r25, r21
    131a:	a1 f1       	breq	.+104    	; 0x1384 <handleMessages+0x660>
    131c:	42 2f       	mov	r20, r18
    131e:	f2 01       	movw	r30, r4
						for( uint8_t i = 0; i < 4; i++){
							if (myCons->myDSN[i] != networkPtr->device[myDeviceNum].deviceDSN[i]){break;}
    1320:	21 81       	ldd	r18, Z+1	; 0x01
    1322:	62 13       	cpse	r22, r18
    1324:	bb cf       	rjmp	.-138    	; 0x129c <handleMessages+0x578>
    1326:	32 81       	ldd	r19, Z+2	; 0x02
    1328:	d5 01       	movw	r26, r10
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	2c 91       	ld	r18, X
    132e:	11 97       	sbiw	r26, 0x01	; 1
    1330:	32 13       	cpse	r19, r18
    1332:	b6 cf       	rjmp	.-148    	; 0x12a0 <handleMessages+0x57c>
    1334:	12 96       	adiw	r26, 0x02	; 2
    1336:	3c 91       	ld	r19, X
    1338:	12 97       	sbiw	r26, 0x02	; 2
    133a:	23 81       	ldd	r18, Z+3	; 0x03
    133c:	32 13       	cpse	r19, r18
    133e:	b2 cf       	rjmp	.-156    	; 0x12a4 <handleMessages+0x580>
    1340:	13 96       	adiw	r26, 0x03	; 3
    1342:	3c 91       	ld	r19, X
    1344:	24 81       	ldd	r18, Z+4	; 0x04
    1346:	32 17       	cp	r19, r18
    1348:	09 f4       	brne	.+2      	; 0x134c <handleMessages+0x628>
    134a:	b1 cf       	rjmp	.-158    	; 0x12ae <handleMessages+0x58a>
    134c:	ad cf       	rjmp	.-166    	; 0x12a8 <handleMessages+0x584>
				
			}
			
			// Adding local device to connection list of new device and updating local connection list
			deviceFound = 0;
			for (uint8_t deviceNum = 0; deviceNum < networkPtr->numOfDevices; deviceNum++){
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	94 96       	adiw	r26, 0x24	; 36
    1352:	85 17       	cp	r24, r21
    1354:	b9 f0       	breq	.+46     	; 0x1384 <handleMessages+0x660>
    1356:	49 2f       	mov	r20, r25
				for( uint8_t i = 0; i < 4; i++){
					if (sourceDSN[i] != networkPtr->device[deviceNum].deviceDSN[i]){break;}
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	9c 91       	ld	r25, X
    135c:	11 97       	sbiw	r26, 0x01	; 1
    135e:	69 13       	cpse	r22, r25
    1360:	3b cf       	rjmp	.-394    	; 0x11d8 <handleMessages+0x4b4>
    1362:	12 96       	adiw	r26, 0x02	; 2
    1364:	9c 91       	ld	r25, X
    1366:	12 97       	sbiw	r26, 0x02	; 2
    1368:	79 13       	cpse	r23, r25
    136a:	38 cf       	rjmp	.-400    	; 0x11dc <handleMessages+0x4b8>
    136c:	13 96       	adiw	r26, 0x03	; 3
    136e:	9c 91       	ld	r25, X
    1370:	13 97       	sbiw	r26, 0x03	; 3
    1372:	19 13       	cpse	r17, r25
    1374:	35 cf       	rjmp	.-406    	; 0x11e0 <handleMessages+0x4bc>
    1376:	14 96       	adiw	r26, 0x04	; 4
    1378:	9c 91       	ld	r25, X
    137a:	14 97       	sbiw	r26, 0x04	; 4
    137c:	90 17       	cp	r25, r16
    137e:	09 f4       	brne	.+2      	; 0x1382 <handleMessages+0x65e>
    1380:	35 cf       	rjmp	.-406    	; 0x11ec <handleMessages+0x4c8>
    1382:	30 cf       	rjmp	.-416    	; 0x11e4 <handleMessages+0x4c0>
					break;
				}
			}

			
			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
    1384:	01 e0       	ldi	r16, 0x01	; 1
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	9e 01       	movw	r18, r28
    138a:	2f 5f       	subi	r18, 0xFF	; 255
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	a5 01       	movw	r20, r10
    1390:	68 8d       	ldd	r22, Y+24	; 0x18
    1392:	79 8d       	ldd	r23, Y+25	; 0x19
    1394:	c7 01       	movw	r24, r14
    1396:	0e 94 12 02 	call	0x424	; 0x424 <sendNetworkData>
			return 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	23 c0       	rjmp	.+70     	; 0x13e4 <handleMessages+0x6c0>
		}
	}
	
	
	// Ack from Humpro after command is sent
	if (msgType == 0x06){
    139e:	86 30       	cpi	r24, 0x06	; 6
    13a0:	39 f4       	brne	.+14     	; 0x13b0 <handleMessages+0x68c>
		uint8_t regNum		= (uint8_t) getChar(0);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		uint8_t regValue	= (uint8_t) getChar(0);
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
		return regValue;
    13ae:	1a c0       	rjmp	.+52     	; 0x13e4 <handleMessages+0x6c0>
	}
	// Message from Humpro
	
}
    13b0:	19 c0       	rjmp	.+50     	; 0x13e4 <handleMessages+0x6c0>
			
			sendNetworkData(networkPtr,sizeOfNetwork,myCons->myDSN,sourceDSN,1);
			return 1;
		}
		else{
			return 0;
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	17 c0       	rjmp	.+46     	; 0x13e4 <handleMessages+0x6c0>
    13b6:	8e 01       	movw	r16, r28
    13b8:	05 5f       	subi	r16, 0xF5	; 245
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	7e 01       	movw	r14, r28
    13be:	b1 e1       	ldi	r27, 0x11	; 17
    13c0:	eb 0e       	add	r14, r27
    13c2:	f1 1c       	adc	r15, r1
    13c4:	1f cd       	rjmp	.-1474   	; 0xe04 <handleMessages+0xe0>
					*(networkPtr2 + 1 + DEVICESIZE * networkPtr->numOfDevices + j*sizeof(uint8_t) + 4) = getChar(0);
					
				}
				// Adding this devices dsn to newly connected device connection list
				for (uint8_t j = 0; j < 4; j++){
					networkPtr->device[networkPtr->numOfDevices].nubConnections[networkPtr->device[networkPtr->numOfDevices].numOfNubCon][j] = myCons->myDSN[j];
    13c6:	f7 01       	movw	r30, r14
    13c8:	10 81       	ld	r17, Z
    13ca:	d5 01       	movw	r26, r10
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	f4 e2       	ldi	r31, 0x24	; 36
    13d2:	1f 9f       	mul	r17, r31
    13d4:	a0 01       	movw	r20, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	97 01       	movw	r18, r14
    13da:	24 0f       	add	r18, r20
    13dc:	35 1f       	adc	r19, r21
    13de:	2b 5f       	subi	r18, 0xFB	; 251
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	d1 ce       	rjmp	.-606    	; 0x1186 <handleMessages+0x462>
		uint8_t regValue	= (uint8_t) getChar(0);
		return regValue;
	}
	// Message from Humpro
	
}
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	7e be       	out	0x3e, r7	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	6d be       	out	0x3d, r6	; 61
    13ee:	6d 96       	adiw	r28, 0x1d	; 29
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	bf 90       	pop	r11
    140c:	af 90       	pop	r10
    140e:	9f 90       	pop	r9
    1410:	8f 90       	pop	r8
    1412:	7f 90       	pop	r7
    1414:	6f 90       	pop	r6
    1416:	5f 90       	pop	r5
    1418:	4f 90       	pop	r4
    141a:	3f 90       	pop	r3
    141c:	2f 90       	pop	r2
    141e:	08 95       	ret

00001420 <USART_setup>:

// Setting up USART for communication between HUMPRO900 module and the MCU
void USART_setup(unsigned int ubrr){
	
	// UART 0
	UBRR0H = (unsigned char)(ubrr>>8);			// Setting baud rate
    1420:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)ubrr;
    1424:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0A = (1<<UDRE0)|(1<<U2X0);
    1428:	42 e2       	ldi	r20, 0x22	; 34
    142a:	40 93 c0 00 	sts	0x00C0, r20	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0)|(1<<TXEN0);				// Enabling Tx & Rx
    142e:	38 e9       	ldi	r19, 0x98	; 152
    1430:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    1434:	2e e0       	ldi	r18, 0x0E	; 14
    1436:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// UART 1
	UBRR1H = (unsigned char)(ubrr>>8);			// Setting baud rate
    143a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
	UBRR1L = (unsigned char)ubrr;
    143e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
	UCSR1A = (1<<UDRE1)|(1<<U2X0);
    1442:	40 93 c8 00 	sts	0x00C8, r20	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
	UCSR1B = (1<<RXEN1)|(1<<RXCIE1)|(1<<TXEN1);				// Enabling Tx & Rx
    1446:	30 93 c9 00 	sts	0x00C9, r19	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
	UCSR1C = (1<<USBS1)|(3<<UCSZ00);			// 2 stop bits & 8 bit character size
    144a:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
    144e:	08 95       	ret

00001450 <setupTransceiver>:
}



// Setting up ports for HUMPRO900 transceiver
uint8_t * setupTransceiver(){
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	60 97       	sbiw	r28, 0x10	; 16
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
	
	sei();		// Enabling interrupts
    1468:	78 94       	sei
	DDRB |= (1 << DDB7);	//PD4 PWR High for normal op, low for low power operation (power down)
    146a:	27 9a       	sbi	0x04, 7	; 4
	//DDRC &= ~(1 << DDC3);	//PC3 CRESP_BAR
	DDRC &= ~(1 << DDC4);	//PC4 CTS_BAR (high when busy, low when module is ready)
    146c:	3c 98       	cbi	0x07, 4	; 7
	DDRB |= (1 << DDB6);	//PC5 Reset, resets when low
    146e:	26 9a       	sbi	0x04, 6	; 4
	
	
	//DDRD &= ~(1 << DDD0);	//PD2 Buffer empty status (high when buffer is empty) input
	DDRD |= (1 << DDD3);	//PD3 "PUSH button" PULL LOW
    1470:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD5);	//PD5 CMD_BAR (high for data transmit, low for commands)
    1472:	55 9a       	sbi	0x0a, 5	; 10
	
	PORTD &= ~(1<< PORTD3);
    1474:	5b 98       	cbi	0x0b, 3	; 11
	PORTB &= ~(1 << PORTB6);		// Reset norm operation
    1476:	2e 98       	cbi	0x05, 6	; 5
    1478:	87 ea       	ldi	r24, 0xA7	; 167
    147a:	91 e6       	ldi	r25, 0x61	; 97
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <setupTransceiver+0x2c>
    1480:	00 c0       	rjmp	.+0      	; 0x1482 <setupTransceiver+0x32>
    1482:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1 <<PORTB6);
    1484:	2e 9a       	sbi	0x05, 6	; 5
    1486:	9f e3       	ldi	r25, 0x3F	; 63
    1488:	ed e0       	ldi	r30, 0x0D	; 13
    148a:	f3 e0       	ldi	r31, 0x03	; 3
    148c:	91 50       	subi	r25, 0x01	; 1
    148e:	e0 40       	sbci	r30, 0x00	; 0
    1490:	f0 40       	sbci	r31, 0x00	; 0
    1492:	e1 f7       	brne	.-8      	; 0x148c <setupTransceiver+0x3c>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <setupTransceiver+0x46>
    1496:	00 00       	nop
	_delay_ms(1000);
	rx0ReadPos = rx0WritePos;	// Ignoring reset message
    1498:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    149c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    14a0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    14a4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	
	
	PORTD &= ~(1 << PORTD5);	// Command mode
    14a8:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t addMode[4]	= {0xFF,0x02,0x4F,0x04};		// Setting address mode as DSN (Volatile address)
	uint8_t showVer[4]	= {0xFF,0x02,0x0A,0x00};		// Do not show version at start up
	uint8_t CMDHold[4]	= {0xFF,0x02,0x6E,0x00};		// If CMD_BAR is low, wait until it goes high to send to mcu
	uint8_t compat[4]	= {0xFF,0x02,0x70,0x00};		// Compatibility mode to enable broadcast function for DSN
	uint8_t autoAdd[4]	= {0xFF,0x02,0x71,0x04};		// Auto addressing for DNS mode
	uint8_t myDSN3[4]	= {0xFF,0x02,0xFE,0x34};				// Read command for preprogrammed DNS values, DSN3 is MSB
    14aa:	2f ef       	ldi	r18, 0xFF	; 255
    14ac:	29 83       	std	Y+1, r18	; 0x01
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	8e ef       	ldi	r24, 0xFE	; 254
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	34 e3       	ldi	r19, 0x34	; 52
    14b8:	3c 83       	std	Y+4, r19	; 0x04
	uint8_t myDSN2[4]	= {0xFF,0x02,0xFE,0x35};
    14ba:	2d 83       	std	Y+5, r18	; 0x05
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	35 e3       	ldi	r19, 0x35	; 53
    14c2:	38 87       	std	Y+8, r19	; 0x08
	uint8_t myDSN1[4]	= {0xFF,0x02,0xFE,0x36};
    14c4:	29 87       	std	Y+9, r18	; 0x09
    14c6:	9a 87       	std	Y+10, r25	; 0x0a
    14c8:	8b 87       	std	Y+11, r24	; 0x0b
    14ca:	36 e3       	ldi	r19, 0x36	; 54
    14cc:	3c 87       	std	Y+12, r19	; 0x0c
	uint8_t myDSN0[4]	= {0xFF,0x02,0xFE,0x37};
    14ce:	2d 87       	std	Y+13, r18	; 0x0d
    14d0:	9e 87       	std	Y+14, r25	; 0x0e
    14d2:	8f 87       	std	Y+15, r24	; 0x0f
    14d4:	87 e3       	ldi	r24, 0x37	; 55
    14d6:	88 8b       	std	Y+16, r24	; 0x10
	//getChar(0);
	//TX0Write(autoAdd[0],4);
	
	
	// Getting local DNS info (third char returned)
	uint8_t *myDSNVal = malloc(4*sizeof(uint8_t));
    14d8:	84 e0       	ldi	r24, 0x04	; 4
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 27 0b 	call	0x164e	; 0x164e <malloc>
    14e0:	8c 01       	movw	r16, r24
	
	TXWrite(myDSN3,4,0);
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	64 e0       	ldi	r22, 0x04	; 4
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    14f2:	87 ea       	ldi	r24, 0xA7	; 167
    14f4:	91 e6       	ldi	r25, 0x61	; 97
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <setupTransceiver+0xa6>
    14fa:	00 c0       	rjmp	.+0      	; 0x14fc <setupTransceiver+0xac>
    14fc:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    14fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    1502:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	91 05       	cpc	r25, r1
    150a:	ec f3       	brlt	.-6      	; 0x1506 <setupTransceiver+0xb6>
	
	rx0ReadPos = rx0WritePos -1;		// Ignoring other bytes received, only care about DSN value
    150c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    1510:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    151a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>

	myDSNVal[0] = getChar(0);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    1526:	f8 01       	movw	r30, r16
    1528:	80 83       	st	Z, r24
	
	
	TXWrite(myDSN2,4,0);
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	ce 01       	movw	r24, r28
    1534:	05 96       	adiw	r24, 0x05	; 5
    1536:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    153a:	87 ea       	ldi	r24, 0xA7	; 167
    153c:	91 e6       	ldi	r25, 0x61	; 97
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <setupTransceiver+0xee>
    1542:	00 c0       	rjmp	.+0      	; 0x1544 <setupTransceiver+0xf4>
    1544:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    1546:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    154a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	ec f3       	brlt	.-6      	; 0x154e <setupTransceiver+0xfe>
		
	rx0ReadPos = rx0WritePos -1;
    1554:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    1558:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    1562:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	myDSNVal[1] = getChar(0);
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    156e:	f8 01       	movw	r30, r16
    1570:	81 83       	std	Z+1, r24	; 0x01
	
	
	TXWrite(myDSN1,4,0);
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	64 e0       	ldi	r22, 0x04	; 4
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	ce 01       	movw	r24, r28
    157c:	09 96       	adiw	r24, 0x09	; 9
    157e:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1582:	87 ea       	ldi	r24, 0xA7	; 167
    1584:	91 e6       	ldi	r25, 0x61	; 97
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <setupTransceiver+0x136>
    158a:	00 c0       	rjmp	.+0      	; 0x158c <setupTransceiver+0x13c>
    158c:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    158e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    1592:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	91 05       	cpc	r25, r1
    159a:	ec f3       	brlt	.-6      	; 0x1596 <setupTransceiver+0x146>
	rx0ReadPos = rx0WritePos -1;
    159c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    15a0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    15aa:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	myDSNVal[2] = getChar(0);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    15b6:	f8 01       	movw	r30, r16
    15b8:	82 83       	std	Z+2, r24	; 0x02
	
	
	TXWrite(myDSN0,4,0);
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	64 e0       	ldi	r22, 0x04	; 4
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	ce 01       	movw	r24, r28
    15c4:	0d 96       	adiw	r24, 0x0d	; 13
    15c6:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    15ca:	87 ea       	ldi	r24, 0xA7	; 167
    15cc:	91 e6       	ldi	r25, 0x61	; 97
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <setupTransceiver+0x17e>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <setupTransceiver+0x184>
    15d4:	00 00       	nop
	_delay_ms(100);
	while(unread0Bytes < 3);
    15d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <unread0Bytes>
    15da:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <unread0Bytes+0x1>
    15de:	83 30       	cpi	r24, 0x03	; 3
    15e0:	91 05       	cpc	r25, r1
    15e2:	ec f3       	brlt	.-6      	; 0x15de <setupTransceiver+0x18e>
	rx0ReadPos = rx0WritePos -1;
    15e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx0WritePos>
    15e8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rx0ReadPos>
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <rx1Buffer>
    15f2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rx0ReadPos>
	myDSNVal[3] = getChar(0);
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 ae 00 	call	0x15c	; 0x15c <getChar>
    15fe:	f8 01       	movw	r30, r16
    1600:	83 83       	std	Z+3, r24	; 0x03
    1602:	ff eb       	ldi	r31, 0xBF	; 191
    1604:	27 e2       	ldi	r18, 0x27	; 39
    1606:	89 e0       	ldi	r24, 0x09	; 9
    1608:	f1 50       	subi	r31, 0x01	; 1
    160a:	20 40       	sbci	r18, 0x00	; 0
    160c:	80 40       	sbci	r24, 0x00	; 0
    160e:	e1 f7       	brne	.-8      	; 0x1608 <setupTransceiver+0x1b8>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <setupTransceiver+0x1c2>
    1612:	00 00       	nop
	
	_delay_ms(3000);
	
	TXWrite(myDSNVal,4,0);
    1614:	40 e0       	ldi	r20, 0x00	; 0
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	64 e0       	ldi	r22, 0x04	; 4
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	c8 01       	movw	r24, r16
    161e:	0e 94 79 00 	call	0xf2	; 0xf2 <TXWrite>
    1622:	9f e3       	ldi	r25, 0x3F	; 63
    1624:	ed e0       	ldi	r30, 0x0D	; 13
    1626:	f3 e0       	ldi	r31, 0x03	; 3
    1628:	91 50       	subi	r25, 0x01	; 1
    162a:	e0 40       	sbci	r30, 0x00	; 0
    162c:	f0 40       	sbci	r31, 0x00	; 0
    162e:	e1 f7       	brne	.-8      	; 0x1628 <setupTransceiver+0x1d8>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <setupTransceiver+0x1e2>
    1632:	00 00       	nop
	_delay_ms(1000);
	PORTD |= (1 << PORTD5);	// Data transmit mode
    1634:	5d 9a       	sbi	0x0b, 5	; 11
	
	//PORTC |= (1 << PORTC5);
	
	return myDSNVal;
	
}
    1636:	c8 01       	movw	r24, r16
    1638:	60 96       	adiw	r28, 0x10	; 16
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <malloc>:
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	82 30       	cpi	r24, 0x02	; 2
    1658:	91 05       	cpc	r25, r1
    165a:	10 f4       	brcc	.+4      	; 0x1660 <malloc+0x12>
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <__flp>
    1664:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <__flp+0x1>
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	a0 e0       	ldi	r26, 0x00	; 0
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	30 97       	sbiw	r30, 0x00	; 0
    1672:	19 f1       	breq	.+70     	; 0x16ba <malloc+0x6c>
    1674:	40 81       	ld	r20, Z
    1676:	51 81       	ldd	r21, Z+1	; 0x01
    1678:	02 81       	ldd	r16, Z+2	; 0x02
    167a:	13 81       	ldd	r17, Z+3	; 0x03
    167c:	48 17       	cp	r20, r24
    167e:	59 07       	cpc	r21, r25
    1680:	c8 f0       	brcs	.+50     	; 0x16b4 <malloc+0x66>
    1682:	84 17       	cp	r24, r20
    1684:	95 07       	cpc	r25, r21
    1686:	69 f4       	brne	.+26     	; 0x16a2 <malloc+0x54>
    1688:	10 97       	sbiw	r26, 0x00	; 0
    168a:	31 f0       	breq	.+12     	; 0x1698 <malloc+0x4a>
    168c:	12 96       	adiw	r26, 0x02	; 2
    168e:	0c 93       	st	X, r16
    1690:	12 97       	sbiw	r26, 0x02	; 2
    1692:	13 96       	adiw	r26, 0x03	; 3
    1694:	1c 93       	st	X, r17
    1696:	27 c0       	rjmp	.+78     	; 0x16e6 <malloc+0x98>
    1698:	00 93 16 03 	sts	0x0316, r16	; 0x800316 <__flp>
    169c:	10 93 17 03 	sts	0x0317, r17	; 0x800317 <__flp+0x1>
    16a0:	22 c0       	rjmp	.+68     	; 0x16e6 <malloc+0x98>
    16a2:	21 15       	cp	r18, r1
    16a4:	31 05       	cpc	r19, r1
    16a6:	19 f0       	breq	.+6      	; 0x16ae <malloc+0x60>
    16a8:	42 17       	cp	r20, r18
    16aa:	53 07       	cpc	r21, r19
    16ac:	18 f4       	brcc	.+6      	; 0x16b4 <malloc+0x66>
    16ae:	9a 01       	movw	r18, r20
    16b0:	bd 01       	movw	r22, r26
    16b2:	ef 01       	movw	r28, r30
    16b4:	df 01       	movw	r26, r30
    16b6:	f8 01       	movw	r30, r16
    16b8:	db cf       	rjmp	.-74     	; 0x1670 <malloc+0x22>
    16ba:	21 15       	cp	r18, r1
    16bc:	31 05       	cpc	r19, r1
    16be:	f9 f0       	breq	.+62     	; 0x16fe <malloc+0xb0>
    16c0:	28 1b       	sub	r18, r24
    16c2:	39 0b       	sbc	r19, r25
    16c4:	24 30       	cpi	r18, 0x04	; 4
    16c6:	31 05       	cpc	r19, r1
    16c8:	80 f4       	brcc	.+32     	; 0x16ea <malloc+0x9c>
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	61 15       	cp	r22, r1
    16d0:	71 05       	cpc	r23, r1
    16d2:	21 f0       	breq	.+8      	; 0x16dc <malloc+0x8e>
    16d4:	fb 01       	movw	r30, r22
    16d6:	93 83       	std	Z+3, r25	; 0x03
    16d8:	82 83       	std	Z+2, r24	; 0x02
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <malloc+0x96>
    16dc:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <__flp+0x1>
    16e0:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <__flp>
    16e4:	fe 01       	movw	r30, r28
    16e6:	32 96       	adiw	r30, 0x02	; 2
    16e8:	44 c0       	rjmp	.+136    	; 0x1772 <malloc+0x124>
    16ea:	fe 01       	movw	r30, r28
    16ec:	e2 0f       	add	r30, r18
    16ee:	f3 1f       	adc	r31, r19
    16f0:	81 93       	st	Z+, r24
    16f2:	91 93       	st	Z+, r25
    16f4:	22 50       	subi	r18, 0x02	; 2
    16f6:	31 09       	sbc	r19, r1
    16f8:	39 83       	std	Y+1, r19	; 0x01
    16fa:	28 83       	st	Y, r18
    16fc:	3a c0       	rjmp	.+116    	; 0x1772 <malloc+0x124>
    16fe:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    1702:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    1706:	23 2b       	or	r18, r19
    1708:	41 f4       	brne	.+16     	; 0x171a <malloc+0xcc>
    170a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    170e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1712:	30 93 15 03 	sts	0x0315, r19	; 0x800315 <__brkval+0x1>
    1716:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <__brkval>
    171a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    171e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1722:	21 15       	cp	r18, r1
    1724:	31 05       	cpc	r19, r1
    1726:	41 f4       	brne	.+16     	; 0x1738 <malloc+0xea>
    1728:	2d b7       	in	r18, 0x3d	; 61
    172a:	3e b7       	in	r19, 0x3e	; 62
    172c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1730:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1734:	24 1b       	sub	r18, r20
    1736:	35 0b       	sbc	r19, r21
    1738:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <__brkval>
    173c:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <__brkval+0x1>
    1740:	e2 17       	cp	r30, r18
    1742:	f3 07       	cpc	r31, r19
    1744:	a0 f4       	brcc	.+40     	; 0x176e <malloc+0x120>
    1746:	2e 1b       	sub	r18, r30
    1748:	3f 0b       	sbc	r19, r31
    174a:	28 17       	cp	r18, r24
    174c:	39 07       	cpc	r19, r25
    174e:	78 f0       	brcs	.+30     	; 0x176e <malloc+0x120>
    1750:	ac 01       	movw	r20, r24
    1752:	4e 5f       	subi	r20, 0xFE	; 254
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	24 17       	cp	r18, r20
    1758:	35 07       	cpc	r19, r21
    175a:	48 f0       	brcs	.+18     	; 0x176e <malloc+0x120>
    175c:	4e 0f       	add	r20, r30
    175e:	5f 1f       	adc	r21, r31
    1760:	50 93 15 03 	sts	0x0315, r21	; 0x800315 <__brkval+0x1>
    1764:	40 93 14 03 	sts	0x0314, r20	; 0x800314 <__brkval>
    1768:	81 93       	st	Z+, r24
    176a:	91 93       	st	Z+, r25
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <malloc+0x124>
    176e:	e0 e0       	ldi	r30, 0x00	; 0
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	cf 01       	movw	r24, r30
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <free>:
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	09 f4       	brne	.+2      	; 0x1788 <free+0xa>
    1786:	81 c0       	rjmp	.+258    	; 0x188a <free+0x10c>
    1788:	fc 01       	movw	r30, r24
    178a:	32 97       	sbiw	r30, 0x02	; 2
    178c:	13 82       	std	Z+3, r1	; 0x03
    178e:	12 82       	std	Z+2, r1	; 0x02
    1790:	a0 91 16 03 	lds	r26, 0x0316	; 0x800316 <__flp>
    1794:	b0 91 17 03 	lds	r27, 0x0317	; 0x800317 <__flp+0x1>
    1798:	10 97       	sbiw	r26, 0x00	; 0
    179a:	81 f4       	brne	.+32     	; 0x17bc <free+0x3e>
    179c:	20 81       	ld	r18, Z
    179e:	31 81       	ldd	r19, Z+1	; 0x01
    17a0:	82 0f       	add	r24, r18
    17a2:	93 1f       	adc	r25, r19
    17a4:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    17a8:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    17ac:	28 17       	cp	r18, r24
    17ae:	39 07       	cpc	r19, r25
    17b0:	51 f5       	brne	.+84     	; 0x1806 <free+0x88>
    17b2:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__brkval+0x1>
    17b6:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__brkval>
    17ba:	67 c0       	rjmp	.+206    	; 0x188a <free+0x10c>
    17bc:	ed 01       	movw	r28, r26
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	ce 17       	cp	r28, r30
    17c4:	df 07       	cpc	r29, r31
    17c6:	40 f4       	brcc	.+16     	; 0x17d8 <free+0x5a>
    17c8:	4a 81       	ldd	r20, Y+2	; 0x02
    17ca:	5b 81       	ldd	r21, Y+3	; 0x03
    17cc:	9e 01       	movw	r18, r28
    17ce:	41 15       	cp	r20, r1
    17d0:	51 05       	cpc	r21, r1
    17d2:	f1 f0       	breq	.+60     	; 0x1810 <free+0x92>
    17d4:	ea 01       	movw	r28, r20
    17d6:	f5 cf       	rjmp	.-22     	; 0x17c2 <free+0x44>
    17d8:	d3 83       	std	Z+3, r29	; 0x03
    17da:	c2 83       	std	Z+2, r28	; 0x02
    17dc:	40 81       	ld	r20, Z
    17de:	51 81       	ldd	r21, Z+1	; 0x01
    17e0:	84 0f       	add	r24, r20
    17e2:	95 1f       	adc	r25, r21
    17e4:	c8 17       	cp	r28, r24
    17e6:	d9 07       	cpc	r29, r25
    17e8:	59 f4       	brne	.+22     	; 0x1800 <free+0x82>
    17ea:	88 81       	ld	r24, Y
    17ec:	99 81       	ldd	r25, Y+1	; 0x01
    17ee:	84 0f       	add	r24, r20
    17f0:	95 1f       	adc	r25, r21
    17f2:	02 96       	adiw	r24, 0x02	; 2
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	93 83       	std	Z+3, r25	; 0x03
    17fe:	82 83       	std	Z+2, r24	; 0x02
    1800:	21 15       	cp	r18, r1
    1802:	31 05       	cpc	r19, r1
    1804:	29 f4       	brne	.+10     	; 0x1810 <free+0x92>
    1806:	f0 93 17 03 	sts	0x0317, r31	; 0x800317 <__flp+0x1>
    180a:	e0 93 16 03 	sts	0x0316, r30	; 0x800316 <__flp>
    180e:	3d c0       	rjmp	.+122    	; 0x188a <free+0x10c>
    1810:	e9 01       	movw	r28, r18
    1812:	fb 83       	std	Y+3, r31	; 0x03
    1814:	ea 83       	std	Y+2, r30	; 0x02
    1816:	49 91       	ld	r20, Y+
    1818:	59 91       	ld	r21, Y+
    181a:	c4 0f       	add	r28, r20
    181c:	d5 1f       	adc	r29, r21
    181e:	ec 17       	cp	r30, r28
    1820:	fd 07       	cpc	r31, r29
    1822:	61 f4       	brne	.+24     	; 0x183c <free+0xbe>
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	84 0f       	add	r24, r20
    182a:	95 1f       	adc	r25, r21
    182c:	02 96       	adiw	r24, 0x02	; 2
    182e:	e9 01       	movw	r28, r18
    1830:	99 83       	std	Y+1, r25	; 0x01
    1832:	88 83       	st	Y, r24
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	9b 83       	std	Y+3, r25	; 0x03
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	e0 e0       	ldi	r30, 0x00	; 0
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	12 96       	adiw	r26, 0x02	; 2
    1842:	8d 91       	ld	r24, X+
    1844:	9c 91       	ld	r25, X
    1846:	13 97       	sbiw	r26, 0x03	; 3
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	19 f0       	breq	.+6      	; 0x1852 <free+0xd4>
    184c:	fd 01       	movw	r30, r26
    184e:	dc 01       	movw	r26, r24
    1850:	f7 cf       	rjmp	.-18     	; 0x1840 <free+0xc2>
    1852:	8d 91       	ld	r24, X+
    1854:	9c 91       	ld	r25, X
    1856:	11 97       	sbiw	r26, 0x01	; 1
    1858:	9d 01       	movw	r18, r26
    185a:	2e 5f       	subi	r18, 0xFE	; 254
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	82 0f       	add	r24, r18
    1860:	93 1f       	adc	r25, r19
    1862:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <__brkval>
    1866:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <__brkval+0x1>
    186a:	28 17       	cp	r18, r24
    186c:	39 07       	cpc	r19, r25
    186e:	69 f4       	brne	.+26     	; 0x188a <free+0x10c>
    1870:	30 97       	sbiw	r30, 0x00	; 0
    1872:	29 f4       	brne	.+10     	; 0x187e <free+0x100>
    1874:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__flp+0x1>
    1878:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__flp>
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <free+0x104>
    187e:	13 82       	std	Z+3, r1	; 0x03
    1880:	12 82       	std	Z+2, r1	; 0x02
    1882:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <__brkval+0x1>
    1886:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <__brkval>
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <_exit>:
    1890:	f8 94       	cli

00001892 <__stop_program>:
    1892:	ff cf       	rjmp	.-2      	; 0x1892 <__stop_program>
